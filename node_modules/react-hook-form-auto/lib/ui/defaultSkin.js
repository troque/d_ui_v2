"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _InputWrap = require("./components/InputWrap");

var _RadiosWrap = require("./components/RadiosWrap");

var _Radio = require("./components/Radio");

var _InputArrayTable = require("./components/InputArrayTable");

var _InputArrayPanel = require("./components/InputArrayPanel");

var _Select = require("./components/Select");

var _Checkbox = require("./components/Checkbox");

var _Button = require("./components/Button");

var _Panel = require("./components/Panel");

var _RemoveGlyph = require("./svgs/RemoveGlyph");

var _AddGlyph = require("./svgs/AddGlyph");

var _utils = require("../utils");

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["schemaTypeName", "field", "fieldSchema", "ref"],
      _excluded2 = ["children"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function standardClasses(props) {
  return (0, _classnames.default)(props.styles.input, props.styles.standard);
}

var _default = {
  defaultWrap: _InputWrap.InputWrap,
  string: {
    props: props => _objectSpread(_objectSpread({}, props), {}, {
      component: props.fieldSchema.textarea ? 'textarea' : 'input',
      type: 'text'
    })
  },
  password: {
    props: {
      component: 'input',
      type: 'password'
    }
  },
  number: {
    coerce: value => parseFloat(value),
    props: {
      component: 'input',
      type: 'number'
    }
  },
  range: {
    coerce: value => parseFloat(value),
    props: {
      component: 'input',
      type: 'range'
    }
  },
  radios: {
    props: props => {
      const {
        schemaTypeName,
        field,
        fieldSchema,
        ref
      } = props,
            rest = _objectWithoutProperties(props, _excluded);

      const {
        options
      } = fieldSchema;
      const optionsProcessed = (0, _utils.processOptions)(_objectSpread({
        schemaTypeName,
        field,
        options
      }, rest));
      return _objectSpread(_objectSpread({}, rest), {}, {
        schemaTypeName,
        field,
        fieldSchema,
        component: _RadiosWrap.RadiosWrap,
        noRef: true,
        children: optionsProcessed.map(op => {
          return /*#__PURE__*/(0, _react.createElement)(_Radio.Radio, _objectSpread(_objectSpread({}, props), {}, {
            key: op.value,
            option: op.value,
            label: op.label,
            field: props.field,
            inline: true
          }));
        })
      });
    }
  },
  select: {
    component: _Select.Select
  },
  boolean: {
    coerce: value => Boolean(value),
    props: props => {
      return _objectSpread(_objectSpread({}, props), {}, {
        component: _Checkbox.Checkbox,
        inline: true
      });
    }
  },
  button: {
    component: _Button.Button
  },
  arrayButton: {
    component: _Button.Button
  },
  form: {
    component: _ref => {
      let {
        children
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded2);

      return /*#__PURE__*/(0, _jsxRuntime.jsx)("form", _objectSpread(_objectSpread({}, rest), {}, {
        children: children
      }));
    }
  },
  panel: {
    component: _Panel.Panel
  },
  addGlyph: {
    component: _AddGlyph.AddGlyph
  },
  removeGlyph: {
    component: _RemoveGlyph.RemoveGlyph
  },
  arrayTable: {
    component: _InputArrayTable.InputArrayTable
  },
  arrayPanel: {
    component: _InputArrayPanel.InputArrayPanel
  },
  div: {
    component: props => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props))
  },
  text: {
    component: ({
      children
    }) => children
  }
};
exports.default = _default;