"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _InputArrayWrap = require("./components/InputArrayWrap");

var _Submodel = require("./components/Submodel");

var _utils = require("../utils");

var _deletedMark = require("./deletedMark");

const _excluded = ["config", "fieldSchema", "skin"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getOtherSchema(schemaDef, fieldName, {
  isArray
}) {
  const field = schemaDef[fieldName];
  const {
    type
  } = field;
  const other = isArray ? type[0] : type;
  return other.getSchema();
}

var _default = {
  array: {
    skipRegister: true,
    nameForErrors: name => `${name}__count`,
    coerce: (arr = [], {
      coerceObject,
      schemaDef,
      fieldName
    }) => {
      const otherSchema = getOtherSchema(schemaDef, fieldName, {
        isArray: true
      });

      if (Array.isArray(arr)) {
        return arr.map(entry => {
          if (entry[_deletedMark.deletedMark]) return null;else return coerceObject({
            object: entry,
            schemaDef: otherSchema
          });
        }).filter(entry => entry !== null);
      } else {
        return [];
      }
    },
    props: props => {
      const {
        config = {},
        fieldSchema,
        skin
      } = props,
            rest = _objectWithoutProperties(props, _excluded);

      const {
        arrayMode
      } = config;
      const finalArrayMode = fieldSchema.arrayMode || arrayMode;
      const isTable = finalArrayMode == 'table';
      const ArrayTable = (0, _utils.getSkinComponent)(skin.arrayTable);
      const ArrayPanel = (0, _utils.getSkinComponent)(skin.arrayPanel);
      const arrayHandler = isTable ? ArrayTable : ArrayPanel;
      return _objectSpread(_objectSpread({}, rest), {}, {
        config,
        component: _InputArrayWrap.InputArrayWrap,
        initiallyEmpty: fieldSchema.initiallyEmpty,
        fieldSchema,
        arrayHandler,
        inline: true,
        noRef: true,
        isTable,
        skin
      });
    }
  },
  schema: {
    skipRegister: true,
    coerce: (obj = {}, {
      coerceObject,
      schemaDef,
      fieldName
    }) => {
      const otherSchema = getOtherSchema(schemaDef, fieldName, {
        isArray: false
      });
      return coerceObject({
        object: obj,
        schemaDef: otherSchema
      });
    },
    component: _Submodel.Submodel
  }
};
exports.default = _default;