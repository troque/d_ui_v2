"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoformBase = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _reactHookForm = require("react-hook-form");

var _componentRender = require("./componentRender");

var _autoform_state = require("../autoform_state");

var _baseSkin = _interopRequireDefault(require("./baseSkin"));

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["schema", "elementProps", "initialValues", "children", "onSubmit", "onErrors", "styles", "submitButton", "submitButtonText", "skin", "skinOverride", "skipManualReset"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Creates a form using the provided skin. The form
 * has all the needed fields, styles and validation
 * errors in order to work.
 */
let AutoformBase = (props, ref) => {
  const {
    schema,
    elementProps,
    initialValues = {},
    children,
    onSubmit,
    onErrors,
    styles,
    submitButton,
    submitButtonText,
    skin,
    skinOverride,
    skipManualReset
  } = props,
        rest = _objectWithoutProperties(props, _excluded);

  if (!schema) {
    throw new Error('<Autoform /> was rendered without schema.');
  }

  const formHook = (0, _reactHookForm.useForm)({
    mode: 'all',
    defaultValues: initialValues
  });
  const {
    control,
    formState,
    register,
    unregister,
    handleSubmit,
    reset
  } = formHook;

  const finalSkin = _objectSpread(_objectSpread(_objectSpread({}, _baseSkin.default), skin), skinOverride);

  const {
    coercedSubmit,
    coercedChange,
    setValue,
    setVisible,
    setHelperText,
    resetState,
    stateControl,
    getValues
  } = (0, _autoform_state.useAutoformState)({
    initialValues,
    onSubmit,
    onChange: props.onChange,
    schema,
    skin: finalSkin,
    formHook,
    skipManualReset
  });
  const submit = handleSubmit(coercedSubmit, onErrors);
  (0, _react.useImperativeHandle)(ref, () => ({
    submit,
    formHook: () => formHook,
    setValue,
    setVisible,
    getValues,
    reset: resetState
  }));

  const inputProps = _objectSpread(_objectSpread(_objectSpread({}, rest), elementProps), {}, {
    reset,
    children,
    initialValues,
    schema,
    register,
    unregister,
    styles,
    skin: finalSkin,
    formHook,
    autoformProps: props,
    stateControl,
    setValue,
    setVisible,
    setHelperText,
    onChange: coercedChange
  });

  const Button = (0, _utils.getSkinComponent)(finalSkin.button);
  const Form = (0, _utils.getSkinComponent)(finalSkin.form);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Form, {
    onSubmit: submit,
    children: [(0, _componentRender.renderInputs)(inputProps), submitButton && /*#__PURE__*/(0, _jsxRuntime.jsx)(Button, {
      styles: styles,
      onClick: submit,
      type: "submit",
      children: submitButtonText
    }), children]
  });
};

exports.AutoformBase = AutoformBase;
exports.AutoformBase = AutoformBase = /*#__PURE__*/(0, _react.forwardRef)(AutoformBase);