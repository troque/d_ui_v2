"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remove = exports.reducer = exports.initialFromDefault = exports.initialEmpty = exports.initial = exports.add = exports.REMOVE = exports.ADD = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

const REMOVE = 'REMOVE';
exports.REMOVE = REMOVE;
const ADD = 'ADD';
exports.ADD = ADD;

const remove = idx => ({
  type: REMOVE,
  idx
});

exports.remove = remove;

const add = () => ({
  type: ADD
});

exports.add = add;
const initialEmpty = {
  last: 0,
  num: 0,
  keys: []
};
exports.initialEmpty = initialEmpty;
const initial = {
  last: 1,
  num: 1,
  keys: [0]
};
exports.initial = initial;

const initialFromDefault = (defaultValue, initiallyEmpty) => {
  if (defaultValue && Array.isArray(defaultValue)) {
    return {
      last: defaultValue.length,
      num: defaultValue.length,
      keys: defaultValue.map((_, idx) => idx)
    };
  } else {
    return initiallyEmpty ? initialEmpty : initial;
  }
};

exports.initialFromDefault = initialFromDefault;

const reducer = (state = initial, action) => {
  switch (action.type) {
    case REMOVE:
      const {
        keys
      } = state;
      return {
        last: state.last,
        num: state.num - 1,
        keys: [].concat(_toConsumableArray(keys.slice(0, action.idx)), [null], _toConsumableArray(keys.slice(action.idx + 1)))
      };

    case ADD:
      return {
        last: state.last + 1,
        num: state.num + 1,
        keys: [].concat(_toConsumableArray(state.keys), [state.last])
      };

    default:
      return state;
  }
};

exports.reducer = reducer;