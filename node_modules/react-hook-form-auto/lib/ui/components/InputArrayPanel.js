"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputArrayPanel = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../../utils");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const renderItemHeader = ({
  styles,
  closeButton
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: styles.itemHeader,
    children: closeButton
  });
};

const renderItems = ({
  styles,
  items,
  Panel
}) => items.map(({
  idx,
  closeButton,
  inputs
}) => {
  const itemHeader = renderItemHeader({
    styles,
    closeButton
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: styles.arrayPanelItem,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Panel, {
      header: itemHeader,
      styles: styles,
      children: inputs
    })
  }, idx);
});

const InputArrayPanel = props => {
  const {
    styles,
    skin
  } = props;
  const Panel = (0, _utils.getSkinComponent)(skin.panel);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: styles.arrayPanelItems,
      children: renderItems(_objectSpread(_objectSpread({}, props), {}, {
        Panel
      }))
    })
  });
};

exports.InputArrayPanel = InputArrayPanel;