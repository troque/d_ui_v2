"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputArrayWrap = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _componentRender = require("../componentRender");

var _ducks = require("../ducks");

var _translation_utils = require("../../translation_utils");

var _deletedMark = require("../deletedMark");

var _utils = require("../../utils");

var _jsxRuntime = require("react/jsx-runtime");

const _excluded = ["name", "newObject", "arrayHandler", "register", "unregister", "errorText", "fieldSchema", "fieldSchema", "schemaTypeName", "formHook", "defaultValue", "initiallyEmpty", "onRemove", "config", "styles", "isTable", "setValue", "skin", "skinElement"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const renderAddButton = ({
  onAdd,
  styles,
  Button,
  AddGlyph
}) => {
  const boundAdd = e => {
    e.preventDefault();
    onAdd();
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Button, {
    onClick: boundAdd,
    styles: styles,
    intent: "add",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(AddGlyph, {
      styles: styles
    })
  });
};

const renderCloseButton = ({
  onRemove,
  idx,
  styles,
  Button,
  RemoveGlyph
}) => {
  const boundRemove = e => {
    e.preventDefault();
    onRemove(idx);
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Button, {
    onClick: boundRemove,
    styles: styles,
    intent: "remove",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RemoveGlyph, {
      styles: styles
    })
  });
};

const renderPanelHeader = ({
  onAdd,
  schemaTypeName,
  aliveItems,
  name,
  styles,
  Button,
  AddGlyph,
  Div,
  Text
}) => {
  const addButton = renderAddButton({
    onAdd,
    styles,
    Button,
    AddGlyph
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Div, {
    className: styles.inputPanelWrap,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Text, {
      className: styles.inputPanelEntity,
      children: (0, _translation_utils.trModel)(schemaTypeName, name, '_field') + ' '
    }), addButton]
  });
};
/**
 * Used for the arrays in models, for
 * example clients: [Clients]
 *
 */


let InputArrayWrap = _ref => {
  let {
    name,
    newObject,
    arrayHandler,
    register,
    unregister,
    errorText = '',
    fieldSchema,
    fieldSchema: {
      type
    },
    schemaTypeName,
    formHook,
    defaultValue,
    initiallyEmpty,
    onRemove,
    config,
    styles,
    isTable,
    setValue,
    skin,
    skinElement
  } = _ref,
      rest = _objectWithoutProperties(_ref, _excluded);

  const [items, dispatch] = (0, _react.useReducer)(_ducks.inputArray.reducer, _ducks.inputArray.initialFromDefault(defaultValue, initiallyEmpty));
  const schema = type[0];
  const $arrayHandler = arrayHandler;
  const Button = (0, _utils.getSkinComponent)(skin.arrayButton);
  const AddGlyph = (0, _utils.getSkinComponent)(skin.addGlyph);
  const RemoveGlyph = (0, _utils.getSkinComponent)(skin.removeGlyph);
  const Panel = (0, _utils.getSkinComponent)(skin.panel);
  const Div = (0, _utils.getSkinComponent)(skin.div);
  const Text = (0, _utils.getSkinComponent)(skin.text);
  const aliveItems = items.keys.filter(idx => idx !== null);
  const counterField = skinElement.nameForErrors(name);

  const getErrorMessage = num => {
    if ('minChildren' in fieldSchema) {
      const {
        minChildren
      } = fieldSchema;
      if (num < minChildren) return (0, _translation_utils.tr)('error.minChildren', {
        minChildren
      });
    }

    if ('maxChildren' in fieldSchema) {
      const {
        maxChildren
      } = fieldSchema;
      if (num > maxChildren) return (0, _translation_utils.tr)('error.maxChildren', {
        maxChildren
      });
    }
  };

  const checkSetErrorMessage = num => {
    const message = getErrorMessage(num);

    if (message) {
      formHook.setError(counterField, {
        type: 'manual',
        message
      });
    } else {
      formHook.clearErrors(counterField);
    }
  };

  const handleAdd = () => {
    dispatch(_ducks.inputArray.add());
    checkSetErrorMessage(items.num + 1);
  };

  const itemsInputs = aliveItems.map(idx => {
    const handleRemove = removeIdx => {
      dispatch(_ducks.inputArray.remove(removeIdx));
      checkSetErrorMessage(items.num - 1);
      const taint = `${name}.${removeIdx}.${_deletedMark.deletedMark}`;
      setValue(taint, true);
      const fieldNames = schema.getFieldNames();
      fieldNames.forEach(fieldName => {
        const toUnregister = (0, _utils.inputName)({
          parent: name,
          index: removeIdx,
          field: fieldName
        });
        unregister(toUnregister);
      });
    };

    const closeButton = renderCloseButton({
      onRemove: handleRemove,
      idx,
      styles,
      Button,
      RemoveGlyph
    });
    let itemDefault;
    if (defaultValue && Array.isArray(defaultValue)) itemDefault = defaultValue[idx];else itemDefault = defaultValue;
    return {
      idx,
      closeButton,
      inputs: (0, _componentRender.renderInputs)(_objectSpread(_objectSpread({}, rest), {}, {
        inline: isTable,
        schema,
        schemaTypeName,
        setValue,
        parent: name,
        index: idx,
        initialValues: itemDefault,
        formHook,
        styles,
        register,
        unregister,
        arrayIdx: idx,
        arrayInitialValues: itemDefault,
        skin,
        arrayControl: {
          items,
          index: idx,
          remove: handleRemove,
          add: handleAdd
        }
      }))
    };
  });
  const panelProps = {
    onAdd: handleAdd,
    schemaTypeName,
    dispatch,
    name,
    styles,
    Button,
    AddGlyph,
    Div,
    Text
  };
  const panelClasses = (0, _classnames.default)({
    [styles.errored]: errorText
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Panel, {
    className: panelClasses,
    header: renderPanelHeader(panelProps),
    styles: styles,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)($arrayHandler, _objectSpread({
      schema: schema,
      config: config,
      name: name,
      errorText: errorText,
      component: arrayHandler,
      onAdd: handleAdd,
      newObject: newObject,
      items: itemsInputs,
      defaultValue: defaultValue,
      schemaTypeName: schemaTypeName,
      styles: styles,
      skin: skin
    }, rest))
  });
};

exports.InputArrayWrap = InputArrayWrap;