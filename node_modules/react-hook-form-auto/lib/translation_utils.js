"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addLanguageTranslations = addLanguageTranslations;
Object.defineProperty(exports, "setLanguage", {
  enumerable: true,
  get: function () {
    return _translate.setLanguage;
  }
});
exports.setLanguageByName = setLanguageByName;
Object.defineProperty(exports, "tr", {
  enumerable: true,
  get: function () {
    return _translate.tr;
  }
});
exports.trError = trError;
exports.trField = trField;
exports.trModel = trModel;
exports.trPath = trPath;
exports.trPathSetBase = trPathSetBase;

var _translations = require("./translations");

var _utils = require("./utils.js");

var _translate = require("./translate");

const defLangs = {
  en: _translations.en,
  es: _translations.es
};
let modelBasePath = 'models';
/**
 * Loads a language from the languages table.
 *
 * @param {string} name Language code as in `'en'` or `'fr'`.
 */

function setLanguageByName(name) {
  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);
}
/**
 * Allows to add a bunch of strings to a language
 */


function addLanguageTranslations(lang, strings) {
  defLangs[lang] = (0, _utils.deepmerge)(defLangs[lang], strings);
}
/**
 * Multipurpose semantic-ish translation.
 *
 * @param {string} modelName Object name, usually what
 *    you pass as the first parameter when you create
 *    the schema.
 * @param {string} field Field name
 * @param {string} op Thing that varies based on
 *    the type.
 */


function trModel(modelName, field, op) {
  return (0, _translate.tr)(trPath(modelName, field, op));
}
/**
 * Translate field name
 *
 * @param {string|object} modelName Object name, usually what
 *    you pass as the first parameter when you create
 *    the schema. It can also be an object with component
 *    props so it will figure out the values
 * @param {string} field Field name
 */


function trField(modelName, field) {
  if (typeof modelName == 'object') {
    field = modelName.field;
    modelName = modelName.schemaTypeName;
  }

  return (0, _translate.tr)(trPath(modelName, field, '_field'));
}
/**
 * Translates error message.
 *
 * @param {string} error Code of the error (usually the
 *    validation code-name)
 * @param {object} data Field configuration from `createSchema()`.
 */


function trError(error, data) {
  return (0, _translate.tr)(`error.${error}`, data);
}
/**
 * Generates a model translation path.
 *
 * @param {string} model Name of the model (ie: 'client')
 * @param {string} field Name of the field
 * @param {string} op Name of the option or any subthing.
 *
 * @returns {string} id for the translation string
 */


function trPath(model, field, op) {
  if (typeof op == 'undefined') return [modelBasePath, model, field].join('.');else return [modelBasePath, model, field, op].join('.');
}
/**
 * Sets the base for the semantich(ish) translation, so
 * instead of 'models.<model>.<field>' can be
 * 'my.base.<model>.<field>'
 *
 * @param {string} newBasePath New path prepended to all
 *    string paths.
 */


function trPathSetBase(newBasePath) {
  modelBasePath = newBasePath;
}