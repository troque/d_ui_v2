{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCoercers = createCoercers;\nvar _utils = require(\"./utils\");\nfunction createCoercers(_ref) {\n  let {\n    initialValues,\n    stateRef,\n    skin,\n    notify,\n    schema\n  } = _ref;\n  return function coercedSubmit(doc) {\n    const coerceObject = _ref2 => {\n      let {\n        object,\n        schemaDef\n      } = _ref2;\n      const fields = Object.keys(schemaDef);\n      const result = (0, _utils.deepmerge)({}, object);\n      fields.forEach(fieldName => {\n        const fieldSchema = schemaDef[fieldName];\n        const {\n          type\n        } = fieldSchema;\n        const typeKey = (0, _utils.schemaTypeEx)(type);\n        const {\n          coerce\n        } = fieldSchema.coerce ? fieldSchema : skin[typeKey];\n        const value = object[fieldName];\n        if (coerce) {\n          result[fieldName] = coerce(value, {\n            coerceObject,\n            schemaDef,\n            fieldName\n          });\n        }\n      });\n      return result;\n    };\n    const coerceWithSchema = _ref3 => {\n      let {\n        doc,\n        schema\n      } = _ref3;\n      const schemaDef = schema.getSchema();\n      return coerceObject({\n        object: doc,\n        schemaDef\n      });\n    };\n    const fields = Object.keys(stateRef.current.fields);\n    const values = fields.reduce((values, field) => {\n      const state = stateRef.current.fields[field];\n      if (state.visible) {\n        const [container, attr] = (0, _utils.objectTraverse)(values, field, {\n          createIfMissing: true\n        });\n        const [docContainer] = (0, _utils.objectTraverse)(doc, field);\n        if (container && attr) {\n          if (state.changed) container[attr] = state.value;else if (docContainer) container[attr] = docContainer[attr];\n        }\n      }\n      return values;\n    }, {});\n    const wholeObj = (0, _utils.deepmerge)({}, initialValues, values);\n    const coerced = coerceWithSchema({\n      doc: wholeObj,\n      schema\n    });\n    notify(coerced, doc);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createCoercers","_utils","require","initialValues","stateRef","skin","notify","schema","coercedSubmit","doc","coerceObject","object","schemaDef","fields","keys","result","deepmerge","forEach","fieldName","fieldSchema","type","typeKey","schemaTypeEx","coerce","coerceWithSchema","getSchema","current","values","reduce","field","state","visible","container","attr","objectTraverse","createIfMissing","docContainer","changed","wholeObj","coerced"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/coercing.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCoercers = createCoercers;\n\nvar _utils = require(\"./utils\");\n\nfunction createCoercers({\n  initialValues,\n  stateRef,\n  skin,\n  notify,\n  schema\n}) {\n  return function coercedSubmit(doc) {\n    const coerceObject = ({\n      object,\n      schemaDef\n    }) => {\n      const fields = Object.keys(schemaDef);\n      const result = (0, _utils.deepmerge)({}, object);\n      fields.forEach(fieldName => {\n        const fieldSchema = schemaDef[fieldName];\n        const {\n          type\n        } = fieldSchema;\n        const typeKey = (0, _utils.schemaTypeEx)(type);\n        const {\n          coerce\n        } = fieldSchema.coerce ? fieldSchema : skin[typeKey];\n        const value = object[fieldName];\n\n        if (coerce) {\n          result[fieldName] = coerce(value, {\n            coerceObject,\n            schemaDef,\n            fieldName\n          });\n        }\n      });\n      return result;\n    };\n\n    const coerceWithSchema = ({\n      doc,\n      schema\n    }) => {\n      const schemaDef = schema.getSchema();\n      return coerceObject({\n        object: doc,\n        schemaDef\n      });\n    };\n\n    const fields = Object.keys(stateRef.current.fields);\n    const values = fields.reduce((values, field) => {\n      const state = stateRef.current.fields[field];\n\n      if (state.visible) {\n        const [container, attr] = (0, _utils.objectTraverse)(values, field, {\n          createIfMissing: true\n        });\n        const [docContainer] = (0, _utils.objectTraverse)(doc, field);\n\n        if (container && attr) {\n          if (state.changed) container[attr] = state.value;else if (docContainer) container[attr] = docContainer[attr];\n        }\n      }\n\n      return values;\n    }, {});\n    const wholeObj = (0, _utils.deepmerge)({}, initialValues, values);\n    const coerced = coerceWithSchema({\n      doc: wholeObj,\n      schema\n    });\n    notify(coerced, doc);\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}