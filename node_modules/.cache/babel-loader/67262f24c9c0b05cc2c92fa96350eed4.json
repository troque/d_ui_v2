{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\ClasificacionRadicado\\\\ClasificacionRadicado.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport 'react-datetime/css/react-datetime.css';\nimport 'moment/locale/es';\nimport { getUser } from '../../../components/Utils/Common';\nimport { useLocation } from 'react-router-dom';\nimport DatePerson from \"../../DatePerson/DatePerson\";\nimport '../../Utils/Constants';\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\nimport GenericApi from '../../Api/Services/GenericApi';\nimport Spinner from '../../Utils/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ClasificacionRadicado(props) {\n  _s();\n  const [getModalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [listaTipoExpediente, setListaTipoExpediente] = useState({\n    data: {}\n  });\n  const [respuestaTipoExpediente, setRespuestaTipoExpediente] = useState(false);\n  const [selectedTipoExpediente, setSelectedTipoExpediente] = useState(\"\");\n  const [countTextArea, setCountTextArea] = useState(0);\n  const [getMaximoTextArea, setMaximoTextArea] = useState(0);\n  const [getMinimoTextArea, setMinimoTextArea] = useState(0);\n  const [listaTipoDerechoPeticion, setListaDerechoPeticion] = useState({\n    data: {}\n  });\n  const [selectedTipoDerechoPeticion, setSelectedDerechoPeticion] = useState(\"\");\n  const [respuestaTipoDerechoPeticion, setRespuestaDerechoPeticion] = useState(false);\n  const [listaTerminosRespuesta, setListaTerminosRespuesta] = useState({\n    data: {}\n  });\n  const [selectedTerminosRespuesta, setSelectedTerminosRespuesta] = useState(\"\");\n  const [respuestaTerminosRespuesta, setRespuestaTerminosRespuesta] = useState(false);\n  const [listaTiposQueja, setListaTiposQueja] = useState({\n    data: {}\n  });\n  const [respuestaTiposQueja, setRespuestaTiposQueja] = useState(false);\n  const [fechaTermino, setFechaTermino] = useState(null);\n  const [resultDiasNoLaborales, setResultDiasNoLaborales] = useState([]);\n  const [getNombreUsuario, setNombreUsuario] = useState(\"\");\n  const [getAnosAtrasInvalidos, setAnosAtrasInvalidos] = useState(0);\n  const [getMensajeAlerta, setMensajeAlerta] = useState(\"\");\n  const [getNombreProceso, setNombreProceso] = useState('');\n  const [getHorasTermino, setHorasTermino] = useState('');\n  const [getObservaciones, setObservaciones] = useState('');\n  const [getRepuestaObservaciones, setRepuestaObservaciones] = useState(false);\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n\n  /**\r\n   * Funcion principal\r\n   */\n  useEffect(() => {\n    async function fetchData() {\n      setNombreUsuario(getUser().nombre);\n      getApiTipoExpediente();\n      nombreProceso();\n    }\n    fetchData();\n  }, []);\n  const getApiTipoExpediente = () => {\n    window.showSpinner(true);\n    GenericApi.getGeneric(\"proceso-disciplinario/tipo-expdiente/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setListaTipoExpediente(datos);\n        setRespuestaTipoExpediente(true);\n        getApiTipoDerechoPeticion();\n      } else {\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const getApiTipoDerechoPeticion = () => {\n    GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setListaDerechoPeticion(datos);\n        setRespuestaDerechoPeticion(true);\n        getApiTerminosRespuesta();\n      } else {\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const getApiTerminosRespuesta = () => {\n    GenericApi.getGeneric(\"lista-terminos-respuesta/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setListaTerminosRespuesta(datos);\n        setRespuestaTerminosRespuesta(true);\n        getApiTipoQueja();\n      } else {\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const getApiTipoQueja = () => {\n    GenericApi.getGeneric(\"lista-tipo-queja/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setListaTiposQueja(datos);\n        setRespuestaTiposQueja(true);\n        getApiDiasNoLaborales();\n      } else {\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const getApiDiasNoLaborales = () => {\n    GenericApi.getGeneric(\"dias-no-laborales?estado=1\").then(datos => {\n      if (!datos.error) {\n        var data = [];\n        for (var i in datos.data) {\n          var date = datos.data[i][\"attributes\"][\"fecha\"].split(' ')[0];\n          var result = new Date(date);\n          result.setDate(result.getDate() + 1);\n          data.push(i, date);\n        }\n        setResultDiasNoLaborales(data);\n        obtenerParametros();\n      } else {\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoForm',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n\n  /**\r\n   * Funcion que obtiene información de las parámetricas.\r\n   * Ejm: número máximo y mínimo de caracteres \r\n   */\n  const obtenerParametros = () => {\n    try {\n      const data = {\n        \"data\": {\n          \"type\": 'mas_parametro',\n          \"attributes\": {\n            \"nombre\": \"limite_años_calendario|minimo_caracteres_textarea|maximo_caracteres_textarea\"\n          }\n        }\n      };\n\n      //buscamos el parametro\n      GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(datos => {\n        if (!datos.error) {\n          if (datos[\"data\"].length > 0) {\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('limite_años_calendario')).map(filteredName => setAnosAtrasInvalidos(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]));\n          }\n          window.showSpinner(false);\n        } else {\n          window.showSpinner(false);\n          setModalState({\n            title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/ClasificacionRadicadoForm',\n            from: {\n              from\n            },\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n      window.showSpinner(false);\n    }\n  };\n  const nombreProceso = () => {\n    GenericApi.getByIdGeneric(\"nombre-proceso\", procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setNombreProceso(datos.data.attributes.nombre);\n      }\n    });\n  };\n  let selectChangeTipoExpediente = e => {\n    setCountTextArea(0);\n    setSelectedTipoExpediente(e);\n  };\n  let selectChangeTipoDerechoPeticion = (tipo_expediente, e) => {\n    setCountTextArea(0);\n    setSelectedDerechoPeticion(e);\n\n    // Se valida que el valor sea diferente de null\n    if (e != \"\") {\n      // Se consume la api del mensaje\n      getApiMasTipoMensajesExpedientes(tipo_expediente, e);\n    }\n  };\n  let selectChangeTerminoRespuesta = e => {\n    setSelectedTerminosRespuesta(e);\n  };\n  const selectTipoExpediente = () => {\n    return listaTipoExpediente.data.map((expediente, i) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: expediente.id,\n        children: expediente.attributes.nombre\n      }, expediente.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this);\n    });\n  };\n  const selectTipoDerechoPeticion = () => {\n    return listaTipoDerechoPeticion.data.map((derecho_peticion, i) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: derecho_peticion.id,\n        children: derecho_peticion.attributes.nombre\n      }, derecho_peticion.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }, this);\n    });\n  };\n  const selectTerminosRespuesta = () => {\n    return listaTerminosRespuesta.data.map((termino_respuesta, i) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: termino_respuesta.id,\n        children: termino_respuesta.attributes.nombre\n      }, termino_respuesta.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this);\n    });\n  };\n  const selectTiposQueja = () => {\n    return listaTiposQueja.data.map((tipo_queja, i) => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: tipo_queja.id,\n        children: tipo_queja.attributes.nombre\n      }, tipo_queja.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 21\n      }, this);\n    });\n  };\n  const enviarDatos = datos => {\n    // Se usa el cargando\n    window.showSpinner(true);\n\n    // Se inicializa la variable\n    let data;\n\n    // Se redeclara la data a enviar\n    data = {\n      \"data\": {\n        \"type\": \"clasificacion_radicado\",\n        \"attributes\": {\n          \"id_proceso_disciplinario\": props.getParametros.id_proceso_disciplinario,\n          \"id_etapa\": props.getParametros.id_etapa,\n          \"id_tipo_expediente\": selectedTipoExpediente,\n          \"observaciones\": getObservaciones != null ? getObservaciones : null,\n          \"id_tipo_queja\": datos.tipo_queja,\n          \"id_termino_respuesta\": selectedTerminosRespuesta,\n          \"fecha_termino\": fechaTermino != null ? fechaTermino : null,\n          \"hora_termino\": getHorasTermino != null ? getHorasTermino : null,\n          \"gestion_juridica\": datos.gestion_juridica === 'true' ? true : false,\n          \"estado\": true,\n          \"id_estado_reparto\": 2,\n          \"id_tipo_derecho_peticion\": datos.tipo_derecho_peticion,\n          \"oficina_control_interno\": false,\n          \"created_user\": getNombreUsuario,\n          \"reclasificacion\": props.getParametros.reclasificacion\n        }\n      }\n    };\n\n    // Se consume la API\n    GenericApi.addGeneric(\"clasificacion-radicado\", data).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      // Se quita el cargando\n      window.showSpinner(false);\n      console.log(\"Paso por el cargando\");\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se le da estilo al boton del radicado\n        from.cambiaColorClasificacionRadicado = \"btn btn-sm btn-success w2d_btn-large mr-1 mb-3 text-left\";\n\n        // Se valida que el tipo de clasificacion del from sea igual a el tipo de clasificacion de validar\n        if (props.getParametros.tipo_clasificacion === global.Constants.TIPO_CLASIFICACION.VALIDAR_CLASIFICACION) {\n          // Se valida que nombre del funcionario sea igual al del usuario logeado\n          if (datos.data.attributes.funcionario_actual.name === getNombreUsuario) {\n            // Se setea el mensaje\n            setModalState({\n              title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n              message: \"EL PROCESO DISCIPLINARIO SE ASIGNA A: \" + datos.data.attributes.funcionario_actual.nombre.toUpperCase() + \" \" + datos.data.attributes.funcionario_actual.apellido.toUpperCase(),\n              show: true,\n              redirect: '/RamasProceso',\n              from: {\n                from\n              },\n              alert: global.Constants.TIPO_ALERTA.EXITO\n            });\n          } else {\n            // Se setea el mensaje\n            setModalState({\n              title: getNombreProceso + \" :: RE-CLASIFICACIÓN DEL RADICADO\",\n              message: \"EL PROCESO DISCIPLINARIO SE ASIGNA A: \" + datos.data.attributes.funcionario_actual.nombre.toUpperCase() + \" \" + datos.data.attributes.funcionario_actual.apellido.toUpperCase(),\n              show: true,\n              redirect: '/MisPendientes',\n              from: {\n                from\n              },\n              alert: global.Constants.TIPO_ALERTA.EXITO\n            });\n          }\n        } else if (props.getParametros.tipo_clasificacion === global.Constants.TIPO_CLASIFICACION.CLASIFICACION) {\n          // Se setea el mensaje\n          setModalState({\n            title: getNombreProceso + \" ::  CLASIFICACIÓN DEL RADICADO\",\n            message: global.Constants.MENSAJES_MODAL.EXITOSO,\n            show: true,\n            redirect: '/ClasificacionRadicadoLista',\n            from: {\n              from\n            },\n            alert: global.Constants.TIPO_ALERTA.EXITO\n          });\n        }\n      } else {\n        // Se setea el mensaje\n        setModalState({\n          title: getNombreProceso + \" ::  CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString().toUpperCase(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const handleCallbackFechaTermino = childData => {\n    try {\n      setFechaTermino(childData);\n    } catch (error) {}\n  };\n\n  // COMPOENENTE TIPO EXPEDIENTE\n  const componenteTipoExpediente = tipo_expediente => {\n    // TIPO DE EXPEDIENTE = DERECHO DE PETICION\n    if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ingresoDerechoPeticion\",\n            children: [\"TIPO DE DERECHO DE PETICI\\xD3N\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-danger\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 92\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-control\",\n            id: \"ingresoDerechoPeticion\",\n            name: \"ingresoDerechoPeticion\",\n            value: selectedTipoDerechoPeticion,\n            onChange: e => selectChangeTipoDerechoPeticion(tipo_expediente, e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 29\n            }, this), respuestaTipoDerechoPeticion ? selectTipoDerechoPeticion() : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 21\n        }, this), componenteTipoDerechoPeticion(tipo_expediente, selectedTipoDerechoPeticion)]\n      }, void 0, true);\n    }\n\n    // TIPO DE EXPEDIENTE = PODER REFERENTE A SOLICITUD\n    else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            tipo_queja: global.Constants.TIPO_QUEJA.EXTERNA\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            return errores;\n          },\n          onSubmit: (valores, _ref) => {\n            let {\n              resetForm\n            } = _ref;\n            enviarDatos(valores);\n          },\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content block-content-full text-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-rounded btn-primary\",\n                children: global.Constants.BOTON_NOMBRE.REGISTRAR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/ClasificacionRadicadoLista/`,\n                state: {\n                  from: from\n                },\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-rounded btn-outline-primary\",\n                  children: global.Constants.BOTON_NOMBRE.CANCELAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n\n    // TIPO DE EXPEDIENTE = QUEJA\n    else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.QUEJA) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            tipo_queja: ''\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            if (!valores.tipo_queja) {\n              errores.tipo_queja = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            return errores;\n          },\n          onSubmit: (valores, _ref2) => {\n            let {\n              resetForm\n            } = _ref2;\n            enviarDatos(valores);\n          },\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"tipo_queja\",\n                children: [\"TIPO DE QUEJA\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-danger\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 74\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: \"select\",\n                className: \"form-control\",\n                id: \"tipo_queja\",\n                name: \"tipo_queja\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 37\n                }, this), respuestaTiposQueja ? selectTiposQueja() : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content block-content-full text-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-rounded btn-primary\",\n                children: global.Constants.BOTON_NOMBRE.REGISTRAR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/ClasificacionRadicadoLista/`,\n                state: {\n                  from: from\n                },\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-rounded btn-outline-primary\",\n                  children: global.Constants.BOTON_NOMBRE.CANCELAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n\n    // TIPO DE EXPEDIENTE = TUTELA\n    else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.TUTELA) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"ingresoTipoRtaTutela\",\n          children: [\"T\\xC9RMINO DE RESPUESTA\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-danger\",\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 79\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          id: \"termino_rta\",\n          name: \"termino_rta\",\n          value: selectedTerminosRespuesta,\n          onChange: e => selectChangeTerminoRespuesta(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"{selectedTerminosRespuesta}\",\n            children: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 25\n          }, this), respuestaTerminosRespuesta ? selectTerminosRespuesta() : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this), selectedTerminosRespuesta === global.Constants.TERMINOS_RESPUESTA.DIAS ? componenteTerminosRespuesta(global.Constants.TERMINOS_RESPUESTA.DIAS) : '', selectedTerminosRespuesta === global.Constants.TERMINOS_RESPUESTA.HORAS ? componenteTerminosRespuesta(global.Constants.TERMINOS_RESPUESTA.HORAS) : '']\n      }, void 0, true);\n    }\n  };\n\n  // Metodo encargado de cargar el mensaje por el tipo de expediente\n  const getApiMasTipoMensajesExpedientes = (idTipoExpediente, idSubTipoExpediente) => {\n    // Se inicializa la API\n    GenericApi.getGeneric(\"mas_tipo_expediente_mensajes/\" + idTipoExpediente + \"/\" + idSubTipoExpediente).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se captura la informacion en la posicion 0\n        let data = datos.data[0];\n\n        // Se setea el mensaje \n        setMensajeAlerta(data.attributes.mensaje);\n      } else {\n        // Se setea el modal\n        setModalState({\n          title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoForm',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const changeObservaciones = e => {\n    if (e.target.value === '' || global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && e.target.value.length <= getMaximoTextArea) {\n      setObservaciones(e.target.value);\n      setCountTextArea(e.target.value.length);\n      setRepuestaObservaciones(true);\n    }\n  };\n\n  // COMOPNENTE TIPO DERECHO DE PETICION\n  const componenteTipoDerechoPeticion = (tipoExpediente, tipo_derecho_peticion) => {\n    // TIPO DE EXPDIENTE = DERECHO DE PETICION =  COPIAS\n    if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.COPIAS) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            observaciones: '',\n            gestion_juridica: false,\n            tipo_derecho_peticion: tipo_derecho_peticion\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            setCountTextArea(valores.observaciones.length);\n            if (!valores.observaciones) {\n              errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            if (valores.observaciones.length <= getMinimoTextArea) {\n              errores.observaciones = 'DEBE TENER MÍNIMO ' + getMinimoTextArea + ' CARÁTERES';\n            }\n            if (valores.observaciones.length > getMaximoTextArea) {\n              errores.observaciones = 'DEBE TENER MAXIMO ' + getMinimoTextArea + ' CARÁTERES';\n            }\n            if (valores.observaciones) {\n              if (!global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(valores.observaciones)) {\n                errores.observaciones = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n              }\n            }\n            return errores;\n          },\n          onSubmit: (valores, _ref3) => {\n            let {\n              resetForm\n            } = _ref3;\n            enviarDatos(valores);\n          },\n          children: _ref4 => {\n            let {\n              errors\n            } = _ref4;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alert alert-warning alert-dismissable\",\n                  role: \"alert\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"mb-0\",\n                    children: getMensajeAlerta\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 555,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [\"OBSERVACIONES \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-danger\",\n                      children: \"*\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 558,\n                      columnNumber: 62\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 558,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    as: \"textarea\",\n                    className: \"form-control\",\n                    id: \"observaciones\",\n                    name: \"observaciones\",\n                    rows: \"4\",\n                    placeholder: \"Escriba en este espacio las observaciones\",\n                    maxLength: getMaximoTextArea,\n                    minLength: getMinimoTextArea,\n                    value: getObservaciones,\n                    onChange: changeObservaciones\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-right\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-primary\",\n                      children: [countTextArea, \" / \", getMaximoTextArea]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 563,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 562,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"observaciones\",\n                    component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-danger\",\n                      children: errors.observaciones\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 565,\n                      columnNumber: 94\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 569,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/ClasificacionRadicadoLista/`,\n                  state: {\n                    from: from\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: global.Constants.BOTON_NOMBRE.CANCELAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 568,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n\n    // TIPO DE EXPDIENTE = DERECHO DE PETICION =  GENERAL\n    else if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.GENERAL) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            observaciones: '',\n            gestion_juridica: false,\n            tipo_derecho_peticion: tipo_derecho_peticion\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            setCountTextArea(valores.observaciones.length);\n            if (!valores.observaciones) {\n              errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            } else if (valores.observaciones.length <= getMinimoTextArea) {\n              errores.observaciones = 'DEBE TENER MÍNIMO ' + getMinimoTextArea + ' CARACTERES';\n            }\n            if (valores.observaciones.length > getMaximoTextArea) {\n              errores.observaciones = 'DEBE TENER MAXIMO ' + getMinimoTextArea + ' CARACTERES';\n            }\n            if (valores.observaciones) {\n              if (!global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(valores.observaciones)) {\n                errores.observaciones = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n              }\n            }\n            return errores;\n          },\n          onSubmit: (valores, _ref5) => {\n            let {\n              resetForm\n            } = _ref5;\n            enviarDatos(valores);\n          },\n          children: _ref6 => {\n            let {\n              errors\n            } = _ref6;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alert alert-warning alert-dismissable\",\n                  role: \"alert\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"alert-heading font-size-h4 my-2\",\n                    children: \"ALERTA\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 621,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"mb-0\",\n                    children: getMensajeAlerta\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 622,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 620,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"OBSERVACIONES\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 37\n                }, this), \"  \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-danger\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 67\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  as: \"textarea\",\n                  className: \"form-control\",\n                  id: \"observaciones\",\n                  name: \"observaciones\",\n                  rows: \"4\",\n                  placeholder: \"Escriba en este espacio las observaciones\",\n                  maxLength: getMaximoTextArea,\n                  minLength: getMinimoTextArea,\n                  value: getObservaciones,\n                  onChange: changeObservaciones\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 625,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-right\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-primary\",\n                    children: [countTextArea, \" / \", getMaximoTextArea]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 628,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 627,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"observaciones\",\n                  component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-danger\",\n                    children: errors.observaciones\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 630,\n                    columnNumber: 90\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 630,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"block-content block-content-full text-right\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"btn btn-rounded btn-primary\",\n                    children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 632,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/ClasificacionRadicadoLista/`,\n                    state: {\n                      from: from\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      className: \"btn btn-rounded btn-outline-primary\",\n                      children: global.Constants.BOTON_NOMBRE.CANCELAR\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 634,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 633,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 631,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 639,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/ClasificacionRadicadoLista/`,\n                  state: {\n                    from: from\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: global.Constants.BOTON_NOMBRE.CANCELAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 641,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 640,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 638,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n\n    // TIPO DE EXPDIENTE = DERECHO DE PETICION =  ALERTA CONTROL POLITICO\n    else if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.ALERTA) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            observaciones: '',\n            gestion_juridica: '',\n            tipo_derecho_peticion: tipo_derecho_peticion\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            if (!getObservaciones) {\n              errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            if (countTextArea > getMaximoTextArea) {\n              errores.descripcion = 'DEBE INGRESAR MAXIMO ' + getMaximoTextArea + ' CARACTERES';\n            }\n            if (countTextArea < getMinimoTextArea) {\n              errores.descripcion = 'DEBE INGRESAR MÍNIMO ' + getMinimoTextArea + ' CARACTERES';\n            }\n            if (getRepuestaObservaciones == false) {\n              errores.descripcion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n            }\n            if (!valores.gestion_juridica) {\n              errores.gestion_juridica = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            return errores;\n          },\n          onSubmit: (valores, _ref7) => {\n            let {\n              resetForm\n            } = _ref7;\n            enviarDatos(valores);\n          },\n          children: _ref8 => {\n            let {\n              errors\n            } = _ref8;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"alert alert-warning alert-dismissable\",\n                  role: \"alert\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"mb-0\",\n                    children: getMensajeAlerta\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 692,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"ingresoTipoExpediente\",\n                  children: [\"REQUIERE GESTI\\xD3N JUR\\xCDDICA\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-danger\",\n                    children: \"*\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 694,\n                    columnNumber: 101\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  as: \"select\",\n                  className: \"form-control\",\n                  id: \"gestion_juridica\",\n                  name: \"gestion_juridica\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 696,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"true\",\n                    children: \"SI\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 697,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"false\",\n                    children: \"NO\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 698,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 695,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"OBSERVACIONES\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 37\n                }, this), \"  \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-danger\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 67\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  as: \"textarea\",\n                  className: \"form-control\",\n                  id: \"observaciones\",\n                  name: \"observaciones\",\n                  rows: \"4\",\n                  placeholder: \"Escriba en este espacio las observaciones\",\n                  maxLength: getMaximoTextArea,\n                  minLength: getMinimoTextArea,\n                  value: getObservaciones,\n                  onChange: changeObservaciones\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-right\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-primary\",\n                    children: [countTextArea, \" / \", getMaximoTextArea]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 705,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"observaciones\",\n                  component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-danger\",\n                    children: errors.observaciones\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 707,\n                    columnNumber: 90\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 707,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"block-content block-content-full text-right\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"btn btn-rounded btn-primary\",\n                    children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 709,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/ClasificacionRadicadoLista/`,\n                    state: {\n                      from: from\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      className: \"btn btn-rounded btn-outline-primary\",\n                      children: global.Constants.BOTON_NOMBRE.CANCELAR\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 711,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 710,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 708,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n  };\n  const changeHorasTermino = e => {\n    if (e.target.value === '' || global.Constants.CARACTERES_ESPECIALES.formatOnlyNumbers.test(e.target.value)) {\n      setHorasTermino(e.target.value);\n    }\n  };\n\n  // COMPONENTE TERMINOS DE RESPUESTA -- TIPO EXPEDIENTE TUTELA\n  const componenteTerminosRespuesta = termino_respuesta => {\n    // TERMINO TUTELA = DIAS      \n    if (termino_respuesta === global.Constants.TERMINOS_RESPUESTA.DIAS) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            termino_rta: termino_respuesta,\n            horasTermino: null,\n            fechaTermino: fechaTermino\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errors = {};\n            if (!valores.fechaTermino && !fechaTermino) {\n              errors.fechaTermino = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            if (valores.fechaTermino) {\n              if (!global.Constants.CARACTERES_ESPECIALES.formatDateYMDWithGuiones.test(valores.fechaTermino)) {\n                errors.fechaTermino = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n              }\n            }\n            return errors;\n          },\n          onSubmit: (valores, _ref9) => {\n            let {\n              resetForm\n            } = _ref9;\n            enviarDatos(valores);\n          },\n          children: _ref10 => {\n            let {\n              errors\n            } = _ref10;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mt-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"FECHA PARA T\\xC9RMINO\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 764,\n                  columnNumber: 33\n                }, this), \"  \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-danger\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 764,\n                  columnNumber: 68\n                }, this), /*#__PURE__*/_jsxDEV(DatePerson, {\n                  resultDiasNoLaborales: resultDiasNoLaborales,\n                  getAnosAtrasInvalidos: getAnosAtrasInvalidos,\n                  parentCallback: handleCallbackFechaTermino,\n                  id: \"fechaTermino\",\n                  name: \"fechaTermino\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 766,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"fechaTermino\",\n                  component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-danger\",\n                    children: errors.fechaTermino\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 767,\n                    columnNumber: 85\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 767,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/ClasificacionRadicadoLista/`,\n                  state: {\n                    from: from\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: global.Constants.BOTON_NOMBRE.CANCELAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 772,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 771,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 769,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 25\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n\n    // TERMINO TUTELA = HORAS     \n    else if (termino_respuesta === global.Constants.TERMINOS_RESPUESTA.HORAS) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            termino_rta: termino_respuesta,\n            horasTermino: '',\n            fechaTermino: new Date()\n          },\n          enableReinitialize: true,\n          validate: valores => {\n            let errores = {};\n            if (!getHorasTermino) {\n              errores.horasTermino = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n            }\n            if (getHorasTermino > 23) {\n              errores.horasTermino = 'EL MAXIMO DE HORAS ES DE 23';\n            }\n            return errores;\n          },\n          onSubmit: (valores, _ref11) => {\n            let {\n              resetForm\n            } = _ref11;\n            enviarDatos(valores);\n          },\n          children: _ref12 => {\n            let {\n              errors\n            } = _ref12;\n            return /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mt-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"HORAS PARA T\\xC9RMINO\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 37\n                }, this), \"  \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-danger\",\n                  children: \"*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 72\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  type: \"number\",\n                  min: \"1\",\n                  max: \"23\",\n                  id: \"horasTermino\",\n                  name: \"horasTermino\",\n                  className: \"form-control\",\n                  placeholder: \"\",\n                  value: getHorasTermino,\n                  onChange: changeHorasTermino\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 813,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"horasTermino\",\n                  component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-danger\",\n                    children: errors.horasTermino\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 814,\n                    columnNumber: 89\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 814,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 811,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 817,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/ClasificacionRadicadoLista/`,\n                  state: {\n                    from: from\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: global.Constants.BOTON_NOMBRE.CANCELAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 819,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 810,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 21\n        }, this)\n      }, void 0, false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: getModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"block-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"ingresoTipoExpediente\",\n              children: [\"TIPO DE EXPEDIENTE\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-danger\",\n                children: \"*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 86\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 840,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              id: \"ingresoTipoExpediente\",\n              name: \"ingresoTipoExpediente\",\n              value: selectedTipoExpediente,\n              onChange: e => selectChangeTipoExpediente(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 33\n              }, this), respuestaTipoExpediente ? selectTipoExpediente() : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 17\n      }, this), selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) : '', selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE) : '', selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.QUEJA ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.QUEJA) : '', selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.TUTELA ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.TUTELA) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ClasificacionRadicado, \"FTfr/akXWqvnlKvwrl3EL4Efesg=\", false, function () {\n  return [useLocation];\n});\n_c = ClasificacionRadicado;\nexport default ClasificacionRadicado;\nvar _c;\n$RefreshReg$(_c, \"ClasificacionRadicado\");","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Link","getUser","useLocation","DatePerson","ModalGen","GenericApi","Spinner","ClasificacionRadicado","props","getModalState","setModalState","title","message","show","listaTipoExpediente","setListaTipoExpediente","data","respuestaTipoExpediente","setRespuestaTipoExpediente","selectedTipoExpediente","setSelectedTipoExpediente","countTextArea","setCountTextArea","getMaximoTextArea","setMaximoTextArea","getMinimoTextArea","setMinimoTextArea","listaTipoDerechoPeticion","setListaDerechoPeticion","selectedTipoDerechoPeticion","setSelectedDerechoPeticion","respuestaTipoDerechoPeticion","setRespuestaDerechoPeticion","listaTerminosRespuesta","setListaTerminosRespuesta","selectedTerminosRespuesta","setSelectedTerminosRespuesta","respuestaTerminosRespuesta","setRespuestaTerminosRespuesta","listaTiposQueja","setListaTiposQueja","respuestaTiposQueja","setRespuestaTiposQueja","fechaTermino","setFechaTermino","resultDiasNoLaborales","setResultDiasNoLaborales","getNombreUsuario","setNombreUsuario","getAnosAtrasInvalidos","setAnosAtrasInvalidos","getMensajeAlerta","setMensajeAlerta","getNombreProceso","setNombreProceso","getHorasTermino","setHorasTermino","getObservaciones","setObservaciones","getRepuestaObservaciones","setRepuestaObservaciones","location","from","state","procesoDisciplinarioId","fetchData","nombre","getApiTipoExpediente","nombreProceso","window","showSpinner","getGeneric","then","datos","error","getApiTipoDerechoPeticion","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","getApiTerminosRespuesta","getApiTipoQueja","getApiDiasNoLaborales","i","date","split","result","Date","setDate","getDate","push","obtenerParametros","getByDataGeneric","length","filter","includes","map","filteredName","getByIdGeneric","attributes","selectChangeTipoExpediente","e","selectChangeTipoDerechoPeticion","tipo_expediente","getApiMasTipoMensajesExpedientes","selectChangeTerminoRespuesta","selectTipoExpediente","expediente","id","selectTipoDerechoPeticion","derecho_peticion","selectTerminosRespuesta","termino_respuesta","selectTiposQueja","tipo_queja","enviarDatos","getParametros","id_proceso_disciplinario","id_etapa","gestion_juridica","tipo_derecho_peticion","reclasificacion","addGeneric","console","log","cambiaColorClasificacionRadicado","tipo_clasificacion","TIPO_CLASIFICACION","VALIDAR_CLASIFICACION","funcionario_actual","name","toUpperCase","apellido","EXITO","CLASIFICACION","MENSAJES_MODAL","EXITOSO","handleCallbackFechaTermino","childData","componenteTipoExpediente","TIPOS_EXPEDIENTES","DERECHO_PETICION","target","value","MENSAJE_INFORMATIVO","SELECCIONE_UNA_OPCION","componenteTipoDerechoPeticion","PODER_REFERENTE","TIPO_QUEJA","EXTERNA","valores","errores","resetForm","BOTON_NOMBRE","REGISTRAR","CANCELAR","QUEJA","MENSAJE_ERROR","CAMPO_OBLIGATORIO","TUTELA","TERMINOS_RESPUESTA","DIAS","componenteTerminosRespuesta","HORAS","idTipoExpediente","idSubTipoExpediente","mensaje","changeObservaciones","CARACTERES_ESPECIALES","formatOnlyLettersWhitAccent","test","tipoExpediente","DERECHOS_PETICION","COPIAS","observaciones","ERROR_FORMATO_CARACTERES_INVALIDOS","errors","GENERAL","ALERTA","descripcion","changeHorasTermino","formatOnlyNumbers","termino_rta","horasTermino","formatDateYMDWithGuiones"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/ClasificacionRadicado/ClasificacionRadicado.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Link } from \"react-router-dom\";\r\nimport 'react-datetime/css/react-datetime.css';\r\nimport 'moment/locale/es';\r\nimport { getUser } from '../../../components/Utils/Common';\r\nimport { useLocation } from 'react-router-dom'\r\nimport DatePerson from \"../../DatePerson/DatePerson\";\r\nimport '../../Utils/Constants';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport Spinner from '../../Utils/Spinner';\r\n\r\nfunction ClasificacionRadicado(props) {\r\n\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n\r\n    const [listaTipoExpediente, setListaTipoExpediente] = useState({ data: {} });\r\n\r\n    const [respuestaTipoExpediente, setRespuestaTipoExpediente] = useState(false);\r\n    const [selectedTipoExpediente, setSelectedTipoExpediente] = useState(\"\");\r\n\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n\r\n    const [listaTipoDerechoPeticion, setListaDerechoPeticion] = useState({ data: {} });\r\n    const [selectedTipoDerechoPeticion, setSelectedDerechoPeticion] = useState(\"\");\r\n    const [respuestaTipoDerechoPeticion, setRespuestaDerechoPeticion] = useState(false);\r\n\r\n    const [listaTerminosRespuesta, setListaTerminosRespuesta] = useState({ data: {} });\r\n    const [selectedTerminosRespuesta, setSelectedTerminosRespuesta] = useState(\"\");\r\n    const [respuestaTerminosRespuesta, setRespuestaTerminosRespuesta] = useState(false);\r\n\r\n    const [listaTiposQueja, setListaTiposQueja] = useState({ data: {} });\r\n    const [respuestaTiposQueja, setRespuestaTiposQueja] = useState(false);\r\n\r\n    const [fechaTermino, setFechaTermino] = useState(null);\r\n    const [resultDiasNoLaborales, setResultDiasNoLaborales] = useState([]);\r\n\r\n    const [getNombreUsuario, setNombreUsuario] = useState(\"\");\r\n    const [getAnosAtrasInvalidos, setAnosAtrasInvalidos] = useState(0);\r\n\r\n    const [getMensajeAlerta, setMensajeAlerta] = useState(\"\");\r\n\r\n    const [getNombreProceso, setNombreProceso] = useState('');\r\n    const [getHorasTermino, setHorasTermino] = useState('');\r\n    const [getObservaciones, setObservaciones] = useState('');\r\n    const [getRepuestaObservaciones, setRepuestaObservaciones] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n\r\n    /**\r\n     * Funcion principal\r\n     */\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setNombreUsuario(getUser().nombre);\r\n            getApiTipoExpediente();\r\n            nombreProceso();\r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    const getApiTipoExpediente = () => {\r\n        window.showSpinner(true);\r\n        GenericApi.getGeneric(\"proceso-disciplinario/tipo-expdiente/\" + procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setListaTipoExpediente(datos);\r\n                    setRespuestaTipoExpediente(true);\r\n                    getApiTipoDerechoPeticion();\r\n                }\r\n                else {\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const getApiTipoDerechoPeticion = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setListaDerechoPeticion(datos);\r\n                    setRespuestaDerechoPeticion(true);\r\n                    getApiTerminosRespuesta();\r\n                }\r\n                else {\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const getApiTerminosRespuesta = () => {\r\n        GenericApi.getGeneric(\"lista-terminos-respuesta/\" + procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setListaTerminosRespuesta(datos);\r\n                    setRespuestaTerminosRespuesta(true);\r\n                    getApiTipoQueja();\r\n                }\r\n                else {\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const getApiTipoQueja = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-queja/\" + procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setListaTiposQueja(datos);\r\n                    setRespuestaTiposQueja(true);\r\n                    getApiDiasNoLaborales();\r\n                }\r\n                else {\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const getApiDiasNoLaborales = () => {\r\n        GenericApi.getGeneric(\"dias-no-laborales?estado=1\").then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    var data = [];\r\n                    for (var i in datos.data) {\r\n                        var date = datos.data[i][\"attributes\"][\"fecha\"].split(' ')[0];\r\n                        var result = new Date(date);\r\n                        result.setDate(result.getDate() + 1);\r\n                        data.push(i, date);\r\n                    }\r\n\r\n                    setResultDiasNoLaborales(data);\r\n                    obtenerParametros();\r\n                } else {\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoForm', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Funcion que obtiene información de las parámetricas.\r\n     * Ejm: número máximo y mínimo de caracteres \r\n     */\r\n    const obtenerParametros = () => {\r\n        try {\r\n\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"limite_años_calendario|minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            //buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n\r\n                    if (!datos.error) {\r\n\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('limite_años_calendario')).map(filteredName => (\r\n                                setAnosAtrasInvalidos(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                        window.showSpinner(false);\r\n                    } else {\r\n                        window.showSpinner(false);\r\n                        setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoForm', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                    \r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n            window.showSpinner(false);\r\n        }\r\n    }\r\n\r\n    const nombreProceso = () => {\r\n        GenericApi.getByIdGeneric(\"nombre-proceso\", procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setNombreProceso(datos.data.attributes.nombre)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    let selectChangeTipoExpediente = (e) => {\r\n        setCountTextArea(0)\r\n        setSelectedTipoExpediente(e);\r\n    }\r\n\r\n    let selectChangeTipoDerechoPeticion = (tipo_expediente, e) => {\r\n        setCountTextArea(0)\r\n        setSelectedDerechoPeticion(e);\r\n\r\n        // Se valida que el valor sea diferente de null\r\n        if (e != \"\") {\r\n\r\n            // Se consume la api del mensaje\r\n            getApiMasTipoMensajesExpedientes(tipo_expediente, e);\r\n        }\r\n    }\r\n\r\n    let selectChangeTerminoRespuesta = (e) => {\r\n        setSelectedTerminosRespuesta(e);\r\n    }\r\n\r\n    const selectTipoExpediente = () => {\r\n        return (\r\n            listaTipoExpediente.data.map((expediente, i) => {\r\n                return (\r\n                    <option key={expediente.id} value={expediente.id}>{expediente.attributes.nombre}</option>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const selectTipoDerechoPeticion = () => {\r\n        return (\r\n            listaTipoDerechoPeticion.data.map((derecho_peticion, i) => {\r\n\r\n                return (\r\n                    <option key={derecho_peticion.id} value={derecho_peticion.id}>{derecho_peticion.attributes.nombre}</option>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const selectTerminosRespuesta = () => {\r\n        return (\r\n            listaTerminosRespuesta.data.map((termino_respuesta, i) => {\r\n                return (\r\n                    <option key={termino_respuesta.id} value={termino_respuesta.id}>{termino_respuesta.attributes.nombre}</option>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const selectTiposQueja = () => {\r\n        return (\r\n            listaTiposQueja.data.map((tipo_queja, i) => {\r\n                return (\r\n                    <option key={tipo_queja.id} value={tipo_queja.id}>{tipo_queja.attributes.nombre}</option>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    const enviarDatos = (datos) => {\r\n\r\n        // Se usa el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la variable\r\n        let data;\r\n\r\n        // Se redeclara la data a enviar\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"clasificacion_radicado\",\r\n                \"attributes\": {\r\n                    \"id_proceso_disciplinario\": props.getParametros.id_proceso_disciplinario,\r\n                    \"id_etapa\": props.getParametros.id_etapa,\r\n                    \"id_tipo_expediente\": selectedTipoExpediente,\r\n                    \"observaciones\": (getObservaciones != null ? getObservaciones : null),\r\n                    \"id_tipo_queja\": datos.tipo_queja,\r\n                    \"id_termino_respuesta\": selectedTerminosRespuesta,\r\n                    \"fecha_termino\": (fechaTermino != null ? fechaTermino : null),\r\n                    \"hora_termino\": (getHorasTermino != null ? getHorasTermino : null),\r\n                    \"gestion_juridica\": (datos.gestion_juridica === 'true' ? true : false),\r\n                    \"estado\": true,\r\n                    \"id_estado_reparto\": 2,\r\n                    \"id_tipo_derecho_peticion\": datos.tipo_derecho_peticion,\r\n                    \"oficina_control_interno\": false,\r\n                    \"created_user\": getNombreUsuario,\r\n                    \"reclasificacion\": props.getParametros.reclasificacion,\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se consume la API\r\n        GenericApi.addGeneric(\"clasificacion-radicado\", data).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se quita el cargando\r\n                window.showSpinner(false);\r\n\r\n                console.log(\"Paso por el cargando\");\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se le da estilo al boton del radicado\r\n                    from.cambiaColorClasificacionRadicado = \"btn btn-sm btn-success w2d_btn-large mr-1 mb-3 text-left\";\r\n\r\n                    // Se valida que el tipo de clasificacion del from sea igual a el tipo de clasificacion de validar\r\n                    if (props.getParametros.tipo_clasificacion === global.Constants.TIPO_CLASIFICACION.VALIDAR_CLASIFICACION) {\r\n\r\n                        // Se valida que nombre del funcionario sea igual al del usuario logeado\r\n                        if (datos.data.attributes.funcionario_actual.name === getNombreUsuario) {\r\n\r\n                            // Se setea el mensaje\r\n                            setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: \"EL PROCESO DISCIPLINARIO SE ASIGNA A: \" + datos.data.attributes.funcionario_actual.nombre.toUpperCase() + \" \" + datos.data.attributes.funcionario_actual.apellido.toUpperCase(), show: true, redirect: '/RamasProceso', from: { from }, alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                        } else {\r\n\r\n                            // Se setea el mensaje\r\n                            setModalState({ title: getNombreProceso + \" :: RE-CLASIFICACIÓN DEL RADICADO\", message: \"EL PROCESO DISCIPLINARIO SE ASIGNA A: \" + datos.data.attributes.funcionario_actual.nombre.toUpperCase() + \" \" + datos.data.attributes.funcionario_actual.apellido.toUpperCase(), show: true, redirect: '/MisPendientes', from: { from }, alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                        }\r\n                    } else if (props.getParametros.tipo_clasificacion === global.Constants.TIPO_CLASIFICACION.CLASIFICACION) {\r\n\r\n                        // Se setea el mensaje\r\n                        setModalState({ title: getNombreProceso + \" ::  CLASIFICACIÓN DEL RADICADO\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                    }\r\n                } else {\r\n\r\n                    // Se setea el mensaje\r\n                    setModalState({ title: getNombreProceso + \" ::  CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString().toUpperCase(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleCallbackFechaTermino = (childData) => {\r\n        try {\r\n            setFechaTermino(childData)\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    // COMPOENENTE TIPO EXPEDIENTE\r\n    const componenteTipoExpediente = (tipo_expediente) => {\r\n\r\n        // TIPO DE EXPEDIENTE = DERECHO DE PETICION\r\n        if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) {\r\n            return (\r\n                <>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"ingresoDerechoPeticion\">TIPO DE DERECHO DE PETICIÓN<span className=\"text-danger\">*</span></label>\r\n                        <select className=\"form-control\" id=\"ingresoDerechoPeticion\" name=\"ingresoDerechoPeticion\"\r\n                            value={selectedTipoDerechoPeticion} onChange={e => selectChangeTipoDerechoPeticion(tipo_expediente, e.target.value)}>\r\n                            <option value=\"\">{global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}</option>\r\n                            {respuestaTipoDerechoPeticion ? selectTipoDerechoPeticion() : null}\r\n                        </select>\r\n                    </div>\r\n                    {/* Se ejecuta el componente */}\r\n                    {componenteTipoDerechoPeticion(tipo_expediente, selectedTipoDerechoPeticion)}\r\n                </>\r\n            );\r\n        }\r\n\r\n        // TIPO DE EXPEDIENTE = PODER REFERENTE A SOLICITUD\r\n        else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            tipo_queja: global.Constants.TIPO_QUEJA.EXTERNA\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n                            return errores\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        <Form>\r\n                            <div className=\"block-content block-content-full text-right\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                </Link>\r\n                            </div>\r\n                        </Form>\r\n                    </Formik>\r\n                </>\r\n            );\r\n        }\r\n\r\n        // TIPO DE EXPEDIENTE = QUEJA\r\n        else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.QUEJA) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            tipo_queja: '',\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n                            if (!valores.tipo_queja) {\r\n                                errores.tipo_queja = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO\r\n                            }\r\n                            return errores\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        <Form>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"tipo_queja\">TIPO DE QUEJA<span className=\"text-danger\">*</span></label>\r\n                                <Field as=\"select\" className=\"form-control\" id=\"tipo_queja\" name=\"tipo_queja\">\r\n                                    <option value=\"\">{global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}</option>\r\n                                    {respuestaTiposQueja ? selectTiposQueja() : null}\r\n                                </Field>\r\n                            </div>\r\n                            <div className=\"block-content block-content-full text-right\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                </Link>\r\n                            </div>\r\n                        </Form>\r\n                    </Formik>\r\n                </>\r\n            );\r\n        }\r\n\r\n        // TIPO DE EXPEDIENTE = TUTELA\r\n        else if (tipo_expediente === global.Constants.TIPOS_EXPEDIENTES.TUTELA) {\r\n            return (\r\n                <>\r\n                    <label htmlFor=\"ingresoTipoRtaTutela\">TÉRMINO DE RESPUESTA<span className=\"text-danger\">*</span></label>\r\n                    <select className=\"form-control\" id=\"termino_rta\" name=\"termino_rta\"\r\n                        value={selectedTerminosRespuesta}\r\n                        onChange={e => selectChangeTerminoRespuesta(e.target.value)}>\r\n                        <option value=\"{selectedTerminosRespuesta}\">{global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}</option>\r\n                        {respuestaTerminosRespuesta ? selectTerminosRespuesta() : null}\r\n                    </select>\r\n\r\n                    {/*DIAS TERMINO*/}\r\n                    {selectedTerminosRespuesta === global.Constants.TERMINOS_RESPUESTA.DIAS ? componenteTerminosRespuesta(global.Constants.TERMINOS_RESPUESTA.DIAS) : ''}\r\n\r\n                    {/*HORAS TERMINO*/}\r\n                    {selectedTerminosRespuesta === global.Constants.TERMINOS_RESPUESTA.HORAS ? componenteTerminosRespuesta(global.Constants.TERMINOS_RESPUESTA.HORAS) : ''}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    // Metodo encargado de cargar el mensaje por el tipo de expediente\r\n    const getApiMasTipoMensajesExpedientes = (idTipoExpediente, idSubTipoExpediente) => {\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric(\"mas_tipo_expediente_mensajes/\" + idTipoExpediente + \"/\" + idSubTipoExpediente).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se captura la informacion en la posicion 0\r\n                    let data = datos.data[0];\r\n\r\n                    // Se setea el mensaje \r\n                    setMensajeAlerta(data.attributes.mensaje);\r\n                } else {\r\n\r\n                    // Se setea el modal\r\n                    setModalState({ title: getNombreProceso + \" :: CLASIFICACIÓN DEL RADICADO\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoForm', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const changeObservaciones = (e) => {\r\n        if (e.target.value === '' || \r\n        (global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && \r\n        e.target.value.length <= getMaximoTextArea)) {\r\n            setObservaciones(e.target.value);\r\n            setCountTextArea(e.target.value.length);\r\n            setRepuestaObservaciones(true);\r\n        }\r\n    }\r\n\r\n    // COMOPNENTE TIPO DERECHO DE PETICION\r\n    const componenteTipoDerechoPeticion = (tipoExpediente, tipo_derecho_peticion) => {\r\n\r\n        // TIPO DE EXPDIENTE = DERECHO DE PETICION =  COPIAS\r\n        if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.COPIAS) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            observaciones: '',\r\n                            gestion_juridica: false,\r\n                            tipo_derecho_peticion: tipo_derecho_peticion,\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n                            setCountTextArea(valores.observaciones.length)\r\n\r\n                            if (!valores.observaciones) {\r\n                                errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO\r\n                            }\r\n                            if (valores.observaciones.length <= getMinimoTextArea) {\r\n                                errores.observaciones = 'DEBE TENER MÍNIMO ' + getMinimoTextArea + ' CARÁTERES';\r\n                            }\r\n                            if (valores.observaciones.length > getMaximoTextArea) {\r\n                                errores.observaciones = 'DEBE TENER MAXIMO ' + getMinimoTextArea + ' CARÁTERES';\r\n                            }\r\n                            if (valores.observaciones) {\r\n                                if (!global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(valores.observaciones)){\r\n                                    errores.observaciones = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS\r\n                                }\r\n                            }\r\n\r\n                            return errores\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        {({ errors }) => (\r\n                            <Form>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"alert alert-warning alert-dismissable\" role=\"alert\">\r\n                                        <p className=\"mb-0\">{getMensajeAlerta}</p>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>OBSERVACIONES <span className=\"text-danger\">*</span></label>\r\n                                        \r\n                                        <Field as=\"textarea\" className=\"form-control\" id=\"observaciones\" name=\"observaciones\" rows=\"4\"\r\n                                            placeholder=\"Escriba en este espacio las observaciones\" maxLength={getMaximoTextArea} minLength={getMinimoTextArea} value={getObservaciones} onChange={changeObservaciones}></Field>\r\n                                        <div className=\"text-right\">\r\n                                            <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                        </div>\r\n                                        <ErrorMessage name=\"observaciones\" component={() => (<span className=\"text-danger\">{errors.observaciones}</span>)} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                    <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n            );\r\n        }\r\n\r\n        // TIPO DE EXPDIENTE = DERECHO DE PETICION =  GENERAL\r\n        else if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.GENERAL) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            observaciones: '',\r\n                            gestion_juridica: false,\r\n                            tipo_derecho_peticion: tipo_derecho_peticion,\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n                            setCountTextArea(valores.observaciones.length)\r\n                            if (!valores.observaciones) {\r\n                                errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO\r\n                            }\r\n                            else if (valores.observaciones.length <= getMinimoTextArea) {\r\n                                errores.observaciones = 'DEBE TENER MÍNIMO ' + getMinimoTextArea + ' CARACTERES'\r\n                            }\r\n                            if (valores.observaciones.length > getMaximoTextArea) {\r\n                                errores.observaciones = 'DEBE TENER MAXIMO ' + getMinimoTextArea + ' CARACTERES';\r\n                            }\r\n                            if (valores.observaciones) {\r\n                                if (!global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(valores.observaciones)){\r\n                                    errores.observaciones = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS\r\n                                }\r\n                            }\r\n\r\n                            return errores\r\n\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        {({ errors }) => (\r\n                            <Form>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"alert alert-warning alert-dismissable\" role=\"alert\">\r\n                                        <h3 className=\"alert-heading font-size-h4 my-2\">ALERTA</h3>\r\n                                        <p className=\"mb-0\">{getMensajeAlerta}</p>\r\n                                    </div>\r\n                                    <label>OBSERVACIONES</label>  <span className=\"text-danger\">*</span>\r\n                                    <Field as=\"textarea\" className=\"form-control\" id=\"observaciones\" name=\"observaciones\" rows=\"4\"\r\n                                        placeholder=\"Escriba en este espacio las observaciones\" maxLength={getMaximoTextArea} minLength={getMinimoTextArea} value={getObservaciones} onChange={changeObservaciones}></Field>\r\n                                    <div className=\"text-right\">\r\n                                        <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                    </div>\r\n                                    <ErrorMessage name=\"observaciones\" component={() => (<span className=\"text-danger\">{errors.observaciones}</span>)} />\r\n                                    <div className=\"block-content block-content-full text-right\">\r\n                                        <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                        <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                            <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                    <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n            );\r\n        }\r\n\r\n        // TIPO DE EXPDIENTE = DERECHO DE PETICION =  ALERTA CONTROL POLITICO\r\n        else if (tipo_derecho_peticion === global.Constants.DERECHOS_PETICION.ALERTA) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            observaciones: '',\r\n                            gestion_juridica: '',\r\n                            tipo_derecho_peticion: tipo_derecho_peticion,\r\n                        }}\r\n                        enableReinitialize\r\n\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n\r\n                            if (!getObservaciones) {\r\n                                errores.observaciones = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO\r\n                            }\r\n                            if (countTextArea > getMaximoTextArea) {\r\n                                errores.descripcion = 'DEBE INGRESAR MAXIMO ' + getMaximoTextArea + ' CARACTERES';\r\n                            }\r\n                            if (countTextArea < getMinimoTextArea) {\r\n                                errores.descripcion = 'DEBE INGRESAR MÍNIMO ' + getMinimoTextArea + ' CARACTERES';\r\n                            }\r\n                            if(getRepuestaObservaciones == false){\r\n                                errores.descripcion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                            }\r\n                            if (!valores.gestion_juridica) {\r\n                                errores.gestion_juridica = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO\r\n                            }\r\n\r\n                            return errores\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        {({ errors }) => (\r\n                            <Form>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"alert alert-warning alert-dismissable\" role=\"alert\">\r\n                                        <p className=\"mb-0\">{getMensajeAlerta}</p>\r\n                                    </div>\r\n                                    <label htmlFor=\"ingresoTipoExpediente\">REQUIERE GESTIÓN JURÍDICA<span className=\"text-danger\">*</span></label>\r\n                                    <Field as=\"select\" className=\"form-control\" id=\"gestion_juridica\" name=\"gestion_juridica\">\r\n                                        <option value=\"\">{global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}</option>\r\n                                        <option value=\"true\">SI</option>\r\n                                        <option value=\"false\">NO</option>\r\n                                    </Field>\r\n                                    <br />\r\n                                    <label>OBSERVACIONES</label>  <span className=\"text-danger\">*</span>\r\n                                    <Field as=\"textarea\" className=\"form-control\" id=\"observaciones\" name=\"observaciones\" rows=\"4\"\r\n                                        placeholder=\"Escriba en este espacio las observaciones\" maxLength={getMaximoTextArea} minLength={getMinimoTextArea} value={getObservaciones} onChange={changeObservaciones}></Field>\r\n                                    <div className=\"text-right\">\r\n                                        <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                    </div>\r\n                                    <ErrorMessage name=\"observaciones\" component={() => (<span className=\"text-danger\">{errors.observaciones}</span>)} />\r\n                                    <div className=\"block-content block-content-full text-right\">\r\n                                        <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                        <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                            <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    const changeHorasTermino = (e) => {\r\n        if (e.target.value === '' || global.Constants.CARACTERES_ESPECIALES.formatOnlyNumbers.test(e.target.value)) {\r\n            setHorasTermino(e.target.value);\r\n        }\r\n    }\r\n\r\n    // COMPONENTE TERMINOS DE RESPUESTA -- TIPO EXPEDIENTE TUTELA\r\n    const componenteTerminosRespuesta = (termino_respuesta) => {\r\n\r\n        // TERMINO TUTELA = DIAS      \r\n        if (termino_respuesta === global.Constants.TERMINOS_RESPUESTA.DIAS) {\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            termino_rta: termino_respuesta,\r\n                            horasTermino: null,\r\n                            fechaTermino: fechaTermino\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errors = {}\r\n\r\n                            if (!valores.fechaTermino && !fechaTermino) {\r\n                                errors.fechaTermino = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\r\n                            }\r\n                            if (valores.fechaTermino) {\r\n                                if (!global.Constants.CARACTERES_ESPECIALES.formatDateYMDWithGuiones.test(valores.fechaTermino)){\r\n                                    errors.fechaTermino = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS\r\n                                }\r\n                            }\r\n\r\n                            return errors\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        {({ errors }) => (\r\n                        <Form>\r\n                            <div className=\"form-group mt-3\">\r\n                                <label>FECHA PARA TÉRMINO</label>  <span className=\"text-danger\">*</span>\r\n                                {/*<DatePicker id=\"fechaTermino\" locale='es' name=\"fechaTermino\" dateFormat=\"DD/MM/YYYY\" closeOnSelect={true} placeholder=\"dd/mm/yyyy\" onChange={(date) => setFechaTermino(date)} timeFormat={false} isValidDate={disableCustomDt} />*/}\r\n                                <DatePerson resultDiasNoLaborales={resultDiasNoLaborales} getAnosAtrasInvalidos={getAnosAtrasInvalidos} parentCallback={handleCallbackFechaTermino} id=\"fechaTermino\" name=\"fechaTermino\" />\r\n                                <ErrorMessage name=\"fechaTermino\" component={() => (<span className=\"text-danger\">{errors.fechaTermino}</span>)} />\r\n                            </div>\r\n                            <div className=\"block-content block-content-full text-right\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                </Link>\r\n                            </div>\r\n                        </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n\r\n            )\r\n        }\r\n\r\n        // TERMINO TUTELA = HORAS     \r\n        else if (termino_respuesta === global.Constants.TERMINOS_RESPUESTA.HORAS) {\r\n\r\n            return (\r\n                <>\r\n                    <Formik\r\n                        initialValues={{\r\n                            termino_rta: termino_respuesta,\r\n                            horasTermino: '',\r\n                            fechaTermino: new Date(),\r\n                        }}\r\n                        enableReinitialize\r\n                        validate={(valores) => {\r\n                            let errores = {}\r\n                            if (!getHorasTermino) {\r\n                                errores.horasTermino = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\r\n                            }\r\n                            if (getHorasTermino > 23) {\r\n                                errores.horasTermino = 'EL MAXIMO DE HORAS ES DE 23';\r\n                            }\r\n                            return errores\r\n                        }}\r\n                        onSubmit={(valores, { resetForm }) => {\r\n                            enviarDatos(valores);\r\n                        }}\r\n                    >\r\n                        {({ errors }) => (\r\n                            <Form>\r\n                                <div className=\"form-group mt-3\">\r\n                                    <label>HORAS PARA TÉRMINO</label>  <span className=\"text-danger\">*</span>\r\n                                    <Field type=\"number\" min=\"1\" max='23' id=\"horasTermino\" name=\"horasTermino\" className=\"form-control\" placeholder=\"\" value={getHorasTermino} onChange={changeHorasTermino}/>\r\n                                    <ErrorMessage name=\"horasTermino\" component={() => (<span className=\"text-danger\">{errors.horasTermino}</span>)} />\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-rounded btn-primary\">{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                    <Link to={`/ClasificacionRadicadoLista/`} state={{ from: from }}>\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </>\r\n            )\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<ModalGen data={getModalState} />}\r\n\r\n            <div className=\"block-content\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"ingresoTipoExpediente\">TIPO DE EXPEDIENTE<span className=\"text-danger\">*</span></label>\r\n                            <select className=\"form-control\" id=\"ingresoTipoExpediente\" name=\"ingresoTipoExpediente\"\r\n                                value={selectedTipoExpediente} onChange={e => selectChangeTipoExpediente(e.target.value)}>\r\n                                <option value=\"\">{global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}</option>\r\n                                {respuestaTipoExpediente ? selectTipoExpediente() : null}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*DERECHO DE PETICION*/}\r\n                {selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) : ''}\r\n\r\n                {/*PODER REFERENTE A SOLIICTUD*/}\r\n                {selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.PODER_REFERENTE) : ''}\r\n\r\n                {/*QUEJA*/}\r\n                {selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.QUEJA ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.QUEJA) : ''}\r\n\r\n                {/*TUTELA*/}\r\n                {selectedTipoExpediente === global.Constants.TIPOS_EXPEDIENTES.TUTELA ? componenteTipoExpediente(global.Constants.TIPOS_EXPEDIENTES.TUTELA) : ''}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ClasificacionRadicado;"],"mappings":"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"},"metadata":{},"sourceType":"module"}