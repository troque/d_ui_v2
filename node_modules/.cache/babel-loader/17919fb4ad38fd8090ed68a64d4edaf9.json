{"ast":null,"code":"\"use strict\";\n\n/* eslint camelcase:off */\nvar _defineProperty = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classCallCheck = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar ArgHandler = require(\"./ArgHandler\");\nvar _ = require(\"lodash\");\nvar xmlq = require(\"./xmlq\");\nvar colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nvar Style = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of _Style.\n   * @constructor\n   * @param {StyleSheet} styleSheet - The styleSheet.\n   * @param {number} id - The style ID.\n   * @param {{}} xfNode - The xf node.\n   * @param {{}} fontNode - The font node.\n   * @param {{}} fillNode - The fill node.\n   * @param {{}} borderNode - The border node.\n   */\n  function Style(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n    _classCallCheck(this, Style);\n    this._styleSheet = styleSheet;\n    this._id = id;\n    this._xfNode = xfNode;\n    this._fontNode = fontNode;\n    this._fillNode = fillNode;\n    this._borderNode = borderNode;\n  }\n\n  /**\n   * Gets the style ID.\n   * @returns {number} The ID.\n   */\n  _createClass(Style, [{\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this = this;\n      return new ArgHandler(\"_Style.style\").case('string', function (name) {\n        var getterName = \"_get_\".concat(name);\n        if (!_this[getterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n        return _this[getterName]();\n      }).case(['string', '*'], function (name, value) {\n        var setterName = \"_set_\".concat(name);\n        if (!_this[setterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n        _this[setterName](value);\n        return _this;\n      }).handle(arguments);\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor(node, name) {\n      var child = xmlq.findChild(node, name);\n      if (!child || !child.attributes) return;\n      var color = {};\n      if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n      if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n      if (_.isEmpty(color)) return;\n      return color;\n    }\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(node, name, color) {\n      if (typeof color === \"string\") color = {\n        rgb: color\n      };else if (typeof color === \"number\") color = {\n        theme: color\n      };\n      xmlq.setChildAttributes(node, name, {\n        rgb: color && color.rgb && color.rgb.toUpperCase(),\n        indexed: null,\n        theme: color && color.theme,\n        tint: color && color.tint\n      });\n      xmlq.removeChildIfEmpty(node, 'color');\n    }\n  }, {\n    key: \"_get_bold\",\n    value: function _get_bold() {\n      return xmlq.hasChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_set_bold\",\n    value: function _set_bold(bold) {\n      if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_get_italic\",\n    value: function _get_italic() {\n      return xmlq.hasChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_set_italic\",\n    value: function _set_italic(italic) {\n      if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_get_underline\",\n    value: function _get_underline() {\n      var uNode = xmlq.findChild(this._fontNode, 'u');\n      return uNode ? uNode.attributes.val || true : false;\n    }\n  }, {\n    key: \"_set_underline\",\n    value: function _set_underline(underline) {\n      if (underline) {\n        var uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n        var val = typeof underline === 'string' ? underline : null;\n        xmlq.setAttributes(uNode, {\n          val: val\n        });\n      } else {\n        xmlq.removeChild(this._fontNode, 'u');\n      }\n    }\n  }, {\n    key: \"_get_strikethrough\",\n    value: function _get_strikethrough() {\n      return xmlq.hasChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_set_strikethrough\",\n    value: function _set_strikethrough(strikethrough) {\n      if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_getFontVerticalAlignment\",\n    value: function _getFontVerticalAlignment() {\n      return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n  }, {\n    key: \"_setFontVerticalAlignment\",\n    value: function _setFontVerticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n        val: alignment\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n  }, {\n    key: \"_get_subscript\",\n    value: function _get_subscript() {\n      return this._getFontVerticalAlignment() === \"subscript\";\n    }\n  }, {\n    key: \"_set_subscript\",\n    value: function _set_subscript(subscript) {\n      this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n  }, {\n    key: \"_get_superscript\",\n    value: function _get_superscript() {\n      return this._getFontVerticalAlignment() === \"superscript\";\n    }\n  }, {\n    key: \"_set_superscript\",\n    value: function _set_superscript(superscript) {\n      this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n  }, {\n    key: \"_get_fontSize\",\n    value: function _get_fontSize() {\n      return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n  }, {\n    key: \"_set_fontSize\",\n    value: function _set_fontSize(size) {\n      xmlq.setChildAttributes(this._fontNode, 'sz', {\n        val: size\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n  }, {\n    key: \"_get_fontFamily\",\n    value: function _get_fontFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n  }, {\n    key: \"_set_fontFamily\",\n    value: function _set_fontFamily(family) {\n      xmlq.setChildAttributes(this._fontNode, 'name', {\n        val: family\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n  }, {\n    key: \"_get_fontGenericFamily\",\n    value: function _get_fontGenericFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n  }, {\n    key: \"_set_fontGenericFamily\",\n    value: function _set_fontGenericFamily(genericFamily) {\n      xmlq.setChildAttributes(this._fontNode, 'family', {\n        val: genericFamily\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n  }, {\n    key: \"_get_fontColor\",\n    value: function _get_fontColor() {\n      return this._getColor(this._fontNode, \"color\");\n    }\n  }, {\n    key: \"_set_fontColor\",\n    value: function _set_fontColor(color) {\n      this._setColor(this._fontNode, \"color\", color);\n    }\n  }, {\n    key: \"_get_fontScheme\",\n    value: function _get_fontScheme() {\n      // can be 'minor', 'major', 'none'\n      return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n  }, {\n    key: \"_set_fontScheme\",\n    value: function _set_fontScheme(scheme) {\n      xmlq.setChildAttributes(this._fontNode, 'scheme', {\n        val: scheme\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n  }, {\n    key: \"_get_horizontalAlignment\",\n    value: function _get_horizontalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n  }, {\n    key: \"_set_horizontalAlignment\",\n    value: function _set_horizontalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        horizontal: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_justifyLastLine\",\n    value: function _get_justifyLastLine() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n  }, {\n    key: \"_set_justifyLastLine\",\n    value: function _set_justifyLastLine(justifyLastLine) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        justifyLastLine: justifyLastLine ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_indent\",\n    value: function _get_indent() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n  }, {\n    key: \"_set_indent\",\n    value: function _set_indent(indent) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        indent: indent\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_verticalAlignment\",\n    value: function _get_verticalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n  }, {\n    key: \"_set_verticalAlignment\",\n    value: function _set_verticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        vertical: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_wrapText\",\n    value: function _get_wrapText() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n  }, {\n    key: \"_set_wrapText\",\n    value: function _set_wrapText(wrapText) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        wrapText: wrapText ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_shrinkToFit\",\n    value: function _get_shrinkToFit() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n  }, {\n    key: \"_set_shrinkToFit\",\n    value: function _set_shrinkToFit(shrinkToFit) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        shrinkToFit: shrinkToFit ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textDirection\",\n    value: function _get_textDirection() {\n      var readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n      if (readingOrder === 1) return \"left-to-right\";\n      if (readingOrder === 2) return \"right-to-left\";\n      return readingOrder;\n    }\n  }, {\n    key: \"_set_textDirection\",\n    value: function _set_textDirection(textDirection) {\n      var readingOrder;\n      if (textDirection === \"left-to-right\") readingOrder = 1;else if (textDirection === \"right-to-left\") readingOrder = 2;\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        readingOrder: readingOrder\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_getTextRotation\",\n    value: function _getTextRotation() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n  }, {\n    key: \"_setTextRotation\",\n    value: function _setTextRotation(textRotation) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        textRotation: textRotation\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textRotation\",\n    value: function _get_textRotation() {\n      var textRotation = this._getTextRotation();\n\n      // Negative angles in Excel correspond to values > 90 in OOXML.\n      if (textRotation > 90) textRotation = 90 - textRotation;\n      return textRotation;\n    }\n  }, {\n    key: \"_set_textRotation\",\n    value: function _set_textRotation(textRotation) {\n      // Negative angles in Excel correspond to values > 90 in OOXML.\n      if (textRotation < 0) textRotation = 90 - textRotation;\n      this._setTextRotation(textRotation);\n    }\n  }, {\n    key: \"_get_angleTextCounterclockwise\",\n    value: function _get_angleTextCounterclockwise() {\n      return this._getTextRotation() === 45;\n    }\n  }, {\n    key: \"_set_angleTextCounterclockwise\",\n    value: function _set_angleTextCounterclockwise(value) {\n      this._setTextRotation(value ? 45 : null);\n    }\n  }, {\n    key: \"_get_angleTextClockwise\",\n    value: function _get_angleTextClockwise() {\n      return this._getTextRotation() === 135;\n    }\n  }, {\n    key: \"_set_angleTextClockwise\",\n    value: function _set_angleTextClockwise(value) {\n      this._setTextRotation(value ? 135 : null);\n    }\n  }, {\n    key: \"_get_rotateTextUp\",\n    value: function _get_rotateTextUp() {\n      return this._getTextRotation() === 90;\n    }\n  }, {\n    key: \"_set_rotateTextUp\",\n    value: function _set_rotateTextUp(value) {\n      this._setTextRotation(value ? 90 : null);\n    }\n  }, {\n    key: \"_get_rotateTextDown\",\n    value: function _get_rotateTextDown() {\n      return this._getTextRotation() === 180;\n    }\n  }, {\n    key: \"_set_rotateTextDown\",\n    value: function _set_rotateTextDown(value) {\n      this._setTextRotation(value ? 180 : null);\n    }\n  }, {\n    key: \"_get_verticalText\",\n    value: function _get_verticalText() {\n      return this._getTextRotation() === 255;\n    }\n  }, {\n    key: \"_set_verticalText\",\n    value: function _set_verticalText(value) {\n      this._setTextRotation(value ? 255 : null);\n    }\n  }, {\n    key: \"_get_fill\",\n    value: function _get_fill() {\n      var _this2 = this;\n      var patternFillNode = xmlq.findChild(this._fillNode, 'patternFill'); // jq.get(this._fillNode, \"patternFill[0]\");\n      var gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill'); // jq.get(this._fillNode, \"gradientFill[0]\");\n      var patternType = patternFillNode && patternFillNode.attributes.patternType; // jq.get(patternFillNode, \"$.patternType\");\n\n      if (patternType === \"solid\") {\n        return {\n          type: \"solid\",\n          color: this._getColor(patternFillNode, \"fgColor\")\n        };\n      }\n      if (patternType) {\n        return {\n          type: \"pattern\",\n          pattern: patternType,\n          foreground: this._getColor(patternFillNode, \"fgColor\"),\n          background: this._getColor(patternFillNode, \"bgColor\")\n        };\n      }\n      if (gradientFillNode) {\n        var gradientType = gradientFillNode.attributes.type || \"linear\";\n        var fill = {\n          type: \"gradient\",\n          gradientType: gradientType,\n          stops: _.map(gradientFillNode.children, function (stop) {\n            return {\n              position: stop.attributes.position,\n              color: _this2._getColor(stop, \"color\")\n            };\n          })\n        };\n        if (gradientType === \"linear\") {\n          fill.angle = gradientFillNode.attributes.degree;\n        } else {\n          fill.left = gradientFillNode.attributes.left;\n          fill.right = gradientFillNode.attributes.right;\n          fill.top = gradientFillNode.attributes.top;\n          fill.bottom = gradientFillNode.attributes.bottom;\n        }\n        return fill;\n      }\n    }\n  }, {\n    key: \"_set_fill\",\n    value: function _set_fill(fill) {\n      var _this3 = this;\n      this._fillNode.children = [];\n\n      // No fill\n      if (_.isNil(fill)) return;\n\n      // Pattern fill\n      if (fill.type === \"pattern\") {\n        var _patternFill = {\n          name: 'patternFill',\n          attributes: {\n            patternType: fill.pattern\n          },\n          children: []\n        };\n        this._fillNode.children.push(_patternFill);\n        this._setColor(_patternFill, \"fgColor\", fill.foreground);\n        this._setColor(_patternFill, \"bgColor\", fill.background);\n        return;\n      }\n\n      // Gradient fill\n      if (fill.type === \"gradient\") {\n        var gradientFill = {\n          name: 'gradientFill',\n          attributes: {},\n          children: []\n        };\n        this._fillNode.children.push(gradientFill);\n        xmlq.setAttributes(gradientFill, {\n          type: fill.gradientType === \"path\" ? \"path\" : undefined,\n          left: fill.left,\n          right: fill.right,\n          top: fill.top,\n          bottom: fill.bottom,\n          degree: fill.angle\n        });\n        _.forEach(fill.stops, function (fillStop, i) {\n          var stop = {\n            name: 'stop',\n            attributes: {\n              position: fillStop.position\n            },\n            children: []\n          };\n          gradientFill.children.push(stop);\n          _this3._setColor(stop, 'color', fillStop.color);\n        });\n        return;\n      }\n\n      // Solid fill (really a pattern fill with a solid pattern type).\n      if (!_.isObject(fill)) fill = {\n        type: \"solid\",\n        color: fill\n      };else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = {\n        color: fill\n      };\n      var patternFill = {\n        name: 'patternFill',\n        attributes: {\n          patternType: 'solid'\n        }\n      };\n      this._fillNode.children.push(patternFill);\n      this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n  }, {\n    key: \"_getBorder\",\n    value: function _getBorder() {\n      var _this4 = this;\n      var result = {};\n      [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n        var sideNode = xmlq.findChild(_this4._borderNode, side);\n        var sideResult = {};\n        var style = xmlq.getChildAttribute(_this4._borderNode, side, 'style');\n        if (style) sideResult.style = style;\n        var color = _this4._getColor(sideNode, 'color');\n        if (color) sideResult.color = color;\n        if (side === \"diagonal\") {\n          var up = _this4._borderNode.attributes.diagonalUp;\n          var down = _this4._borderNode.attributes.diagonalDown;\n          var direction;\n          if (up && down) direction = \"both\";else if (up) direction = \"up\";else if (down) direction = \"down\";\n          if (direction) sideResult.direction = direction;\n        }\n        if (!_.isEmpty(sideResult)) result[side] = sideResult;\n      });\n      return result;\n    }\n  }, {\n    key: \"_setBorder\",\n    value: function _setBorder(settings) {\n      var _this5 = this;\n      _.forOwn(settings, function (setting, side) {\n        if (typeof setting === \"boolean\") {\n          setting = {\n            style: setting ? \"thin\" : null\n          };\n        } else if (typeof setting === \"string\") {\n          setting = {\n            style: setting\n          };\n        } else if (setting === null || setting === undefined) {\n          setting = {\n            style: null,\n            color: null,\n            direction: null\n          };\n        }\n        if (setting.hasOwnProperty(\"style\")) {\n          xmlq.setChildAttributes(_this5._borderNode, side, {\n            style: setting.style\n          });\n        }\n        if (setting.hasOwnProperty(\"color\")) {\n          var sideNode = xmlq.findChild(_this5._borderNode, side);\n          _this5._setColor(sideNode, \"color\", setting.color);\n        }\n        if (side === \"diagonal\") {\n          xmlq.setAttributes(_this5._borderNode, {\n            diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n            diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_get_border\",\n    value: function _get_border() {\n      return this._getBorder();\n    }\n  }, {\n    key: \"_set_border\",\n    value: function _set_border(settings) {\n      if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n        settings = _.defaults(settings, {\n          left: null,\n          right: null,\n          top: null,\n          bottom: null,\n          diagonal: null\n        });\n        this._setBorder(settings);\n      } else {\n        this._setBorder({\n          left: settings,\n          right: settings,\n          top: settings,\n          bottom: settings\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderColor\",\n    value: function _get_borderColor() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.color;\n      });\n    }\n  }, {\n    key: \"_set_borderColor\",\n    value: function _set_borderColor(color) {\n      if (_.isObject(color)) {\n        this._setBorder(_.mapValues(color, function (color) {\n          return {\n            color: color\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            color: color\n          },\n          right: {\n            color: color\n          },\n          top: {\n            color: color\n          },\n          bottom: {\n            color: color\n          },\n          diagonal: {\n            color: color\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderStyle\",\n    value: function _get_borderStyle() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.style;\n      });\n    }\n  }, {\n    key: \"_set_borderStyle\",\n    value: function _set_borderStyle(style) {\n      if (_.isObject(style)) {\n        this._setBorder(_.mapValues(style, function (style) {\n          return {\n            style: style\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            style: style\n          },\n          right: {\n            style: style\n          },\n          top: {\n            style: style\n          },\n          bottom: {\n            style: style\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_diagonalBorderDirection\",\n    value: function _get_diagonalBorderDirection() {\n      var border = this._getBorder().diagonal;\n      return border && border.direction;\n    }\n  }, {\n    key: \"_set_diagonalBorderDirection\",\n    value: function _set_diagonalBorderDirection(direction) {\n      this._setBorder({\n        diagonal: {\n          direction: direction\n        }\n      });\n    }\n  }, {\n    key: \"_get_numberFormat\",\n    value: function _get_numberFormat() {\n      var numFmtId = this._xfNode.attributes.numFmtId || 0;\n      return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n  }, {\n    key: \"_set_numberFormat\",\n    value: function _set_numberFormat(formatCode) {\n      this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n  }]);\n  return Style;\n}();\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n  Style.prototype[\"_get_\".concat(side, \"Border\")] = function () {\n    return this._getBorder()[side];\n  };\n  Style.prototype[\"_set_\".concat(side, \"Border\")] = function (settings) {\n    this._setBorder(_defineProperty({}, side, settings));\n  };\n  Style.prototype[\"_get_\".concat(side, \"BorderColor\")] = function () {\n    var border = this._getBorder()[side];\n    return border && border.color;\n  };\n  Style.prototype[\"_set_\".concat(side, \"BorderColor\")] = function (color) {\n    this._setBorder(_defineProperty({}, side, {\n      color: color\n    }));\n  };\n  Style.prototype[\"_get_\".concat(side, \"BorderStyle\")] = function () {\n    var border = this._getBorder()[side];\n    return border && border.style;\n  };\n  Style.prototype[\"_set_\".concat(side, \"BorderStyle\")] = function (style) {\n    this._setBorder(_defineProperty({}, side, {\n      style: style\n    }));\n  };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\nmodule.exports = Style;","map":{"version":3,"names":["ArgHandler","require","_","xmlq","colorIndexes","Style","styleSheet","id","xfNode","fontNode","fillNode","borderNode","_styleSheet","_id","_xfNode","_fontNode","_fillNode","_borderNode","case","name","getterName","Error","value","setterName","handle","arguments","node","child","findChild","attributes","color","hasOwnProperty","rgb","theme","indexed","tint","isEmpty","setChildAttributes","toUpperCase","removeChildIfEmpty","hasChild","bold","appendChildIfNotFound","removeChild","italic","uNode","val","underline","setAttributes","strikethrough","getChildAttribute","alignment","_getFontVerticalAlignment","subscript","_setFontVerticalAlignment","superscript","size","family","genericFamily","_getColor","_setColor","scheme","horizontal","justifyLastLine","indent","vertical","wrapText","shrinkToFit","readingOrder","textDirection","textRotation","_getTextRotation","_setTextRotation","patternFillNode","gradientFillNode","patternType","type","pattern","foreground","background","gradientType","fill","stops","map","children","stop","position","angle","degree","left","right","top","bottom","isNil","patternFill","push","gradientFill","undefined","forEach","fillStop","i","isObject","result","side","sideNode","sideResult","style","up","diagonalUp","down","diagonalDown","direction","settings","forOwn","setting","_getBorder","defaults","diagonal","_setBorder","mapValues","border","numFmtId","getNumberFormatCode","formatCode","getNumberFormatId","prototype","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/Style.js"],"sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n    /**\n     * Creates a new instance of _Style.\n     * @constructor\n     * @param {StyleSheet} styleSheet - The styleSheet.\n     * @param {number} id - The style ID.\n     * @param {{}} xfNode - The xf node.\n     * @param {{}} fontNode - The font node.\n     * @param {{}} fillNode - The fill node.\n     * @param {{}} borderNode - The border node.\n     */\n    constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n        this._styleSheet = styleSheet;\n        this._id = id;\n        this._xfNode = xfNode;\n        this._fontNode = fontNode;\n        this._fillNode = fillNode;\n        this._borderNode = borderNode;\n    }\n\n    /**\n     * Gets the style ID.\n     * @returns {number} The ID.\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n    style() {\n        return new ArgHandler(\"_Style.style\")\n            .case('string', name => {\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case(['string', '*'], (name, value) => {\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                this[setterName](value);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'name', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n\n    _get_horizontalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n\n    _set_horizontalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { horizontal: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_justifyLastLine() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n\n    _set_justifyLastLine(justifyLastLine) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { justifyLastLine: justifyLastLine ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_indent() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n\n    _set_indent(indent) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { indent });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_verticalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n\n    _set_verticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { vertical: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_wrapText() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n\n    _set_wrapText(wrapText) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { wrapText: wrapText ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_shrinkToFit() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n\n    _set_shrinkToFit(shrinkToFit) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { shrinkToFit: shrinkToFit ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textDirection() {\n        const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n        if (readingOrder === 1) return \"left-to-right\";\n        if (readingOrder === 2) return \"right-to-left\";\n        return readingOrder;\n    }\n\n    _set_textDirection(textDirection) {\n        let readingOrder;\n        if (textDirection === \"left-to-right\") readingOrder = 1;\n        else if (textDirection === \"right-to-left\") readingOrder = 2;\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { readingOrder });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _getTextRotation() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n\n    _setTextRotation(textRotation) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { textRotation });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textRotation() {\n        let textRotation = this._getTextRotation();\n\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation > 90) textRotation = 90 - textRotation;\n        return textRotation;\n    }\n\n    _set_textRotation(textRotation) {\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation < 0) textRotation = 90 - textRotation;\n        this._setTextRotation(textRotation);\n    }\n\n    _get_angleTextCounterclockwise() {\n        return this._getTextRotation() === 45;\n    }\n\n    _set_angleTextCounterclockwise(value) {\n        this._setTextRotation(value ? 45 : null);\n    }\n\n    _get_angleTextClockwise() {\n        return this._getTextRotation() === 135;\n    }\n\n    _set_angleTextClockwise(value) {\n        this._setTextRotation(value ? 135 : null);\n    }\n\n    _get_rotateTextUp() {\n        return this._getTextRotation() === 90;\n    }\n\n    _set_rotateTextUp(value) {\n        this._setTextRotation(value ? 90 : null);\n    }\n\n    _get_rotateTextDown() {\n        return this._getTextRotation() === 180;\n    }\n\n    _set_rotateTextDown(value) {\n        this._setTextRotation(value ? 180 : null);\n    }\n\n    _get_verticalText() {\n        return this._getTextRotation() === 255;\n    }\n\n    _set_verticalText(value) {\n        this._setTextRotation(value ? 255 : null);\n    }\n\n    _get_fill() {\n        const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill');// jq.get(this._fillNode, \"patternFill[0]\");\n        const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill');// jq.get(this._fillNode, \"gradientFill[0]\");\n        const patternType = patternFillNode && patternFillNode.attributes.patternType;// jq.get(patternFillNode, \"$.patternType\");\n\n        if (patternType === \"solid\") {\n            return {\n                type: \"solid\",\n                color: this._getColor(patternFillNode, \"fgColor\")\n            };\n        }\n\n        if (patternType) {\n            return {\n                type: \"pattern\",\n                pattern: patternType,\n                foreground: this._getColor(patternFillNode, \"fgColor\"),\n                background: this._getColor(patternFillNode, \"bgColor\")\n            };\n        }\n\n        if (gradientFillNode) {\n            const gradientType = gradientFillNode.attributes.type || \"linear\";\n            const fill = {\n                type: \"gradient\",\n                gradientType,\n                stops: _.map(gradientFillNode.children, stop => ({\n                    position: stop.attributes.position,\n                    color: this._getColor(stop, \"color\")\n                }))\n            };\n\n            if (gradientType === \"linear\") {\n                fill.angle = gradientFillNode.attributes.degree;\n            } else {\n                fill.left = gradientFillNode.attributes.left;\n                fill.right = gradientFillNode.attributes.right;\n                fill.top = gradientFillNode.attributes.top;\n                fill.bottom = gradientFillNode.attributes.bottom;\n            }\n\n            return fill;\n        }\n    }\n\n    _set_fill(fill) {\n        this._fillNode.children = [];\n\n        // No fill\n        if (_.isNil(fill)) return;\n\n        // Pattern fill\n        if (fill.type === \"pattern\") {\n            const patternFill = {\n                name: 'patternFill',\n                attributes: { patternType: fill.pattern },\n                children: []\n            };\n            this._fillNode.children.push(patternFill);\n            this._setColor(patternFill, \"fgColor\", fill.foreground);\n            this._setColor(patternFill, \"bgColor\", fill.background);\n            return;\n        }\n\n        // Gradient fill\n        if (fill.type === \"gradient\") {\n            const gradientFill = { name: 'gradientFill', attributes: {}, children: [] };\n            this._fillNode.children.push(gradientFill);\n            xmlq.setAttributes(gradientFill, {\n                type: fill.gradientType === \"path\" ? \"path\" : undefined,\n                left: fill.left,\n                right: fill.right,\n                top: fill.top,\n                bottom: fill.bottom,\n                degree: fill.angle\n            });\n\n            _.forEach(fill.stops, (fillStop, i) => {\n                const stop = {\n                    name: 'stop',\n                    attributes: { position: fillStop.position },\n                    children: []\n                };\n                gradientFill.children.push(stop);\n                this._setColor(stop, 'color', fillStop.color);\n            });\n\n            return;\n        }\n\n        // Solid fill (really a pattern fill with a solid pattern type).\n        if (!_.isObject(fill)) fill = { type: \"solid\", color: fill };\n        else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = { color: fill };\n\n        const patternFill = {\n            name: 'patternFill',\n            attributes: { patternType: 'solid' }\n        };\n        this._fillNode.children.push(patternFill);\n        this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n\n    _getBorder() {\n        const result = {};\n        [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n            const sideNode = xmlq.findChild(this._borderNode, side);\n            const sideResult = {};\n\n            const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n            if (style) sideResult.style = style;\n            const color = this._getColor(sideNode, 'color');\n            if (color) sideResult.color = color;\n\n            if (side === \"diagonal\") {\n                const up = this._borderNode.attributes.diagonalUp;\n                const down = this._borderNode.attributes.diagonalDown;\n                let direction;\n                if (up && down) direction = \"both\";\n                else if (up) direction = \"up\";\n                else if (down) direction = \"down\";\n                if (direction) sideResult.direction = direction;\n            }\n\n            if (!_.isEmpty(sideResult)) result[side] = sideResult;\n        });\n\n        return result;\n    }\n\n    _setBorder(settings) {\n        _.forOwn(settings, (setting, side) => {\n            if (typeof setting === \"boolean\") {\n                setting = { style: setting ? \"thin\" : null };\n            } else if (typeof setting === \"string\") {\n                setting = { style: setting };\n            } else if (setting === null || setting === undefined) {\n                setting = { style: null, color: null, direction: null };\n            }\n\n            if (setting.hasOwnProperty(\"style\")) {\n                xmlq.setChildAttributes(this._borderNode, side, { style: setting.style });\n            }\n\n            if (setting.hasOwnProperty(\"color\")) {\n                const sideNode = xmlq.findChild(this._borderNode, side);\n                this._setColor(sideNode, \"color\", setting.color);\n            }\n\n            if (side === \"diagonal\") {\n                xmlq.setAttributes(this._borderNode, {\n                    diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n                    diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n                });\n            }\n        });\n    }\n\n    _get_border() {\n        return this._getBorder();\n    }\n\n    _set_border(settings) {\n        if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n            settings = _.defaults(settings, {\n                left: null,\n                right: null,\n                top: null,\n                bottom: null,\n                diagonal: null\n            });\n            this._setBorder(settings);\n        } else {\n            this._setBorder({\n                left: settings,\n                right: settings,\n                top: settings,\n                bottom: settings\n            });\n        }\n    }\n\n    _get_borderColor() {\n        return _.mapValues(this._getBorder(), value => value.color);\n    }\n\n    _set_borderColor(color) {\n        if (_.isObject(color)) {\n            this._setBorder(_.mapValues(color, color => ({ color })));\n        } else {\n            this._setBorder({\n                left: { color },\n                right: { color },\n                top: { color },\n                bottom: { color },\n                diagonal: { color }\n            });\n        }\n    }\n\n    _get_borderStyle() {\n        return _.mapValues(this._getBorder(), value => value.style);\n    }\n\n    _set_borderStyle(style) {\n        if (_.isObject(style)) {\n            this._setBorder(_.mapValues(style, style => ({ style })));\n        } else {\n            this._setBorder({\n                left: { style },\n                right: { style },\n                top: { style },\n                bottom: { style }\n            });\n        }\n    }\n\n    _get_diagonalBorderDirection() {\n        const border = this._getBorder().diagonal;\n        return border && border.direction;\n    }\n\n    _set_diagonalBorderDirection(direction) {\n        this._setBorder({ diagonal: { direction } });\n    }\n\n    _get_numberFormat() {\n        const numFmtId = this._xfNode.attributes.numFmtId || 0;\n        return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n\n    _set_numberFormat(formatCode) {\n        this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n    Style.prototype[`_get_${side}Border`] = function () {\n        return this._getBorder()[side];\n    };\n\n    Style.prototype[`_set_${side}Border`] = function (settings) {\n        this._setBorder({ [side]: settings });\n    };\n\n    Style.prototype[`_get_${side}BorderColor`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.color;\n    };\n\n    Style.prototype[`_set_${side}BorderColor`] = function (color) {\n        this._setBorder({ [side]: { color } });\n    };\n\n    Style.prototype[`_get_${side}BorderStyle`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.style;\n    };\n\n    Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n        this._setBorder({ [side]: { style } });\n    };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\n\nmodule.exports = Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}