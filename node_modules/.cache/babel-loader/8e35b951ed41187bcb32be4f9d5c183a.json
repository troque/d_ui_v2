{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\Maestras\\\\TipoExpedienteMensajesForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport Spinner from '../Utils/Spinner';\nimport { Link } from \"react-router-dom\";\nimport GenericApi from '../Api/Services/GenericApi';\nimport { useLocation } from 'react-router-dom';\nimport '../Utils/Constants';\nimport ModalGen from '../Utils/Modals/ModalGeneric';\nimport InfoErrorApi from '../Utils/InfoErrorApi';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TipoExpedienteMensajesForm() {\n  _s();\n  const [getMinimoTextArea, setMinimoTextArea] = useState(0);\n  const [getMaximoTextArea, setMaximoTextArea] = useState(0);\n  const [errorApi, setErrorApi] = useState('');\n  const [getModalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [countTextArea, setCountTextArea] = useState(0);\n\n  // Constantes para cargar los valores\n  const [getMensajeTipoExpediente, setMensajeTipoExpediente] = useState(\"\");\n  const [getValueTipoExpediente, setArrayTipoExpediente] = useState([]);\n  const [getTipoExpediente, setTipoExpediente] = useState([]);\n\n  // Constantes para los subtipos del expediente\n  const [getHabilitarSubTipoExpediente, setHabilitarSubTipoExpediente] = useState(null);\n  const [getValueSubTipoExpediente, setArraySubTipoExpediente] = useState([]);\n  const [getSubTipoExpediente, setSubTipoExpediente] = useState([]);\n  const [getArrayEstados, setArrayEstados] = useState([]);\n  const [getMensajeErrorTipoExpediente, setMensajeErrorTipoExpediente] = useState(\"\");\n  const [getMensajeErrorSubTipoExpediente, setMensajeErrorSubTipoExpediente] = useState(\"\");\n  const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\n  const getListaEstados = [{\n    value: '1',\n    label: 'Activo'\n  }, {\n    value: '0',\n    label: 'Inactivo'\n  }];\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  useEffect(() => {\n    async function fetchData() {\n      // Se habilita el cargando\n      window.showSpinner(true);\n\n      // Se carga la api de parametros permitidos\n      obtenerParametros();\n      if (from != null) {\n        // Se carga el mensaje y la longitud del mensaje\n        setMensajeTipoExpediente(from.attributes.mensaje);\n        setCountTextArea(from.attributes.mensaje.length);\n\n        // Se carga el tipo de expediente\n        cargarTiposExpedientes();\n        setArrayTipoExpediente({\n          label: from.attributes.tipo_expediente.nombre,\n          value: from.attributes.tipo_expediente.id\n        });\n\n        // Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\n        const arrayValidarTipoExpedientes = [1, 3, 4];\n        const valorValidar = parseInt(from.attributes.tipo_expediente.id);\n\n        // Se valida que exista dentro del que lleva sub tipo de expediente\n        if (arrayValidarTipoExpedientes.includes(valorValidar)) {\n          // Se habilita el sub tipo de expediente\n          setHabilitarSubTipoExpediente(true);\n\n          // Se carga cuando es Derecho de peticion\n          if (valorValidar == 1) {\n            // Se cargan los datos del derecho de peticion\n            getApiTipoDerechoPeticion();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"Copias\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"General\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"Alerta control político\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 3\n              });\n            }\n          }\n\n          // Se carga cuando es Tipo Queja\n          else if (valorValidar == 3) {\n            // Se cargan los datos de tipo queja\n            getApiTipoQueja();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"Externa\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"Interna\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            }\n          }\n\n          // Se carga cuando es Tutela\n          else if (valorValidar == 4) {\n            // Se cargan los datos de tipo queja\n            getApiTipoTutela();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"días\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"horas\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            }\n          }\n        }\n\n        // Se carga el estado\n        if (from.attributes.estado == 1) {\n          setArrayEstados({\n            label: 'Activo',\n            value: from.attributes.estado\n          });\n        } else {\n          setArrayEstados({\n            label: 'Inactivo',\n            value: from.attributes.estado\n          });\n        }\n\n        // Se deshabilita el cargando\n        window.showSpinner(false);\n      } else {\n        // Se carga los tipos de expediente por mensajes\n        cargarTipoExpedienteMensajes();\n      }\n    }\n    fetchData();\n  }, []);\n  const cargarTiposExpedientes = () => {\n    // Se inicializa el trycatch en caso de error de la api\n    try {\n      // Se inicializa el array general\n      var arrayGeneral = [];\n\n      // Buscamos los valores del array de los tipos de expedientes\n      GenericApi.getGeneric(\"mas-tipo-expediente\").then(datos => {\n        // Se valida que no haya ningun error\n        if (!datos.error) {\n          // Se valida que el array tenga mas de 0 elementos\n          if (datos[\"data\"].length > 0) {\n            // Se recorre el array de los tipo de expediente\n            for (let index = 0; index < datos.data.length; index++) {\n              // Se captura el valor por posicion\n              const element = datos.data[index];\n\n              // Se añade al array general\n              arrayGeneral.push({\n                label: element.attributes.nombre,\n                value: element.id\n              });\n            }\n\n            // Se añade el array general al array de los tipos de expedientes\n            setTipoExpediente(arrayGeneral);\n          }\n        } else {\n          setModalState({\n            title: \"Tipo expedientes\",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/TipoExpedientesMensajes',\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n\n  // Metodo encargado de traer los tipos de derecho de peticion\n  const getApiTipoDerechoPeticion = () => {\n    GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + 1).then(datos => {\n      // Se valida que no haya error en la API\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n\n  // Metodo encargado de traer los tipos de queja\n  const getApiTipoQueja = () => {\n    GenericApi.getGeneric(\"lista-tipo-queja\").then(datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n\n  // Metodo encargado de traer los tipos de tutela\n  const getApiTipoTutela = () => {\n    GenericApi.getGeneric(\"lista-terminos-respuesta/\" + 1).then(datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const cargarTipoExpedienteMensajes = () => {\n    // Se deshabilita el cargando\n    window.showSpinner(false);\n\n    // Se carga el metodo para cargar los tipos de expediente\n    cargarTiposExpedientes();\n  };\n  const obtenerParametros = () => {\n    try {\n      const data = {\n        \"data\": {\n          \"type\": 'mas_parametro',\n          \"attributes\": {\n            \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\n          }\n        }\n      };\n\n      // Buscamos el parametro\n      GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(datos => {\n        if (!datos.error) {\n          if (datos[\"data\"].length > 0) {\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]));\n          }\n        } else {\n          setModalState({\n            title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/AntecedentesForm',\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n  const enviarDatos = valores => {\n    // Se inicializa el array\n    let data;\n\n    // Se valida que se haya seleccionado un tipo de expediente\n    if (!getValueTipoExpediente.value) {\n      // Se redeclara el mensaje\n      setMensajeErrorTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n      return false;\n    } else if (getValueTipoExpediente.value) {\n      // Se redeclara el mensaje en null\n      setMensajeErrorTipoExpediente(null);\n\n      // Se inicializa el array\n      const arrayTiposExpedienteValidos = [1, 3, 4];\n      const numeroValidar = parseInt(getValueTipoExpediente.value);\n\n      // Se valida que este dentro de los que llevan sub tipo de expediente\n      if (arrayTiposExpedienteValidos.includes(numeroValidar)) {\n        // Se valida que se haya seleccionado un sub tipo de expediente\n        if (getValueSubTipoExpediente.value) {\n          // Se redeclara el mensaje\n          setMensajeErrorSubTipoExpediente(null);\n\n          // Se valida que se haya seleccionado el estado\n          if (getArrayEstados.value) {\n            // Se redeclara el mensaje\n            setMensajeErrorEstado(null);\n\n            // Se inicializa el array a enviar por post\n            data = {\n              \"data\": {\n                \"type\": \"mas_tipo_expediente_mensajes\",\n                \"attributes\": {\n                  \"mensaje\": valores.mensaje,\n                  \"id_tipo_expediente\": getValueTipoExpediente.value,\n                  \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\n                  \"estado\": getArrayEstados.value\n                }\n              }\n            };\n          } else {\n            // Se redeclara el mensaje\n            setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n            return false;\n          }\n        } else {\n          // Se redeclara el mensaje del sub tipo de expediente\n          setMensajeErrorSubTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n          return false;\n        }\n      } else {\n        // Se valida que se haya seleccionado el estado\n        if (getArrayEstados.value) {\n          // Se redeclara el mensaje\n          setMensajeErrorEstado(null);\n\n          // Se inicializa el array a enviar por post\n          data = {\n            \"data\": {\n              \"type\": \"mas_tipo_expediente_mensajes\",\n              \"attributes\": {\n                \"mensaje\": valores.mensaje,\n                \"id_tipo_expediente\": getValueTipoExpediente.value,\n                \"estado\": getArrayEstados.value\n              }\n            }\n          };\n        } else {\n          // Se redeclara el mensaje\n          setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n          return false;\n        }\n      }\n    }\n\n    // Se utiliza el cargando\n    window.showSpinner(true);\n\n    // Se inicializa la API\n    GenericApi.addGeneric('mas_tipo_expediente_mensajes', data).then(datos => {\n      // Se utiliza el cargando\n      window.showSpinner(false);\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: global.Constants.MENSAJES_MODAL.EXITOSO,\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          alert: global.Constants.TIPO_ALERTA.EXITO\n        });\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const actualizarDatos = valores => {\n    // Se inicializa el valor del id\n    const id = from.id;\n\n    // Se inicializa el array\n    let data;\n\n    // Se inicializa el array a enviar por post\n    data = {\n      \"data\": {\n        \"type\": \"mas_tipo_expediente_mensajes\",\n        \"attributes\": {\n          \"mensaje\": getMensajeTipoExpediente,\n          \"id_tipo_expediente\": getValueTipoExpediente.value,\n          \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\n          \"estado\": getArrayEstados.value\n        }\n      }\n    };\n\n    // Se utiliza el cargando\n    window.showSpinner(true);\n    GenericApi.updateGeneric('mas_tipo_expediente_mensajes', id, data).then(datos => {\n      // Se deshabilita el cargando\n      window.showSpinner(false);\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: global.Constants.MENSAJES_MODAL.EXITOSO,\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          alert: global.Constants.TIPO_ALERTA.EXITO\n        });\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const changeMensajeTipoExpediente = e => {\n    setMensajeTipoExpediente(e.target.value);\n    setCountTextArea(e.target.value.length);\n  };\n  const selectChangeTipoExpediente = v => {\n    // Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\n    if (from == null) {\n      // Se carga el tipo de expediente en el array del select\n      setArrayTipoExpediente(v);\n\n      // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\n      if (v.value == \"1\") {\n        // Derecho de peticion\n\n        // Se cargan los datos del derecho de peticion\n        getApiTipoDerechoPeticion();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"2\") {\n        // Poder referente\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      } else if (v.value == \"3\") {\n        // Queja\n\n        // Se cargan los datos del tipo de queja\n        getApiTipoQueja();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"4\") {\n        // Tutela\n\n        // Se cargan los datos del tipo de tutela\n        getApiTipoTutela();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      }\n    } else if (v != null) {\n      // Se carga el tipo de expediente en el array del select\n      setArrayTipoExpediente(v);\n\n      // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\n      if (v.value == \"1\") {\n        // Derecho de peticion\n\n        // Se cargan los datos del derecho de peticion\n        getApiTipoDerechoPeticion();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"2\") {\n        // Poder referente\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      } else if (v.value == \"3\") {\n        // Queja\n\n        // Se cargan los datos del tipo de queja\n        getApiTipoQueja();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"4\") {\n        // Tutela\n\n        // Se cargan los datos del tipo de tutela\n        getApiTipoTutela();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      }\n    } else {\n      // setErrorEtapa('Campo requerido');\n    }\n  };\n  const selectChangeSubTipoExpediente = v => {\n    // Se carga el tipo de expediente en el array del select\n    setArraySubTipoExpediente(v);\n  };\n  const selectChangeEstados = v => {\n    // Se carga el tipo de estado en el array del select\n    setArrayEstados(v);\n  };\n\n  // Metodo encargado de validar que no se ingresen caracteres invalidos\n  function containsSpecialChars(str) {\n    const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\n      if (str.includes(specialChar)) {\n        return true;\n      }\n      return false;\n    });\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(InfoErrorApi, {\n      error: errorApi\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: getModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        mensaje: ''\n      },\n      enableReinitialize: true,\n      validate: valores => {\n        // Se inicializa el array\n        let errores = {};\n        if (from != null) {\n          // Se valida que tenga valores\n          if (!getMensajeTipoExpediente) {\n            errores.mensaje = global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION;\n          }\n\n          // Se valida que tenga el minimo de caracteres ingresados\n          else if (getMensajeTipoExpediente.length <= getMinimoTextArea) {\n            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\n          }\n\n          // Se valida que exista\n          if (getMensajeTipoExpediente) {\n            // Se valida que contenga caracteres invalidos\n            if (containsSpecialChars(getMensajeTipoExpediente)) {\n              errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n            }\n          }\n        } else {\n          // Se setea el valor de la cantidad de letras escritas dentro del text\n          setCountTextArea(valores.mensaje.length);\n\n          // Se valida que tenga valores\n          if (!valores.mensaje) {\n            errores.mensaje = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n          }\n\n          // Se valida que tenga el minimo de caracteres ingresados\n          else if (valores.mensaje.length <= getMinimoTextArea) {\n            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\n          }\n\n          // Se valida que exista\n          if (valores.mensaje) {\n            // Se valida que contenga caracteres invalidos\n            if (containsSpecialChars(valores.mensaje)) {\n              errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n            }\n          }\n        }\n\n        // Se retorna los errores\n        return errores;\n      },\n      onSubmit: (valores, _ref) => {\n        let {\n          resetForm\n        } = _ref;\n        if (from != null) {\n          actualizarDatos(valores);\n        } else {\n          enviarDatos(valores);\n        }\n      },\n      children: _ref2 => {\n        let {\n          errors\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block block-rounded block-bordered\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block block-themed\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-12\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"block-content\",\n                  children: /*#__PURE__*/_jsxDEV(\"nav\", {\n                    \"aria-label\": \"breadcrumb\",\n                    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n                      className: \"breadcrumb breadcrumb-alt push\",\n                      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                        class: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                          children: \"Administraci\\xF3n\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 657,\n                          columnNumber: 78\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 657,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                        class: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                          children: \"Maestras\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 658,\n                          columnNumber: 78\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 658,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                        class: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                          underline: \"hover\",\n                          className: \"text-dark\",\n                          to: `/TipoExpedienteMensajes`,\n                          children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                            children: \"Lista mensajes por tipo de expediente\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 659,\n                            columnNumber: 156\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 659,\n                          columnNumber: 78\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 659,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                        class: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                          children: [from != null ? 'Actualizar' : 'Crear', \" mensaje por tipo de expediente\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 660,\n                          columnNumber: 78\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 660,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 656,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-header\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"block-title\",\n                  children: \"ADMINISTRACI\\xD3N :: CONFIGURACI\\xD3N DE MENSAJES EN TIPOS DE EXPEDIENTE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 666,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 665,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-12\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"mensaje\",\n                        children: \"DESCRIPCI\\xD3N DEL MENSAJE\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 674,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Field, {\n                        as: \"textarea\",\n                        className: \"form-control mt-2\",\n                        id: \"mensaje\",\n                        name: \"mensaje\",\n                        rows: \"6\",\n                        placeholder: \"Informaci\\xF3n para su solicitud....\",\n                        maxLength: getMaximoTextArea,\n                        minLength: getMinimoTextArea,\n                        value: getMensajeTipoExpediente,\n                        onChange: changeMensajeTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 675,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"text-right\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-primary\",\n                          children: [countTextArea, \" / \", getMaximoTextArea]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 687,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 686,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                        name: \"mensaje\",\n                        component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: errors.mensaje\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 689,\n                          columnNumber: 96\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 689,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 672,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 671,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-6\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"tipo_expediente\",\n                        children: [\"TIPO DE EXPEDIENTE\", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 695,\n                          columnNumber: 100\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 695,\n                        columnNumber: 49\n                      }, this), getValueTipoExpediente ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"tipo_expediente\",\n                        name: \"tipo_expediente\",\n                        isMulti: false,\n                        value: getValueTipoExpediente,\n                        placeholder: \"Selecciona\",\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getTipoExpediente.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeTipoExpediente(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 697,\n                        columnNumber: 53\n                      }, this) : null, getMensajeErrorTipoExpediente ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 711,\n                        columnNumber: 53\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 694,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 693,\n                    columnNumber: 41\n                  }, this), getHabilitarSubTipoExpediente != null ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"sub_tipo_expediente\",\n                        children: [\"SUB TIPO DE EXPEDIENTE\", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 720,\n                          columnNumber: 112\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 720,\n                        columnNumber: 53\n                      }, this), getValueSubTipoExpediente ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"sub_tipo_expediente\",\n                        name: \"sub_tipo_expediente\",\n                        isMulti: false,\n                        value: getValueSubTipoExpediente,\n                        placeholder: \"Selecciona\",\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getSubTipoExpediente.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeSubTipoExpediente(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 722,\n                        columnNumber: 57\n                      }, this) : null, getMensajeErrorSubTipoExpediente ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorSubTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 736,\n                        columnNumber: 57\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 719,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 718,\n                    columnNumber: 45\n                  }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"estado\",\n                        children: [\"ESTADO \", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 744,\n                          columnNumber: 80\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 744,\n                        columnNumber: 49\n                      }, this), getArrayEstados ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"estado\",\n                        name: \"estado\",\n                        isMulti: false,\n                        value: getArrayEstados,\n                        placeholder: \"Selecciona\",\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getListaEstados.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeEstados(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 746,\n                        columnNumber: 53\n                      }, this) : null, getMensajeErrorEstado ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorEstado\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 760,\n                        columnNumber: 53\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 743,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 742,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 669,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 652,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content block-content-full text-right bg-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-rounded btn-primary\",\n                children: from != null ? \"Actualizar\" : \"Crear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 769,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: '/TipoExpedienteMensajes',\n                className: \"font-size-h5 font-w600\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-rounded btn-outline-primary\",\n                  children: \"Cancelar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TipoExpedienteMensajesForm, \"XrozRvO1/15RXxC2w7vkct0T0Ts=\", false, function () {\n  return [useLocation];\n});\n_c = TipoExpedienteMensajesForm;\n;\nvar _c;\n$RefreshReg$(_c, \"TipoExpedienteMensajesForm\");","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Spinner","Link","GenericApi","useLocation","ModalGen","InfoErrorApi","Select","TipoExpedienteMensajesForm","getMinimoTextArea","setMinimoTextArea","getMaximoTextArea","setMaximoTextArea","errorApi","setErrorApi","getModalState","setModalState","title","message","show","countTextArea","setCountTextArea","getMensajeTipoExpediente","setMensajeTipoExpediente","getValueTipoExpediente","setArrayTipoExpediente","getTipoExpediente","setTipoExpediente","getHabilitarSubTipoExpediente","setHabilitarSubTipoExpediente","getValueSubTipoExpediente","setArraySubTipoExpediente","getSubTipoExpediente","setSubTipoExpediente","getArrayEstados","setArrayEstados","getMensajeErrorTipoExpediente","setMensajeErrorTipoExpediente","getMensajeErrorSubTipoExpediente","setMensajeErrorSubTipoExpediente","getMensajeErrorEstado","setMensajeErrorEstado","getListaEstados","value","label","location","from","state","fetchData","window","showSpinner","obtenerParametros","attributes","mensaje","length","cargarTiposExpedientes","tipo_expediente","nombre","id","arrayValidarTipoExpedientes","valorValidar","parseInt","includes","getApiTipoDerechoPeticion","id_sub_tipo_expediente","getApiTipoQueja","getApiTipoTutela","estado","cargarTipoExpedienteMensajes","arrayGeneral","getGeneric","then","datos","error","index","data","element","push","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","datosArray","getByDataGeneric","filter","map","filteredName","enviarDatos","valores","MENSAJE_ERROR","CAMPO_OBLIGATORIO","arrayTiposExpedienteValidos","numeroValidar","addGeneric","MENSAJES_MODAL","EXITOSO","EXITO","actualizarDatos","updateGeneric","changeMensajeTipoExpediente","e","target","selectChangeTipoExpediente","v","selectChangeSubTipoExpediente","selectChangeEstados","containsSpecialChars","str","result","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","errores","MENSAJE_INFORMATIVO","SELECCIONE_UNA_OPCION","ERROR_FORMATO_CARACTERES_INVALIDOS","resetForm","errors"],"sources":["C:/w2d/personeria/personeria-ui/src/components/Maestras/TipoExpedienteMensajesForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport Spinner from '../Utils/Spinner';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../Utils/Constants';\r\nimport ModalGen from '../Utils/Modals/ModalGeneric';\r\nimport InfoErrorApi from '../Utils/InfoErrorApi';\r\nimport Select from 'react-select';\r\n\r\nexport default function TipoExpedienteMensajesForm() {\r\n\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n\r\n    // Constantes para cargar los valores\r\n    const [getMensajeTipoExpediente, setMensajeTipoExpediente] = useState(\"\");\r\n    const [getValueTipoExpediente, setArrayTipoExpediente] = useState([]);\r\n    const [getTipoExpediente, setTipoExpediente] = useState([]);\r\n\r\n    // Constantes para los subtipos del expediente\r\n    const [getHabilitarSubTipoExpediente, setHabilitarSubTipoExpediente] = useState(null);\r\n\r\n    const [getValueSubTipoExpediente, setArraySubTipoExpediente] = useState([]);\r\n    const [getSubTipoExpediente, setSubTipoExpediente] = useState([]);\r\n    const [getArrayEstados, setArrayEstados] = useState([]);\r\n\r\n    const [getMensajeErrorTipoExpediente, setMensajeErrorTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorSubTipoExpediente, setMensajeErrorSubTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\r\n\r\n    const getListaEstados =\r\n        [\r\n            { value: '1', label: 'Activo' },\r\n            { value: '0', label: 'Inactivo' }\r\n        ];\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n\r\n            // Se habilita el cargando\r\n            window.showSpinner(true);\r\n\r\n            // Se carga la api de parametros permitidos\r\n            obtenerParametros();\r\n\r\n            if (from != null) {\r\n\r\n                // Se carga el mensaje y la longitud del mensaje\r\n                setMensajeTipoExpediente(from.attributes.mensaje);\r\n                setCountTextArea(from.attributes.mensaje.length);\r\n\r\n                // Se carga el tipo de expediente\r\n                cargarTiposExpedientes();\r\n                setArrayTipoExpediente({ label: from.attributes.tipo_expediente.nombre, value: from.attributes.tipo_expediente.id });\r\n\r\n                // Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\r\n                const arrayValidarTipoExpedientes = [1, 3, 4];\r\n                const valorValidar = parseInt(from.attributes.tipo_expediente.id);\r\n\r\n                // Se valida que exista dentro del que lleva sub tipo de expediente\r\n                if (arrayValidarTipoExpedientes.includes(valorValidar)) {\r\n\r\n                    // Se habilita el sub tipo de expediente\r\n                    setHabilitarSubTipoExpediente(true);\r\n\r\n                    // Se carga cuando es Derecho de peticion\r\n                    if (valorValidar == 1) {\r\n\r\n                        // Se cargan los datos del derecho de peticion\r\n                        getApiTipoDerechoPeticion();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Copias\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"General\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Alerta control político\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 3 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tipo Queja\r\n                    else if (valorValidar == 3) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoQueja();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Externa\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Interna\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tutela\r\n                    else if (valorValidar == 4) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoTutela();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"días\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"horas\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Se carga el estado\r\n                if (from.attributes.estado == 1) {\r\n                    setArrayEstados({ label: 'Activo', value: from.attributes.estado });\r\n                } else {\r\n                    setArrayEstados({ label: 'Inactivo', value: from.attributes.estado });\r\n                }\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            } else {\r\n\r\n                // Se carga los tipos de expediente por mensajes\r\n                cargarTipoExpedienteMensajes();\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const cargarTiposExpedientes = () => {\r\n\r\n        // Se inicializa el trycatch en caso de error de la api\r\n        try {\r\n\r\n            // Se inicializa el array general\r\n            var arrayGeneral = [];\r\n\r\n            // Buscamos los valores del array de los tipos de expedientes\r\n            GenericApi.getGeneric(\"mas-tipo-expediente\").then(\r\n                datos => {\r\n\r\n                    // Se valida que no haya ningun error\r\n                    if (!datos.error) {\r\n\r\n                        // Se valida que el array tenga mas de 0 elementos\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            // Se recorre el array de los tipo de expediente\r\n                            for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                                // Se captura el valor por posicion\r\n                                const element = datos.data[index];\r\n\r\n                                // Se añade al array general\r\n                                arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                            }\r\n\r\n                            // Se añade el array general al array de los tipos de expedientes\r\n                            setTipoExpediente(arrayGeneral);\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"Tipo expedientes\", message: datos.error.toString(), show: true, redirect: '/TipoExpedientesMensajes', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de derecho de peticion\r\n    const getApiTipoDerechoPeticion = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error en la API\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n\r\n                } else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/TipoExpedienteMensajes', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de queja\r\n    const getApiTipoQueja = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-queja\").then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de tutela\r\n    const getApiTipoTutela = () => {\r\n        GenericApi.getGeneric(\"lista-terminos-respuesta/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const cargarTipoExpedienteMensajes = () => {\r\n\r\n        // Se deshabilita el cargando\r\n        window.showSpinner(false);\r\n\r\n        // Se carga el metodo para cargar los tipos de expediente\r\n        cargarTiposExpedientes();\r\n    }\r\n\r\n    const obtenerParametros = () => {\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/AntecedentesForm', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se valida que se haya seleccionado un tipo de expediente\r\n        if (!getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje\r\n            setMensajeErrorTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n            return false;\r\n        } else if (getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje en null\r\n            setMensajeErrorTipoExpediente(null);\r\n\r\n            // Se inicializa el array\r\n            const arrayTiposExpedienteValidos = [1, 3, 4];\r\n            const numeroValidar = parseInt(getValueTipoExpediente.value);\r\n\r\n            // Se valida que este dentro de los que llevan sub tipo de expediente\r\n            if (arrayTiposExpedienteValidos.includes(numeroValidar)) {\r\n\r\n                // Se valida que se haya seleccionado un sub tipo de expediente\r\n                if (getValueSubTipoExpediente.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorSubTipoExpediente(null);\r\n\r\n                    // Se valida que se haya seleccionado el estado\r\n                    if (getArrayEstados.value) {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(null);\r\n\r\n                        // Se inicializa el array a enviar por post\r\n                        data = {\r\n                            \"data\": {\r\n                                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                                \"attributes\": {\r\n                                    \"mensaje\": valores.mensaje,\r\n                                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                                    \"estado\": getArrayEstados.value\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                        return false;\r\n                    }\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje del sub tipo de expediente\r\n                    setMensajeErrorSubTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                    return false;\r\n                }\r\n            } else {\r\n\r\n                // Se valida que se haya seleccionado el estado\r\n                if (getArrayEstados.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(null);\r\n\r\n                    // Se inicializa el array a enviar por post\r\n                    data = {\r\n                        \"data\": {\r\n                            \"type\": \"mas_tipo_expediente_mensajes\",\r\n                            \"attributes\": {\r\n                                \"mensaje\": valores.mensaje,\r\n                                \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                \"estado\": getArrayEstados.value\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.addGeneric('mas_tipo_expediente_mensajes', data).then(\r\n            datos => {\r\n\r\n                // Se utiliza el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const actualizarDatos = (valores) => {\r\n\r\n        // Se inicializa el valor del id\r\n        const id = from.id;\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                \"attributes\": {\r\n                    \"mensaje\": getMensajeTipoExpediente,\r\n                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        GenericApi.updateGeneric('mas_tipo_expediente_mensajes', id, data).then(\r\n            datos => {\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const changeMensajeTipoExpediente = (e) => {\r\n        setMensajeTipoExpediente(e.target.value);\r\n        setCountTextArea(e.target.value.length);\r\n    }\r\n\r\n    const selectChangeTipoExpediente = (v) => {\r\n\r\n        // Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\r\n        if (from == null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n        } else if (v != null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n        } else {\r\n            // setErrorEtapa('Campo requerido');\r\n        }\r\n    }\r\n\r\n    const selectChangeSubTipoExpediente = (v) => {\r\n\r\n        // Se carga el tipo de expediente en el array del select\r\n        setArraySubTipoExpediente(v);\r\n    }\r\n\r\n    const selectChangeEstados = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setArrayEstados(v);\r\n    }\r\n\r\n    // Metodo encargado de validar que no se ingresen caracteres invalidos\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<InfoErrorApi error={errorApi} />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    mensaje: '',\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                    // Se inicializa el array\r\n                    let errores = {};\r\n\r\n                    if (from != null) {\r\n\r\n                        // Se valida que tenga valores\r\n                        if (!getMensajeTipoExpediente) {\r\n                            errores.mensaje = global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION;\r\n                        }\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        else if (getMensajeTipoExpediente.length <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (getMensajeTipoExpediente) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(getMensajeTipoExpediente)) {\r\n                                errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se setea el valor de la cantidad de letras escritas dentro del text\r\n                        setCountTextArea(valores.mensaje.length);\r\n\r\n                        // Se valida que tenga valores\r\n                        if (!valores.mensaje) {\r\n                            errores.mensaje = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\r\n                        }\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        else if (valores.mensaje.length <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (valores.mensaje) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(valores.mensaje)) {\r\n                                errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Se retorna los errores\r\n                    return errores;\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n\r\n                    if (from != null) {\r\n                        actualizarDatos(valores);\r\n                    } else {\r\n                        enviarDatos(valores);\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"block block-rounded block-bordered\">\r\n                            <div className=\"block block-themed\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"block-content\">\r\n                                        <nav aria-label=\"breadcrumb\">\r\n                                            <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                                <li class=\"breadcrumb-item\"> <small>Administración</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>Maestras</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/TipoExpedienteMensajes`}> <small>Lista mensajes por tipo de expediente</small></Link></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>{from != null ? 'Actualizar' : 'Crear'} mensaje por tipo de expediente</small></li>\r\n                                            </ol>\r\n                                        </nav>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-header\">\r\n                                    <h3 className=\"block-title\">ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES EN TIPOS DE EXPEDIENTE</h3>\r\n                                </div>\r\n                                <div className=\"block-content\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                {/* <i className=\"fa fa-check text-success fa-2x mr-3\"></i> */}\r\n                                                <label htmlFor=\"mensaje\">DESCRIPCIÓN DEL MENSAJE</label>\r\n                                                <Field as=\"textarea\"\r\n                                                    className=\"form-control mt-2\"\r\n                                                    id=\"mensaje\"\r\n                                                    name=\"mensaje\"\r\n                                                    rows=\"6\"\r\n                                                    placeholder=\"Información para su solicitud....\"\r\n                                                    maxLength={getMaximoTextArea}\r\n                                                    minLength={getMinimoTextArea}\r\n                                                    value={getMensajeTipoExpediente}\r\n                                                    onChange={changeMensajeTipoExpediente}\r\n                                                ></Field>\r\n                                                <div className=\"text-right\">\r\n                                                    <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                                </div>\r\n                                                <ErrorMessage name=\"mensaje\" component={() => (<span className=\"text-danger\">{errors.mensaje}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"tipo_expediente\">TIPO DE EXPEDIENTE<span className=\"text-danger\">*</span></label>\r\n                                                {(getValueTipoExpediente) ?\r\n                                                    <Select\r\n                                                        id='tipo_expediente'\r\n                                                        name='tipo_expediente'\r\n                                                        isMulti={false}\r\n                                                        value={getValueTipoExpediente}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getTipoExpediente.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeTipoExpediente(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorTipoExpediente ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorTipoExpediente}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {getHabilitarSubTipoExpediente != null\r\n                                            ?\r\n                                            <div className=\"col-md-3\">\r\n                                                <div className=\"form-group\">\r\n                                                    <label htmlFor=\"sub_tipo_expediente\">SUB TIPO DE EXPEDIENTE<span className=\"text-danger\">*</span></label>\r\n                                                    {(getValueSubTipoExpediente) ?\r\n                                                        <Select\r\n                                                            id='sub_tipo_expediente'\r\n                                                            name='sub_tipo_expediente'\r\n                                                            isMulti={false}\r\n                                                            value={getValueSubTipoExpediente}\r\n                                                            placeholder=\"Selecciona\"\r\n                                                            noOptionsMessage={() => \"Sin datos\"}\r\n                                                            options={getSubTipoExpediente.map(e =>\r\n                                                                ({ label: e.label, value: e.value })\r\n                                                            )}\r\n                                                            onChange={(e) => selectChangeSubTipoExpediente(e)}\r\n                                                        />\r\n                                                        : null}\r\n                                                    {getMensajeErrorSubTipoExpediente ?\r\n                                                        <span className=\"text-danger\">{getMensajeErrorSubTipoExpediente}</span>\r\n                                                        : null}\r\n                                                </div>\r\n                                            </div>\r\n                                            : null}\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"estado\">ESTADO <span className=\"text-danger\">*</span></label>\r\n                                                {(getArrayEstados) ?\r\n                                                    <Select\r\n                                                        id='estado'\r\n                                                        name='estado'\r\n                                                        isMulti={false}\r\n                                                        value={getArrayEstados}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaEstados.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeEstados(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorEstado ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorEstado}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"block-content block-content-full text-right bg-light\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >\r\n                                    {from != null ? \"Actualizar\" : \"Crear\"}\r\n                                </button>\r\n                                <Link to={'/TipoExpedienteMensajes'} className=\"font-size-h5 font-w600\" >\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >Cancelar</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}