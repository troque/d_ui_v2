{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\Herramientas\\\\ActuacionParametrosPlantillaForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport DataTable from 'react-data-table-component';\nimport GenericApi from '../../Api/Services/GenericApi';\nimport ParametrosMasApi from \"../../Api/Services/ParametrosMasApi\";\nimport Spinner from '../../Utils/Spinner';\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\nimport '../../Utils/Constants';\nimport { getUser } from '../../Utils/Common';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ActuacionParametrosPlantillaForm(props) {\n  _s();\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  let radicado = from.radicado;\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n  let id_etapa = from.idEtapa;\n  const fechaRegistro = from.fechaRegistro;\n  const fechaIngreso = from.fechaIngreso;\n  const dependencia = getUser().nombre_dependencia ? getUser().nombre_dependencia.nombre : \"\";\n  const registradoPor = from.registradoPor;\n  const vigencia = from.vigencia;\n  const generadoPor = getUser().nombre_completo ? getUser().nombre_completo : \"\";\n  const [modalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [getListaParametros, setListaParametros] = useState();\n  const [getListaCamposPorParametroTemporal, setListaCamposPorParametroTemporal] = useState({\n    data: []\n  });\n  const [getListaCamposPorCamposTemporal, setListaCamposPorCamposTemporal] = useState({\n    data: []\n  });\n  //const [getListaCamposPorParametroDefinitiva, setListaCamposPorParametroDefinitiva] = useState({ data: [] });\n  const [getAntecedentesLista, setAntecedentesLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getInteresadosLista, setInteresadosLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getEntidadesInvestigadoLista, setEntidadesInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getCargosInvestigadoLista, setCargosInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getEntidadInvestigadoLista, setEntidadInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getParametrosCampos, setParametrosCampos] = useState();\n  const [getListaParametrosBaseDatos, setListaParametrosBaseDatos] = useState({\n    data: []\n  });\n  const [getPrueba, setPrueba] = useState(true);\n  const [getExistenDatosResultados, setExistenDatosResultados] = useState(true);\n  const [getCamposAdicionales, setCamposAdicionales] = useState([]);\n  const [getMaxDate, setMaxDate] = useState();\n  const [value, setValue] = useState(moment().format('YYYY-MM-DD'));\n  const [getIsLoading, setIsLoading] = useState(true);\n  let numeroLlamados = 0;\n  let numeroTotalLlamados = 3;\n\n  // Metodo encargado de cargar la informacion general del formulario\n  useEffect(() => {\n    // Se setea el maximo de fecha\n    setMaxDate(new Date().toISOString().split(\"T\")[0]);\n\n    // Se inicializa la funcion asyncrona\n    async function fetchData() {\n      // Metodo encargado de cargar los parametros de la plantilla\n      cargarTablaParametrosActuaciones();\n    }\n\n    // Se llama el metodo\n    fetchData();\n  }, [props.id_mas_actuacion]);\n\n  // Metodo encargado de cargar los parametros generales de la plantilla de la BD\n  const cargarTablaParametrosActuaciones = () => {\n    // Se inicializa el array\n    var array = [];\n\n    // Se inicializa la API\n    GenericApi.getGeneric('parametro-campos').then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se recorre el array para insertar los valores necesarios\n        for (let index = 0; index < datos.data.length; index++) {\n          // Se captura los datos por posicion\n          const element = datos.data[index].attributes;\n          const title = element.nombre_campo;\n          const estado = element.estado == \"1\" ? true : false;\n          const type = element.type;\n          const value = validarValueParametros(type, estado);\n\n          // Se añade el dato al array general\n          array.push({\n            title: title,\n            value: value,\n            type: type,\n            check: estado\n          });\n        }\n\n        // Se setea la respuesta en la constante\n        setListaParametrosBaseDatos(array);\n\n        // Se generan la lista de parametros del documento\n        cargarParametros(array);\n      }\n    });\n  };\n\n  // Metodo encargado de retorna el valor por el elemento\n  const validarValueParametros = (element, estado) => {\n    // Se inicializa la variable\n    let valor;\n\n    // Se valida por el elemento\n    if ((element == \"Sinproc\" || element == \"Número de radicado\" || element == \"Radicación\" || element == \"Radicado\") && estado) {\n      valor = radicado;\n    } else if (element == \"Usuario\" && estado) {\n      valor = registradoPor;\n    } else if ((element == \"Dependencia Origen\" || element == \"Dependencia\") && estado) {\n      valor = dependencia;\n    } else if (element == \"Vigencia\" && estado) {\n      valor = vigencia;\n    } else if (element == \"Fecha de Registro\" && estado) {\n      valor = fechaRegistro;\n    } else if (element == \"Fecha de Ingreso\" && estado) {\n      valor = fechaIngreso;\n    } else if (element == \"Generado\" && estado) {\n      valor = generadoPor;\n    } else if ((element == \"Número de auto (generado despues de aprobación)\" || element == \"Auto\") && estado) {\n      valor = \"${numero_de_auto}\";\n    }\n\n    // Se retorna el valor\n    return valor;\n  };\n  const handleChangeInteresados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getInteresadosLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setInteresadosLista(valorId);\n    let val = getInteresadosLista.map(p => {\n      if (p.checked == true) {\n        var primerApellido = p.attributes.primer_apellido != null ? p.attributes.primer_apellido : \"\";\n        var segundoApellido = p.attributes.segundo_apellido != null ? p.attributes.segundo_apellido : \"\";\n        var primerNombre = p.attributes.primer_nombre != null ? p.attributes.primer_nombre : \"\";\n        var segundoNombre = p.attributes.segundo_nombre != null ? p.attributes.segundo_nombre : \"\";\n        var sujetoProcesalNombre = p.attributes.sujeto_procesal_nombre != \"\" ? p.attributes.sujeto_procesal_nombre : \"\";\n        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n        var nombre = nombreCompleto;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  function checkeoAutomaticoInteresados(parametro, id_campo) {\n    setInteresadosLista(getInteresadosLista);\n    var primerApellido = getInteresadosLista[0].attributes.primer_apellido != null ? getInteresadosLista[0].attributes.primer_apellido : \"\";\n    var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != null ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\n    var primerNombre = getInteresadosLista[0].attributes.primer_nombre != null ? getInteresadosLista[0].attributes.primer_nombre : \"\";\n    var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != null ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\n    var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != null ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\n    var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n    var nombre = nombreCompleto;\n\n    // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoAntecedentes(parametro, id_campo) {\n    setAntecedentesLista(getAntecedentesLista);\n    var nombre = `${getAntecedentesLista[0].attributes.descripcion}`;\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosNombre(parametro, id_campo) {\n    setEntidadInvestigadoLista(getEntidadesInvestigadoLista);\n    var nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosCargo(parametro, id_campo) {\n    setCargosInvestigadoLista(getCargosInvestigadoLista);\n    var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosEntidad(parametro, id_campo) {\n    setEntidadesInvestigadoLista(getEntidadInvestigadoLista);\n    var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoFechaAntecedentes(parametro, id_campo) {\n    setAntecedentesLista(getAntecedentesLista);\n    var nombre = `${getAntecedentesLista[0].attributes.fecha_creado}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  const handleChangeAntecedentes = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getAntecedentesLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setAntecedentesLista(valorId);\n    let val = getAntecedentesLista.map(p => {\n      if (p.checked == true) {\n        var nombre = `${p.attributes.descripcion}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeFechaAntecedentes = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getAntecedentesLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setAntecedentesLista(valorId);\n    let val = getAntecedentesLista.map(p => {\n      if (p.checked == true) {\n        var nombre = `${p.attributes.fecha_creado}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getEntidadesInvestigadoLista.map(item => {\n      if (value == item.attributes.nombre_investigado) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setEntidadesInvestigadoLista(valorId);\n    let val = getEntidadesInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.nombre_investigado}`;\n        var nombre = `${p.attributes.nombre_investigado}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeCargosInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getCargosInvestigadoLista.map(item => {\n      if (value == item.attributes.cargo) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setCargosInvestigadoLista(valorId);\n    let val = getCargosInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.cargo}`;\n        var nombre = `${p.attributes.cargo}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeEntidadesInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getEntidadInvestigadoLista.map(item => {\n      if (value == item.attributes.nombre_entidad) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setCargosInvestigadoLista(valorId);\n    let val = getEntidadInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.nombre_entidad}`;\n        var nombre = `${p.attributes.nombre_entidad}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const selectAntecedentes = (parametro, id_campo) => {\n    if (Array.isArray(getAntecedentesLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getAntecedentesLista && getAntecedentesLista.length == 1) {\n        checkeoAutomaticoAntecedentes(parametro, id_campo);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getAntecedentesLista[0].id,\n            name: 'check' + getAntecedentesLista[0].id,\n            value: getAntecedentesLista[0].id\n            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\n            ,\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this), \" \", getAntecedentesLista[0].attributes.descripcion]\n        }, 'keyCheck' + getAntecedentesLista[0].id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this);\n      } else if (getAntecedentesLista.length > 1) {\n        return getAntecedentesLista.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-check-input\",\n              id: 'check' + item.id,\n              name: 'check' + item.id,\n              value: item.id,\n              onChange: e => handleChangeAntecedentes(e, parametro, id_campo),\n              defaultChecked: item.checked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 33\n            }, this), \" \", item.attributes.descripcion]\n          }, 'keyCheck' + item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 29\n          }, this)\n          // <option key={item.attributes.descripcion} value={item.attributes.descripcion}>{item.attributes.descripcion}</option>\n          ;\n        });\n      }\n    }\n  };\n\n  const selectFechaAntecedentes = (parametro, id_campo) => {\n    if (Array.isArray(getAntecedentesLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getAntecedentesLista && getAntecedentesLista.length == 1) {\n        checkeoAutomaticoFechaAntecedentes(parametro, id_campo);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getAntecedentesLista[0].attributes.fecha_creado,\n            name: 'check' + getAntecedentesLista[0].attributes.fecha_creado,\n            value: getAntecedentesLista[0].attributes.fecha_creado,\n            onChange: e => handleChangeFechaAntecedentes(0, parametro, id_campo),\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 25\n          }, this), \" \", getAntecedentesLista[0].attributes.fecha_creado]\n        }, 'keyCheck' + getAntecedentesLista[0].attributes.fecha_creado, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this);\n      } else if (getAntecedentesLista.length > 1) {\n        return getAntecedentesLista.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-check-input\",\n              id: 'check' + item.fecha_creado,\n              name: 'check' + item.fecha_creado,\n              value: item.fecha_creado\n              //onChange={(e) => handleChangeFechaAntecedentes(e, parametro, id_campo)}\n              ,\n              defaultChecked: item.checked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 33\n            }, this), \" \", item.attributes.fecha_creado]\n          }, 'keyCheck' + item.fecha_creado, true, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 29\n          }, this)\n          // <option key={item.attributes.descripcion} value={item.attributes.descripcion}>{item.attributes.descripcion}</option>\n          ;\n        });\n      }\n    }\n  };\n\n  const selectInteresados = (parametro, id_campo) => {\n    if (Array.isArray(getInteresadosLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getInteresadosLista && getInteresadosLista.length == 1) {\n        checkeoAutomaticoInteresados(parametro, id_campo);\n        var primerApellido = getInteresadosLista[0].attributes.primer_apellido != \"\" ? getInteresadosLista[0].attributes.primer_apellido : \"\";\n        var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != \"\" ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\n        var primerNombre = getInteresadosLista[0].attributes.primer_nombre != \"\" ? getInteresadosLista[0].attributes.primer_nombre : \"\";\n        var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != \"\" ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\n        var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != \"\" ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\n        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n        var nombre = nombreCompleto;\n\n        // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getInteresadosLista[0].id,\n            name: 'check' + getInteresadosLista[0].id,\n            value: getInteresadosLista[0].id\n            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\n            ,\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 25\n          }, this), \" \", nombre]\n        }, 'keyCheck' + getInteresadosLista[0].id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 21\n        }, this);\n      } else if (getInteresadosLista.length > 1) {\n        return getInteresadosLista.map((item, i) => {\n          var primerApellido = item.attributes.primer_apellido != null ? item.attributes.primer_apellido : \"\";\n          var segundoApellido = item.attributes.segundo_apellido != null ? item.attributes.segundo_apellido : \"\";\n          var primerNombre = item.attributes.primer_nombre != null ? item.attributes.primer_nombre : \"\";\n          var segundoNombre = item.attributes.segundo_nombre != null ? item.attributes.segundo_nombre : \"\";\n          var sujetoProcesalNombre = item.attributes.sujeto_procesal_nombre != \"\" ? item.attributes.sujeto_procesal_nombre : \"\";\n          var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n          var nombre = nombreCompleto;\n\n          // var nombre = `${item.attributes.sujeto_procesal_nombre} ${item.attributes.primer_apellido} ${item.attributes.segundo_apellido} ${item.attributes.primer_nombre} ${item.attributes.segundo_nombre}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-check-input\",\n              id: 'check' + nombre,\n              name: 'check' + nombre,\n              value: item.id,\n              onChange: e => handleChangeInteresados(e, parametro, id_campo),\n              defaultChecked: item.checked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 33\n            }, this), \" \", nombre]\n          }, 'keyCheck' + nombre, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 29\n          }, this)\n          // <option key={nombre} value={nombre}>{nombre}</option>\n          ;\n        });\n      }\n    }\n  };\n\n  const selectInvestigados = (parametro, id_campo) => {\n    if (Array.isArray(getEntidadesInvestigadoLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getEntidadesInvestigadoLista && getEntidadesInvestigadoLista.length == 1) {\n        checkeoAutomaticoInvestigadosNombre(parametro, id_campo);\n        let nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\n        if (nombre == \"null\") {\n          nombre = \"NO_APLICA\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getEntidadesInvestigadoLista[0].id,\n            name: 'check' + getEntidadesInvestigadoLista[0].id,\n            value: getEntidadesInvestigadoLista[0].id\n            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\n            ,\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 25\n          }, this), \" \", nombre]\n        }, 'keyCheck' + getEntidadesInvestigadoLista[0].id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }, this);\n      } else if (getEntidadesInvestigadoLista.length > 1) {\n        return getEntidadesInvestigadoLista.map((item, i) => {\n          var value = `${item.attributes.nombre_investigado}`;\n          var nombre = `${item.attributes.nombre_investigado}`;\n          if (nombre != \"null\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"form-check-input\",\n                id: nombre,\n                name: nombre,\n                value: nombre,\n                onChange: e => handleChangeInvestigados(e, parametro, id_campo),\n                defaultChecked: item.checked\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 37\n              }, this), \" \", nombre]\n            }, nombre, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 33\n            }, this)\n            //<option key={value} value={value}>{nombre}</option>\n            ;\n          }\n        });\n      }\n    }\n  };\n\n  const selectCargosInvestigados = (parametro, id_campo) => {\n    if (Array.isArray(getCargosInvestigadoLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getCargosInvestigadoLista && getCargosInvestigadoLista.length == 1) {\n        checkeoAutomaticoInvestigadosCargo(parametro, id_campo);\n        var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\n        if (nombre == \"null\") {\n          nombre = \"NO_APLICA\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getCargosInvestigadoLista[0].id,\n            name: 'check' + getCargosInvestigadoLista[0].id,\n            value: getCargosInvestigadoLista[0].id\n            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\n            ,\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 25\n          }, this), \" \", nombre]\n        }, 'keyCheck' + getCargosInvestigadoLista[0].id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 21\n        }, this);\n      } else if (getCargosInvestigadoLista.length > 1) {\n        return getCargosInvestigadoLista.map((item, i) => {\n          var value = `${item.attributes.cargo}`;\n          var nombre = `${item.attributes.cargo}`;\n          if (nombre != \"null\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"form-check-input\",\n                id: nombre,\n                name: nombre,\n                value: nombre,\n                onChange: e => handleChangeCargosInvestigados(e, parametro, id_campo),\n                defaultChecked: item.checked\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 37\n              }, this), \" \", nombre]\n            }, nombre, true, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 33\n            }, this)\n            // <option key={value} value={value}>{nombre}</option>\n            ;\n          }\n        });\n      }\n    }\n  };\n\n  const selectEntidadesInvestigados = (parametro, id_campo) => {\n    if (Array.isArray(getEntidadInvestigadoLista)) {\n      // Se valida que sea un array la lista y que su longitud sea igual a 1\n      if (getEntidadInvestigadoLista && getEntidadInvestigadoLista.length == 1) {\n        checkeoAutomaticoInvestigadosEntidad(parametro, id_campo);\n        var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\n        if (nombre == \"null\") {\n          nombre = \"NO_APLICA\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"form-check-input\",\n            id: 'check' + getEntidadInvestigadoLista[0].id,\n            name: 'check' + getEntidadInvestigadoLista[0].id,\n            value: getEntidadInvestigadoLista[0].id\n            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\n            ,\n            defaultChecked: true,\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 25\n          }, this), \" \", nombre]\n        }, 'keyCheck' + getEntidadInvestigadoLista[0].id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 21\n        }, this);\n      } else if (getEntidadInvestigadoLista.length > 1) {\n        return getEntidadInvestigadoLista.map((item, i) => {\n          var value = `${item.attributes.nombre_entidad}`;\n          var nombre = `${item.attributes.nombre_entidad}`;\n          if (nombre != \"null\") {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"form-check-input\",\n                id: nombre,\n                name: nombre,\n                value: nombre,\n                onChange: e => handleChangeEntidadesInvestigados(e, parametro, id_campo),\n                defaultChecked: item.checked\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 37\n              }, this), \" \", nombre]\n            }, nombre, true, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 33\n            }, this)\n            //<option key={value} value={value}>{nombre}</option>\n            ;\n          }\n        });\n      }\n    }\n  };\n\n  const onChangeValue = (value, dato, parametro, grupo, principal, pos) => {\n    const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\n    if (value) {\n      nuevosResultados.resultados[parametro][pos].seleccionar = true;\n    } else {\n      nuevosResultados.resultados[parametro][pos].seleccionar = false;\n    }\n    if (principal) {\n      const inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\n      // Deshabilitar los inputs seleccionados\n      inputs.forEach(input => {\n        input.disabled = !value;\n        let datosEnvio = input.id.split('$$$');\n        nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\n      });\n    }\n    setListaParametros(nuevosResultados);\n    modificarListaCampos(value, dato ? dato : 'SIN DATOS', parametro, pos);\n    removerInpuntsLista();\n  };\n  const modificarListaCampos = (value, dato, parametro, pos) => {\n    // console.log(\"Datos, parametros\", value, dato, parametro, pos)\n    let index = getListaCamposPorParametroTemporal.data.findIndex(data => data.param === parametro);\n    if (index > -1) {\n      if (getListaCamposPorParametroTemporal.data[index].value) {\n        let listaSplit = getListaCamposPorParametroTemporal.data[index].value.replace(/\\s/g, '').split('$$$');\n        let listaSplitIndex = getListaCamposPorParametroTemporal.data[index].orden.toString().split('$$$');\n        let listaSplitConEspacios = getListaCamposPorParametroTemporal.data[index].value.split('$$$');\n        let auxDato = dato.replace(/\\s/g, '');\n        if (value) {\n          getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + dato;\n          getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + pos;\n        } else {\n          getListaCamposPorParametroTemporal.data[index].value = null;\n          getListaCamposPorParametroTemporal.data[index].orden = null;\n          //listaSplit.forEach((element, indexElement) => {\n          listaSplitIndex.forEach((element, indexElement) => {\n            //if(auxDato !== element){\n            if (element !== pos + \"\") {\n              if (getListaCamposPorParametroTemporal.data[index].value === null) {\n                getListaCamposPorParametroTemporal.data[index].value = listaSplitConEspacios[indexElement];\n                getListaCamposPorParametroTemporal.data[index].orden = listaSplitIndex[indexElement];\n              } else {\n                getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + listaSplitConEspacios[indexElement];\n                getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + listaSplitIndex[indexElement];\n              }\n            }\n          });\n        }\n      } else {\n        if (value) {\n          getListaCamposPorParametroTemporal.data[index].value = dato;\n          getListaCamposPorParametroTemporal.data[index].orden = pos;\n        }\n      }\n      setListaCamposPorParametroTemporal(getListaCamposPorParametroTemporal);\n    } else {\n      if (value) {\n        const nuevoElemento = {\n          'param': parametro,\n          'value': dato,\n          'orden': pos\n        };\n\n        // Crear una copia del estado actual y agregar el nuevo elemento\n        const nuevaLista = [...getListaCamposPorParametroTemporal.data, nuevoElemento];\n\n        // Actualizar el estado con la nueva lista que contiene el nuevo elemento\n        setListaCamposPorParametroTemporal({\n          ...getListaCamposPorParametroTemporal,\n          data: nuevaLista\n        });\n      }\n    }\n  };\n  const removerInpuntsLista = () => {\n    if (getListaParametros && getListaParametros.params && getListaParametros.resultados) {\n      let grupos = [];\n      getListaParametros.params.forEach(parametro => {\n        if (getListaParametros.resultados[parametro] && Array.isArray(getListaParametros.resultados[parametro])) {\n          getListaParametros.resultados[parametro].forEach(resultado => {\n            grupos.push(resultado.grupo);\n          });\n        }\n        grupos = [...new Set(grupos)];\n      });\n      grupos.forEach(grupo => {\n        let inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\n        inputs.forEach(input => {\n          if (input.disabled) {\n            let datosEnvio = input.id.split('$$$');\n            modificarListaCampos(false, datosEnvio[0], datosEnvio[1], datosEnvio[2]);\n          }\n        });\n      });\n    }\n  };\n  const deshabilitarInputs = (etiqueta, estado, index) => {\n    // Seleccionar todos los inputs con name=\"nombre\"\n    const inputs = document.querySelectorAll('input[name=\"' + etiqueta + '\"]');\n    const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\n\n    // Deshabilitar los inputs seleccionados\n    inputs.forEach(input => {\n      input.disabled = estado;\n      let datosEnvio = input.id.split('$$$');\n      nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\n    });\n    setListaParametros(nuevosResultados);\n  };\n  const componentInputCheckBox = recorrido => {\n    if (recorrido) {\n      return recorrido.map((dato, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: dato.dato + \"$$$\" + dato.parametro + \"$$$\" + index,\n              name: dato.principal ? dato.grupo + \"_\" + dato.principal : dato.grupo,\n              type: \"checkbox\",\n              checked: dato.seleccionar,\n              onChange: e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 32\n            }, this), \" \", dato.dato ? dato.dato : 'SIN DATOS']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 21\n        }, this);\n      });\n    }\n  };\n  const cargarValoresDeParametro = parametro => {\n    var _getListaParametros$r;\n    if (getListaParametros !== null && getListaParametros !== void 0 && (_getListaParametros$r = getListaParametros.resultados) !== null && _getListaParametros$r !== void 0 && _getListaParametros$r[parametro]) {\n      var _getListaParametros$r2;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: componentInputCheckBox(getListaParametros === null || getListaParametros === void 0 ? void 0 : (_getListaParametros$r2 = getListaParametros.resultados) === null || _getListaParametros$r2 === void 0 ? void 0 : _getListaParametros$r2[parametro])\n      }, void 0, false);\n    }\n  };\n  const selectChangeListaCampos = (parametro, id_campo, value) => {\n    var newParams = getListaCamposPorParametroTemporal.data.map(item => {\n      if (item.parametro == parametro) {\n        item.id_campo = id_campo;\n        var itemCampo = getListaParametrosBaseDatos[id_campo];\n        item.valor = itemCampo.value != null ? itemCampo.value : value;\n        item.valorTemporal = itemCampo.value != null ? itemCampo.value : value;\n      }\n      return item;\n    });\n\n    //setListaCamposPorParametroDefinitiva({ data: newParams });\n  };\n\n  // Metodo encargado de generar las columnas de los parametros de la plantilla\n  const columnsParametros = [{\n    name: 'PARAMETROS DE LA PLANTILLA',\n    cell: parametro => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: parametro.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 782,\n      columnNumber: 32\n    }, this),\n    sortable: true,\n    width: \"30%\"\n  }, {\n    name: 'VALOR SELECCIONADO',\n    width: \"70%\",\n    cell: parametro => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: cargarValoresDeParametro(parametro)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 17\n    }, this)\n  }];\n\n  // Metodo encargado de generar las columnas de los parametros de la plantilla\n  const columnsCampos = [{\n    name: 'CAMPO',\n    cell: campo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: campo.nombreCampo ? campo.nombreCampo : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 17\n    }, this),\n    sortable: true,\n    width: \"15%\"\n  }, {\n    name: 'TIPO',\n    cell: campo => /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"form-control\",\n      id: `idCampo${campo.nombreCampo}`,\n      name: `name${campo.nombreCampo}`,\n      disabled: true,\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        value: validarTipoCampo(campo.tipoCampo),\n        selected: true,\n        children: [\" \", validarTipoCampo(campo.tipoCampo), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 17\n    }, this),\n    sortable: false,\n    width: \"25%\"\n  }, {\n    name: 'ITEMS',\n    width: \"50%\",\n    cell: campo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: cargarValoresCampos(campo)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 17\n    }, this)\n  }];\n\n  // Metodo encargado de setear el valor al mismo input\n  const changeTextInput = (e, arrayDatos) => {\n    // Se setea temporalmente\n    let elementoHtml = document.getElementById(e.target.name);\n    let nombreElemento = e.target.name;\n\n    // Se captura el valor escrito\n    let valor = e.target.value;\n\n    // El elemento existe\n    if (elementoHtml) {\n      // Se setea el nuevo valor\n      elementoHtml.title = valor;\n\n      // Se asigna el item dentro del array para enviarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n\n        // Se valida que la key sea igual al elemento modificado\n        if (key == nombreElemento) {\n          // Se añade el item\n          e.items = [valor];\n        }\n      });\n    }\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cambiar el valor de la fecha\n  const changeDateInput = e => {\n    // Se formatea\n    const newDate = moment(e.target.value).format('DD/MM/YYYY');\n\n    // Se captura el nombre del elemento\n    let nombreElemento = e.target.name;\n\n    // Se setea los valores\n    setValue(newDate);\n\n    // Se asigna el item dentro del array para enviarlo\n    getCamposAdicionales.forEach(e => {\n      // Se captura la key\n      let key = e.nombreCampo;\n\n      // Se valida que la key sea igual al elemento modificado\n      if (key == nombreElemento) {\n        // Se añade el item\n        e.items = [newDate];\n      }\n    });\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cambiar el valor del input\n  const changeCheckInput = (e, value) => {\n    // Se captura el elemento html\n    let nombreElemento = value;\n\n    // Se captura el elemento del check true o false\n    let checkeado = e.target.checked;\n\n    // Se captura el valor chequeado html\n    let valorCheck = e.target.value;\n\n    // Se valida cuando esta chequeado\n    if (checkeado == true) {\n      // Se asigna el item dentro del array para enviarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n\n        // Se valida que la key sea igual al elemento modificado\n        if (key == nombreElemento) {\n          // Se valida la primera vez\n          if (!e.itemsSeleccionado) {\n            // Se añade el item\n            e.itemsSeleccionado = [valorCheck];\n          } else {\n            // Se añade el item al array\n            e.itemsSeleccionado.push(valorCheck);\n          }\n        }\n      });\n    } else if (checkeado == false) {\n      // Se asigna el item dentro del array para quitarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n        let items = e.itemsSeleccionado ? e.itemsSeleccionado : [];\n\n        // Continua el proceso para quitarlo del array\n        if (items.length > 0 && key == nombreElemento) {\n          // Se busca la posicion del elemento\n          var index = items.indexOf(valorCheck);\n\n          // Se quita el elemento\n          items.splice(index, 1);\n        }\n      });\n    }\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cargar los valores de los campos\n  const cargarValoresCampos = campo => {\n    // Se inicializa la variable de campos\n    const campoParametro = campo;\n\n    // Se capturan la informacion del campo\n    const tipoCampo = campoParametro.tipoCampo;\n    const nombreCampo = campoParametro.nombreCampo;\n    const itemCampo = tipoCampo == 2 ? campoParametro.items : \"\";\n\n    // Se valida cuando el tipo campo es un listado\n    if (tipoCampo == 2) {\n      // Se retorna el mapeo\n      return (\n        // Se recorre el elemento\n        itemCampo.map((item, i) => {\n          // Se retorna el HTML\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-1 ml-2 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-check-input\",\n              id: item,\n              name: item,\n              value: item,\n              onChange: e => changeCheckInput(e, nombreCampo),\n              defaultChecked: item.checked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 980,\n              columnNumber: 29\n            }, this), \" \", item]\n          }, item, true, {\n            fileName: _jsxFileName,\n            lineNumber: 979,\n            columnNumber: 25\n          }, this);\n        })\n      );\n    } else if (tipoCampo == 1) {\n      // Se retorna el html del tipo fecha \n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-control custom-switch custom-control-lg mt-2 mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          id: nombreCampo,\n          name: nombreCampo,\n          onChange: changeDateInput,\n          max: getMaxDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 996,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 17\n      }, this);\n    } else if (tipoCampo == 0) {\n      // Se retorna el html del tipo texto\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-control custom-switch custom-control-lg mt-2 mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: nombreCampo,\n          name: nombreCampo,\n          placeholder: nombreCampo,\n          onChange: e => changeTextInput(e, campo)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  // Metodo encargado de retorna los items separados\n  const validarItems = item => {\n    // Se valida que exista y tenga un elemento\n    if (item && item.length == 0) {\n      // Se retorna el primer elemento\n      return item;\n    } else if (item && item.length > 0) {\n      // Se retorna por comas\n      return item.join(\", \");\n    }\n  };\n\n  // Metodo encargado de validar el tipo del campo\n  const validarTipoCampo = tipo => {\n    // Se inicializa la variable\n    let nombreRetornado;\n\n    // Se valida el tipo\n    if (tipo == 0) {\n      // Se redeclara la variable\n      nombreRetornado = \"Texto\";\n    } else if (tipo == 1) {\n      // Se redeclara la variable\n      nombreRetornado = \"Fecha\";\n    } else if (tipo == 2) {\n      // Se redeclara la variable\n      nombreRetornado = \"Lista\";\n    }\n\n    // Se retorna el valor\n    return nombreRetornado;\n  };\n\n  // Metodo encargado de cargar los parametros de la base de datos\n  const cargarParametros = listaParametrosBaseDatos => {\n    // Se setean los valores en null y vacios para que no salga el limitante de las hooks\n    setListaParametros(null);\n    setAntecedentesLista({\n      data: []\n    });\n    setInteresadosLista({\n      data: []\n    });\n    setEntidadesInvestigadoLista({\n      data: []\n    });\n    setCargosInvestigadoLista({\n      data: []\n    });\n    setEntidadInvestigadoLista({\n      data: []\n    });\n    setListaCamposPorParametroTemporal({\n      data: []\n    });\n    setListaParametros({\n      data: []\n    });\n\n    // Se inicializa el array\n    const data = {\n      \"data\": {\n        \"type\": 'mas_actuaciones',\n        \"attributes\": {\n          \"id\": props.id_mas_actuacion,\n          \"id_proceso_disciplinario\": from.procesoDisciplinarioId\n        }\n      }\n    };\n\n    // Se inicializa la API\n    GenericApi.getByDataGeneric('mas_actuaciones/parametros-plantilla/' + props.id_mas_actuacion + '/' + from.procesoDisciplinarioId, data).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se setean los valores a la lista general de parametros\n        setListaParametros(datos);\n        let existenDatos = false;\n        datos.params.forEach(element => {\n          if (Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0) {\n            existenDatos = true;\n          }\n        });\n        setExistenDatosResultados(existenDatos);\n        if (existenDatos && datos && datos.params && datos.resultados) {\n          const nuevoElemento = [];\n          datos.params.forEach(parametro => {\n            if (datos.resultados[parametro] && Array.isArray(datos.resultados[parametro])) {\n              datos.resultados[parametro].forEach((element, posicion) => {\n                //if (datos.resultados[parametro].length === 1 || (element && element.principal)) {\n                let index = nuevoElemento.findIndex(data => data.param === parametro);\n                if (index > -1) {\n                  nuevoElemento[index].value += \"$$$\" + (element.dato ? element.dato : 'SIN DATOS');\n                  nuevoElemento[index].orden += \"$$$\" + posicion;\n                } else {\n                  nuevoElemento.push({\n                    'param': parametro,\n                    'value': element.dato ? element.dato : 'SIN DATOS',\n                    'orden': posicion\n                  });\n                }\n                //}\n              });\n            }\n          });\n\n          setListaCamposPorParametroTemporal({\n            ...getListaCamposPorParametroTemporal,\n            data: nuevoElemento\n          });\n        }\n        window.showSpinner(false);\n      }\n    });\n\n    // Se inicializa la API\n    GenericApi.getGeneric('mas_actuaciones/' + props.id_mas_actuacion).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se valida que hayan campos adicionales\n        if (datos.data.attributes.campos.length > 0) {\n          // Se setean los valores a la lista\n          setCamposAdicionales(datos.data.attributes.campos);\n\n          // Se setean los campos en el from\n          from.campos = datos.data.attributes.campos;\n        } else if (from.campos) {\n          // Se setean los campos en el from\n          delete from.campos;\n        }\n      }\n    });\n\n    // Se quita el cargando\n    window.showSpinner(false);\n  };\n  const descargarArchivo = () => {\n    try {\n      window.showSpinner(true);\n      const data = {\n        \"data\": {\n          \"type\": \"mas_actuaciones\",\n          \"attributes\": {\n            \"params\": getListaCamposPorParametroTemporal.data\n          }\n        }\n      };\n      GenericApi.getByDataGeneric('mas_actuaciones/plantilla-diligenciada/' + props.id_mas_actuacion, data).then(datos => {\n        if (!datos.error) {\n          downloadBase64File(datos.content_type, datos.base_64, datos.file_name, global.Constants.TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES.DOCX);\n          window.showSpinner(false);\n        } else {\n          setModalState({\n            title: \"SINPROC No \" + radicado + \" :: \",\n            message: datos.error.toString(),\n            show: true,\n            redirect: null,\n            from: {\n              from\n            },\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  function downloadBase64File(contentType, base64Data, fileName, extension) {\n    const linkSource = `data:${contentType};base64,${base64Data}`;\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = linkSource;\n    downloadLink.download = fileName;\n    downloadLink.click();\n  }\n  const validacionSpinner = () => {\n    numeroLlamados++;\n    if (numeroLlamados >= numeroTotalLlamados) {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: modalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1219,\n      columnNumber: 13\n    }, this), getIsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"CARGANDO...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: getListaParametros != null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [getExistenDatosResultados == false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content alert-warning text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"LA PLANTILLA NO CUENTA CON PARAMETROS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1241,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1240,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1239,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1244,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"PAR\\xC1METROS DE LA PLANTILLA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1250,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1249,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12 mt-2 mb-2\",\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            className: \"table table-bordered table-striped table-vcenter js-dataTable-full\",\n            columns: columnsParametros,\n            data: getListaParametros.params,\n            noDataComponent: global.Constants.DATA_TABLE.SIN_DATOS_TABLE,\n            striped: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1253,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1252,\n          columnNumber: 37\n        }, this), getCamposAdicionales && getCamposAdicionales.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            style: {\n              marginTop: '50px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"CAMPOS ADICIONALES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1263,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1262,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-2 mb-2\",\n            children: /*#__PURE__*/_jsxDEV(DataTable, {\n              className: \"table table-bordered table-striped table-vcenter js-dataTable-full\",\n              columns: columnsCampos,\n              data: getCamposAdicionales,\n              noDataComponent: global.Constants.DATA_TABLE.SIN_DATOS_TABLE,\n              striped: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1266,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1265,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12 mt-4 mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"mr-2\",\n            htmlFor: \"documento_ruta\",\n            children: \"DESCARGAR DOCUMENTO PRE-DILIGENCIADO CON LOS VALORES SELECCIONADOS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1277,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            title: \"Descargar documento diligenciado\",\n            onClick: () => descargarArchivo(),\n            className: \"btn btn-rounded btn-primary\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-file-word\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1278,\n              columnNumber: 180\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1278,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1276,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12 mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"CARGANDO PAR\\xC1METROS DE LA PLANTILLA...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1283,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 29\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n}\n_s(ActuacionParametrosPlantillaForm, \"2xwoI+TQLI8qofcqFigG8ogPBx0=\", false, function () {\n  return [useLocation];\n});\n_c = ActuacionParametrosPlantillaForm;\nexport default ActuacionParametrosPlantillaForm;\nvar _c;\n$RefreshReg$(_c, \"ActuacionParametrosPlantillaForm\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","DataTable","GenericApi","ParametrosMasApi","Spinner","ModalGen","getUser","DatePicker","registerLocale","moment","ActuacionParametrosPlantillaForm","props","location","from","state","radicado","procesoDisciplinarioId","id_etapa","idEtapa","fechaRegistro","fechaIngreso","dependencia","nombre_dependencia","nombre","registradoPor","vigencia","generadoPor","nombre_completo","modalState","setModalState","title","message","show","getListaParametros","setListaParametros","getListaCamposPorParametroTemporal","setListaCamposPorParametroTemporal","data","getListaCamposPorCamposTemporal","setListaCamposPorCamposTemporal","getAntecedentesLista","setAntecedentesLista","links","meta","getInteresadosLista","setInteresadosLista","getEntidadesInvestigadoLista","setEntidadesInvestigadoLista","getCargosInvestigadoLista","setCargosInvestigadoLista","getEntidadInvestigadoLista","setEntidadInvestigadoLista","getParametrosCampos","setParametrosCampos","getListaParametrosBaseDatos","setListaParametrosBaseDatos","getPrueba","setPrueba","getExistenDatosResultados","setExistenDatosResultados","getCamposAdicionales","setCamposAdicionales","getMaxDate","setMaxDate","value","setValue","format","getIsLoading","setIsLoading","numeroLlamados","numeroTotalLlamados","Date","toISOString","split","fetchData","cargarTablaParametrosActuaciones","id_mas_actuacion","array","getGeneric","then","datos","validacionSpinner","error","index","length","element","attributes","nombre_campo","estado","type","validarValueParametros","push","check","cargarParametros","valor","handleChangeInteresados","e","parametro","id_campo","checked","target","valorId","map","item","id","val","p","primerApellido","primer_apellido","segundoApellido","segundo_apellido","primerNombre","primer_nombre","segundoNombre","segundo_nombre","sujetoProcesalNombre","sujeto_procesal_nombre","nombreCompleto","filter","x","undefined","selectChangeListaCampos","toString","checkeoAutomaticoInteresados","checkeoAutomaticoAntecedentes","descripcion","checkeoAutomaticoInvestigadosNombre","nombre_investigado","checkeoAutomaticoInvestigadosCargo","cargo","checkeoAutomaticoInvestigadosEntidad","nombre_entidad","checkeoAutomaticoFechaAntecedentes","fecha_creado","handleChangeAntecedentes","handleChangeFechaAntecedentes","handleChangeInvestigados","handleChangeCargosInvestigados","handleChangeEntidadesInvestigados","selectAntecedentes","Array","isArray","i","selectFechaAntecedentes","selectInteresados","selectInvestigados","selectCargosInvestigados","selectEntidadesInvestigados","onChangeValue","dato","grupo","principal","pos","nuevosResultados","JSON","parse","stringify","resultados","seleccionar","inputs","document","querySelectorAll","forEach","input","disabled","datosEnvio","modificarListaCampos","removerInpuntsLista","findIndex","param","listaSplit","replace","listaSplitIndex","orden","listaSplitConEspacios","auxDato","indexElement","nuevoElemento","nuevaLista","params","grupos","resultado","Set","deshabilitarInputs","etiqueta","componentInputCheckBox","recorrido","cargarValoresDeParametro","newParams","itemCampo","valorTemporal","columnsParametros","name","cell","toUpperCase","sortable","width","columnsCampos","campo","nombreCampo","validarTipoCampo","tipoCampo","cargarValoresCampos","changeTextInput","arrayDatos","elementoHtml","getElementById","nombreElemento","key","items","changeDateInput","newDate","changeCheckInput","checkeado","valorCheck","itemsSeleccionado","indexOf","splice","campoParametro","validarItems","join","tipo","nombreRetornado","listaParametrosBaseDatos","getByDataGeneric","existenDatos","posicion","window","showSpinner","campos","descargarArchivo","downloadBase64File","content_type","base_64","file_name","global","Constants","TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES","DOCX","redirect","alert","TIPO_ALERTA","ERROR","console","contentType","base64Data","fileName","extension","linkSource","downloadLink","createElement","href","download","click","DATA_TABLE","SIN_DATOS_TABLE","marginTop"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/Herramientas/ActuacionParametrosPlantillaForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\nimport DataTable from 'react-data-table-component';\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport ParametrosMasApi from \"../../Api/Services/ParametrosMasApi\";\r\nimport Spinner from '../../Utils/Spinner';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport '../../Utils/Constants';\r\nimport { getUser } from '../../Utils/Common';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport moment from 'moment';\r\n\r\nfunction ActuacionParametrosPlantillaForm(props) {\r\n    const location = useLocation()\r\n    const { from } = location.state\r\n    let radicado = from.radicado;\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n    let id_etapa = from.idEtapa;\r\n    const fechaRegistro = from.fechaRegistro;\r\n    const fechaIngreso = from.fechaIngreso;\r\n    const dependencia = getUser().nombre_dependencia ? getUser().nombre_dependencia.nombre : \"\";\r\n    const registradoPor = from.registradoPor;\r\n    const vigencia = from.vigencia;\r\n    const generadoPor = getUser().nombre_completo ? getUser().nombre_completo : \"\";\r\n\r\n    const [modalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [getListaParametros, setListaParametros] = useState();\r\n    const [getListaCamposPorParametroTemporal, setListaCamposPorParametroTemporal] = useState({ data: [] });\r\n    const [getListaCamposPorCamposTemporal, setListaCamposPorCamposTemporal] = useState({ data: [] });\r\n    //const [getListaCamposPorParametroDefinitiva, setListaCamposPorParametroDefinitiva] = useState({ data: [] });\r\n    const [getAntecedentesLista, setAntecedentesLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getInteresadosLista, setInteresadosLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getEntidadesInvestigadoLista, setEntidadesInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getCargosInvestigadoLista, setCargosInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getEntidadInvestigadoLista, setEntidadInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getParametrosCampos, setParametrosCampos] = useState();\r\n    const [getListaParametrosBaseDatos, setListaParametrosBaseDatos] = useState({ data: [] });\r\n    const [getPrueba, setPrueba] = useState(true);\r\n    const [getExistenDatosResultados, setExistenDatosResultados] = useState(true);\r\n\r\n    const [getCamposAdicionales, setCamposAdicionales] = useState([]);\r\n    const [getMaxDate, setMaxDate] = useState();\r\n    const [value, setValue] = useState(moment().format('YYYY-MM-DD'));\r\n    const [getIsLoading, setIsLoading] = useState(true);\r\n\r\n    let numeroLlamados = 0;\r\n    let numeroTotalLlamados = 3;\r\n\r\n    // Metodo encargado de cargar la informacion general del formulario\r\n    useEffect(() => {\r\n\r\n        // Se setea el maximo de fecha\r\n        setMaxDate(new Date().toISOString().split(\"T\")[0]);\r\n\r\n        // Se inicializa la funcion asyncrona\r\n        async function fetchData() {\r\n\r\n            // Metodo encargado de cargar los parametros de la plantilla\r\n            cargarTablaParametrosActuaciones();\r\n        }\r\n\r\n        // Se llama el metodo\r\n        fetchData();\r\n    }, [props.id_mas_actuacion]);\r\n\r\n    // Metodo encargado de cargar los parametros generales de la plantilla de la BD\r\n    const cargarTablaParametrosActuaciones = () => {\r\n\r\n        // Se inicializa el array\r\n        var array = [];\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric('parametro-campos').then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                validacionSpinner()\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se recorre el array para insertar los valores necesarios\r\n                    for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                        // Se captura los datos por posicion\r\n                        const element = datos.data[index].attributes;\r\n                        const title = element.nombre_campo;\r\n                        const estado = element.estado == \"1\" ? true : false;\r\n                        const type = element.type;\r\n                        const value = validarValueParametros(type, estado);\r\n\r\n                        // Se añade el dato al array general\r\n                        array.push({ title: title, value: value, type: type, check: estado });\r\n                    }\r\n\r\n                    // Se setea la respuesta en la constante\r\n                    setListaParametrosBaseDatos(array);\r\n\r\n                    // Se generan la lista de parametros del documento\r\n                    cargarParametros(array);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de retorna el valor por el elemento\r\n    const validarValueParametros = (element, estado) => {\r\n\r\n        // Se inicializa la variable\r\n        let valor;\r\n\r\n        // Se valida por el elemento\r\n        if ((element == \"Sinproc\" || element == \"Número de radicado\"\r\n            || element == \"Radicación\" || element == \"Radicado\") && estado) {\r\n            valor = radicado;\r\n        } else if (element == \"Usuario\" && estado) {\r\n            valor = registradoPor;\r\n        } else if ((element == \"Dependencia Origen\" || element == \"Dependencia\") && estado) {\r\n            valor = dependencia;\r\n        } else if (element == \"Vigencia\" && estado) {\r\n            valor = vigencia;\r\n        } else if (element == \"Fecha de Registro\" && estado) {\r\n            valor = fechaRegistro;\r\n        } else if (element == \"Fecha de Ingreso\" && estado) {\r\n            valor = fechaIngreso;\r\n        } else if (element == \"Generado\" && estado) {\r\n            valor = generadoPor;\r\n        } else if ((element == \"Número de auto (generado despues de aprobación)\" || element == \"Auto\") && estado) {\r\n            valor = \"${numero_de_auto}\";\r\n        }\r\n\r\n        // Se retorna el valor\r\n        return valor;\r\n    }\r\n\r\n    const handleChangeInteresados = (e, parametro, id_campo) => {\r\n\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getInteresadosLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setInteresadosLista(valorId);\r\n        let val = getInteresadosLista.map((p) => {\r\n            if (p.checked == true) {\r\n\r\n                var primerApellido = p.attributes.primer_apellido != null ? p.attributes.primer_apellido : \"\";\r\n                var segundoApellido = p.attributes.segundo_apellido != null ? p.attributes.segundo_apellido : \"\";\r\n                var primerNombre = p.attributes.primer_nombre != null ? p.attributes.primer_nombre : \"\";\r\n                var segundoNombre = p.attributes.segundo_nombre != null ? p.attributes.segundo_nombre : \"\";\r\n                var sujetoProcesalNombre = p.attributes.sujeto_procesal_nombre != \"\" ? p.attributes.sujeto_procesal_nombre : \"\";\r\n                var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n                var nombre = nombreCompleto;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n    }\r\n\r\n    function checkeoAutomaticoInteresados(parametro, id_campo) {\r\n        setInteresadosLista(getInteresadosLista);\r\n\r\n        var primerApellido = getInteresadosLista[0].attributes.primer_apellido != null ? getInteresadosLista[0].attributes.primer_apellido : \"\";\r\n        var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != null ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\r\n        var primerNombre = getInteresadosLista[0].attributes.primer_nombre != null ? getInteresadosLista[0].attributes.primer_nombre : \"\";\r\n        var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != null ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\r\n        var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != null ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\r\n        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n        var nombre = nombreCompleto;\r\n\r\n        // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoAntecedentes(parametro, id_campo) {\r\n        setAntecedentesLista(getAntecedentesLista);\r\n        var nombre = `${getAntecedentesLista[0].attributes.descripcion}`;\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosNombre(parametro, id_campo) {\r\n        setEntidadInvestigadoLista(getEntidadesInvestigadoLista);\r\n        var nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosCargo(parametro, id_campo) {\r\n        setCargosInvestigadoLista(getCargosInvestigadoLista);\r\n        var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosEntidad(parametro, id_campo) {\r\n        setEntidadesInvestigadoLista(getEntidadInvestigadoLista);\r\n        var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoFechaAntecedentes(parametro, id_campo) {\r\n        setAntecedentesLista(getAntecedentesLista);\r\n        var nombre = `${getAntecedentesLista[0].attributes.fecha_creado}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    const handleChangeAntecedentes = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getAntecedentesLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setAntecedentesLista(valorId);\r\n        let val = getAntecedentesLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var nombre = `${p.attributes.descripcion}`;\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeFechaAntecedentes = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getAntecedentesLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setAntecedentesLista(valorId);\r\n        let val = getAntecedentesLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var nombre = `${p.attributes.fecha_creado}`;\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getEntidadesInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.nombre_investigado) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setEntidadesInvestigadoLista(valorId);\r\n        let val = getEntidadesInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.nombre_investigado}`;\r\n                var nombre = `${p.attributes.nombre_investigado}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeCargosInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getCargosInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.cargo) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setCargosInvestigadoLista(valorId);\r\n        let val = getCargosInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.cargo}`;\r\n                var nombre = `${p.attributes.cargo}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeEntidadesInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getEntidadInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.nombre_entidad) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setCargosInvestigadoLista(valorId);\r\n        let val = getEntidadInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.nombre_entidad}`;\r\n                var nombre = `${p.attributes.nombre_entidad}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const selectAntecedentes = (parametro, id_campo) => {\r\n        if (Array.isArray(getAntecedentesLista)) {\r\n\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getAntecedentesLista && getAntecedentesLista.length == 1) {\r\n                checkeoAutomaticoAntecedentes(parametro, id_campo);\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getAntecedentesLista[0].id} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getAntecedentesLista[0].id}\r\n                            name={'check' + getAntecedentesLista[0].id}\r\n                            value={getAntecedentesLista[0].id}\r\n                            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {getAntecedentesLista[0].attributes.descripcion}\r\n                    </div >\r\n                )\r\n            } else if (getAntecedentesLista.length > 1) {\r\n                return (\r\n                    getAntecedentesLista.map((item, i) => {\r\n                        return (\r\n                            <div className=\"col-md-12\" key={'keyCheck' + item.id}>\r\n                                <input type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    id={'check' + item.id}\r\n                                    name={'check' + item.id}\r\n                                    value={item.id}\r\n                                    onChange={(e) => handleChangeAntecedentes(e, parametro, id_campo)}\r\n                                    defaultChecked={item.checked} /> {item.attributes.descripcion}\r\n                            </div>\r\n                            // <option key={item.attributes.descripcion} value={item.attributes.descripcion}>{item.attributes.descripcion}</option>\r\n                        )\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectFechaAntecedentes = (parametro, id_campo) => {\r\n        if (Array.isArray(getAntecedentesLista)) {\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getAntecedentesLista && getAntecedentesLista.length == 1) {\r\n                checkeoAutomaticoFechaAntecedentes(parametro, id_campo);\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getAntecedentesLista[0].attributes.fecha_creado} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getAntecedentesLista[0].attributes.fecha_creado}\r\n                            name={'check' + getAntecedentesLista[0].attributes.fecha_creado}\r\n                            value={getAntecedentesLista[0].attributes.fecha_creado}\r\n                            onChange={(e) => handleChangeFechaAntecedentes(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {getAntecedentesLista[0].attributes.fecha_creado}\r\n                    </div >\r\n                )\r\n            } else if (getAntecedentesLista.length > 1) {\r\n                return (\r\n                    getAntecedentesLista.map((item, i) => {\r\n                        return (\r\n                            <div className=\"col-md-12\" key={'keyCheck' + item.fecha_creado}>\r\n                                <input type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    id={'check' + item.fecha_creado}\r\n                                    name={'check' + item.fecha_creado}\r\n                                    value={item.fecha_creado}\r\n                                    //onChange={(e) => handleChangeFechaAntecedentes(e, parametro, id_campo)}\r\n                                    defaultChecked={item.checked} /> {item.attributes.fecha_creado}\r\n                            </div>\r\n                            // <option key={item.attributes.descripcion} value={item.attributes.descripcion}>{item.attributes.descripcion}</option>\r\n                        )\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectInteresados = (parametro, id_campo) => {\r\n        if (Array.isArray(getInteresadosLista)) {\r\n\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getInteresadosLista && getInteresadosLista.length == 1) {\r\n                checkeoAutomaticoInteresados(parametro, id_campo);\r\n\r\n                var primerApellido = getInteresadosLista[0].attributes.primer_apellido != \"\" ? getInteresadosLista[0].attributes.primer_apellido : \"\";\r\n                var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != \"\" ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\r\n                var primerNombre = getInteresadosLista[0].attributes.primer_nombre != \"\" ? getInteresadosLista[0].attributes.primer_nombre : \"\";\r\n                var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != \"\" ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\r\n                var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != \"\" ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\r\n                var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n                var nombre = nombreCompleto;\r\n\r\n                // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getInteresadosLista[0].id} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getInteresadosLista[0].id}\r\n                            name={'check' + getInteresadosLista[0].id}\r\n                            value={getInteresadosLista[0].id}\r\n                            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {nombre}\r\n                    </div >\r\n                )\r\n            } else if (getInteresadosLista.length > 1) {\r\n                return (\r\n                    getInteresadosLista.map((item, i) => {\r\n\r\n                        var primerApellido = item.attributes.primer_apellido != null ? item.attributes.primer_apellido : \"\";\r\n                        var segundoApellido = item.attributes.segundo_apellido != null ? item.attributes.segundo_apellido : \"\";\r\n                        var primerNombre = item.attributes.primer_nombre != null ? item.attributes.primer_nombre : \"\";\r\n                        var segundoNombre = item.attributes.segundo_nombre != null ? item.attributes.segundo_nombre : \"\";\r\n                        var sujetoProcesalNombre = item.attributes.sujeto_procesal_nombre != \"\" ? item.attributes.sujeto_procesal_nombre : \"\";\r\n                        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n                        var nombre = nombreCompleto;\r\n\r\n                        // var nombre = `${item.attributes.sujeto_procesal_nombre} ${item.attributes.primer_apellido} ${item.attributes.segundo_apellido} ${item.attributes.primer_nombre} ${item.attributes.segundo_nombre}`;\r\n                        return (\r\n                            <div className=\"col-md-12\" key={'keyCheck' + nombre}>\r\n                                <input type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    id={'check' + nombre}\r\n                                    name={'check' + nombre}\r\n                                    value={item.id}\r\n                                    onChange={(e) => handleChangeInteresados(e, parametro, id_campo)}\r\n                                    defaultChecked={item.checked} /> {nombre}\r\n                            </div>\r\n                            // <option key={nombre} value={nombre}>{nombre}</option>\r\n                        )\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectInvestigados = (parametro, id_campo) => {\r\n        if (Array.isArray(getEntidadesInvestigadoLista)) {\r\n\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getEntidadesInvestigadoLista && getEntidadesInvestigadoLista.length == 1) {\r\n                checkeoAutomaticoInvestigadosNombre(parametro, id_campo);\r\n                let nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\r\n                if (nombre == \"null\") {\r\n                    nombre = \"NO_APLICA\";\r\n                }\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getEntidadesInvestigadoLista[0].id} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getEntidadesInvestigadoLista[0].id}\r\n                            name={'check' + getEntidadesInvestigadoLista[0].id}\r\n                            value={getEntidadesInvestigadoLista[0].id}\r\n                            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {nombre}\r\n                    </div >\r\n                )\r\n            } else if (getEntidadesInvestigadoLista.length > 1) {\r\n\r\n                return (\r\n                    getEntidadesInvestigadoLista.map((item, i) => {\r\n                        var value = `${item.attributes.nombre_investigado}`;\r\n                        var nombre = `${item.attributes.nombre_investigado}`;\r\n\r\n                        if (nombre != \"null\") {\r\n                            return (\r\n                                <div className=\"col-md-12\" key={nombre}>\r\n                                    <input type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        id={nombre}\r\n                                        name={nombre}\r\n                                        value={nombre}\r\n                                        onChange={(e) => handleChangeInvestigados(e, parametro, id_campo)}\r\n                                        defaultChecked={item.checked} /> {nombre}\r\n                                </div>\r\n                                //<option key={value} value={value}>{nombre}</option>\r\n                            )\r\n                        }\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectCargosInvestigados = (parametro, id_campo) => {\r\n        if (Array.isArray(getCargosInvestigadoLista)) {\r\n\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getCargosInvestigadoLista && getCargosInvestigadoLista.length == 1) {\r\n                checkeoAutomaticoInvestigadosCargo(parametro, id_campo);\r\n                var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\r\n                if (nombre == \"null\") {\r\n                    nombre = \"NO_APLICA\";\r\n                }\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getCargosInvestigadoLista[0].id} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getCargosInvestigadoLista[0].id}\r\n                            name={'check' + getCargosInvestigadoLista[0].id}\r\n                            value={getCargosInvestigadoLista[0].id}\r\n                            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {nombre}\r\n                    </div >\r\n                )\r\n            } else if (getCargosInvestigadoLista.length > 1) {\r\n\r\n                return (\r\n                    getCargosInvestigadoLista.map((item, i) => {\r\n                        var value = `${item.attributes.cargo}`;\r\n                        var nombre = `${item.attributes.cargo}`;\r\n\r\n                        if (nombre != \"null\") {\r\n                            return (\r\n                                <div className=\"col-md-12\" key={nombre}>\r\n                                    <input type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        id={nombre}\r\n                                        name={nombre}\r\n                                        value={nombre}\r\n                                        onChange={(e) => handleChangeCargosInvestigados(e, parametro, id_campo)}\r\n                                        defaultChecked={item.checked} /> {nombre}\r\n                                </div>\r\n                                // <option key={value} value={value}>{nombre}</option>\r\n                            )\r\n                        }\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const selectEntidadesInvestigados = (parametro, id_campo) => {\r\n        if (Array.isArray(getEntidadInvestigadoLista)) {\r\n\r\n            // Se valida que sea un array la lista y que su longitud sea igual a 1\r\n            if (getEntidadInvestigadoLista && getEntidadInvestigadoLista.length == 1) {\r\n                checkeoAutomaticoInvestigadosEntidad(parametro, id_campo);\r\n                var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\r\n                if (nombre == \"null\") {\r\n                    nombre = \"NO_APLICA\";\r\n                }\r\n                return (\r\n                    <div className=\"col-md-12\" key={'keyCheck' + getEntidadInvestigadoLista[0].id} >\r\n                        <input type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id={'check' + getEntidadInvestigadoLista[0].id}\r\n                            name={'check' + getEntidadInvestigadoLista[0].id}\r\n                            value={getEntidadInvestigadoLista[0].id}\r\n                            //onChange={(e) => handleChangeInteresados(0, parametro, id_campo)}\r\n                            defaultChecked={true}\r\n                            disabled /> {nombre}\r\n                    </div >\r\n                )\r\n            } else if (getEntidadInvestigadoLista.length > 1) {\r\n\r\n                return (\r\n                    getEntidadInvestigadoLista.map((item, i) => {\r\n                        var value = `${item.attributes.nombre_entidad}`;\r\n                        var nombre = `${item.attributes.nombre_entidad}`;\r\n\r\n                        if (nombre != \"null\") {\r\n                            return (\r\n                                <div className=\"col-md-12\" key={nombre}>\r\n                                    <input type=\"checkbox\"\r\n                                        className=\"form-check-input\"\r\n                                        id={nombre}\r\n                                        name={nombre}\r\n                                        value={nombre}\r\n                                        onChange={(e) => handleChangeEntidadesInvestigados(e, parametro, id_campo)}\r\n                                        defaultChecked={item.checked} /> {nombre}\r\n                                </div>\r\n                                //<option key={value} value={value}>{nombre}</option>\r\n                            )\r\n                        }\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    const onChangeValue = (value, dato, parametro, grupo, principal, pos) => {\r\n\r\n        const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\r\n\r\n        if (value) {\r\n            nuevosResultados.resultados[parametro][pos].seleccionar = true;\r\n        } \r\n        else {\r\n            nuevosResultados.resultados[parametro][pos].seleccionar = false;\r\n        }\r\n\r\n        if(principal){\r\n            const inputs = document.querySelectorAll('input[name=\"'+grupo+'\"]');\r\n            // Deshabilitar los inputs seleccionados\r\n            inputs.forEach(input => {\r\n                input.disabled = !value;\r\n                let datosEnvio = input.id.split('$$$');\r\n                nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\r\n            });\r\n        }\r\n\r\n        setListaParametros(nuevosResultados);\r\n        \r\n        modificarListaCampos(value, (dato ? dato : 'SIN DATOS'), parametro, pos)\r\n        removerInpuntsLista()\r\n    }\r\n\r\n    const modificarListaCampos = (value, dato, parametro, pos) => {\r\n        // console.log(\"Datos, parametros\", value, dato, parametro, pos)\r\n        let index = getListaCamposPorParametroTemporal.data.findIndex(data => data.param === parametro)\r\n        if(index > -1){\r\n            if(getListaCamposPorParametroTemporal.data[index].value){\r\n                let listaSplit = getListaCamposPorParametroTemporal.data[index].value.replace(/\\s/g, '').split('$$$')\r\n                let listaSplitIndex = getListaCamposPorParametroTemporal.data[index].orden.toString().split('$$$')\r\n                let listaSplitConEspacios = getListaCamposPorParametroTemporal.data[index].value.split('$$$')\r\n                let auxDato = dato.replace(/\\s/g, '')\r\n                if(value){\r\n                    getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + dato\r\n                    getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + pos\r\n                }\r\n                else{\r\n                    getListaCamposPorParametroTemporal.data[index].value = null\r\n                    getListaCamposPorParametroTemporal.data[index].orden = null\r\n                    //listaSplit.forEach((element, indexElement) => {\r\n                    listaSplitIndex.forEach((element, indexElement) => {\r\n                        //if(auxDato !== element){\r\n                        if(element !== pos+\"\"){\r\n                            if(getListaCamposPorParametroTemporal.data[index].value === null){\r\n                                getListaCamposPorParametroTemporal.data[index].value = listaSplitConEspacios[indexElement]\r\n                                getListaCamposPorParametroTemporal.data[index].orden = listaSplitIndex[indexElement]\r\n                            }\r\n                            else{\r\n                                getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + listaSplitConEspacios[indexElement]\r\n                                getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + listaSplitIndex[indexElement]\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else{\r\n                if(value){\r\n                    getListaCamposPorParametroTemporal.data[index].value = dato\r\n                    getListaCamposPorParametroTemporal.data[index].orden = pos\r\n                }\r\n            }           \r\n            setListaCamposPorParametroTemporal(getListaCamposPorParametroTemporal)\r\n        }\r\n        else{\r\n            if(value){\r\n                const nuevoElemento = { \r\n                    'param': parametro,\r\n                    'value': dato, \r\n                    'orden': pos\r\n                }\r\n    \r\n                // Crear una copia del estado actual y agregar el nuevo elemento\r\n                const nuevaLista = [...getListaCamposPorParametroTemporal.data, nuevoElemento]\r\n    \r\n                // Actualizar el estado con la nueva lista que contiene el nuevo elemento\r\n                setListaCamposPorParametroTemporal({ ...getListaCamposPorParametroTemporal, data: nuevaLista })\r\n            }\r\n        }\r\n    } \r\n\r\n    const removerInpuntsLista = () => {\r\n        if (getListaParametros && getListaParametros.params && getListaParametros.resultados) {\r\n            let grupos = [];\r\n            getListaParametros.params.forEach(parametro => {\r\n                if (getListaParametros.resultados[parametro] && Array.isArray(getListaParametros.resultados[parametro])) {\r\n                    getListaParametros.resultados[parametro].forEach(resultado => {\r\n                        grupos.push(resultado.grupo);\r\n                    });\r\n                }\r\n                grupos = [...new Set(grupos)];\r\n            });\r\n    \r\n            grupos.forEach(grupo => {\r\n                let inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\r\n                inputs.forEach(input => {\r\n                    if (input.disabled) {\r\n                        let datosEnvio = input.id.split('$$$');\r\n                        modificarListaCampos(false, datosEnvio[0], datosEnvio[1], datosEnvio[2]);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const deshabilitarInputs = (etiqueta, estado, index) => {\r\n        // Seleccionar todos los inputs con name=\"nombre\"\r\n        const inputs = document.querySelectorAll('input[name=\"'+etiqueta+'\"]');\r\n    \r\n        const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\r\n\r\n        // Deshabilitar los inputs seleccionados\r\n        inputs.forEach(input => {\r\n            input.disabled = estado;\r\n            let datosEnvio = input.id.split('$$$');\r\n            nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\r\n        });\r\n\r\n        setListaParametros(nuevosResultados);\r\n\r\n    };\r\n\r\n    const componentInputCheckBox = (recorrido) => {\r\n        if(recorrido){\r\n            return (recorrido.map((dato, index) => {\r\n                return (                \r\n                    <div key={index}>\r\n                        <label><input id={dato.dato+\"$$$\"+dato.parametro+\"$$$\"+index} name={dato.principal ? dato.grupo+\"_\"+dato.principal : dato.grupo} type=\"checkbox\" checked={dato.seleccionar} onChange={e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)}/> { dato.dato ? dato.dato : 'SIN DATOS' }</label>\r\n                    </div>\r\n                )\r\n            }))\r\n        }\r\n    }\r\n\r\n    const cargarValoresDeParametro = (parametro) => {\r\n        if(getListaParametros?.resultados?.[parametro]){\r\n            return (<>{componentInputCheckBox(getListaParametros?.resultados?.[parametro])}</>)\r\n        }\r\n    }\r\n\r\n    const selectChangeListaCampos = (parametro, id_campo, value) => {\r\n\r\n        var newParams = getListaCamposPorParametroTemporal.data.map(item => {\r\n\r\n            if (item.parametro == parametro) {\r\n                item.id_campo = id_campo;\r\n                var itemCampo = getListaParametrosBaseDatos[id_campo];\r\n\r\n                item.valor = (itemCampo.value != null) ? itemCampo.value : value;\r\n                item.valorTemporal = (itemCampo.value != null) ? itemCampo.value : value;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        //setListaCamposPorParametroDefinitiva({ data: newParams });\r\n    }\r\n\r\n    // Metodo encargado de generar las columnas de los parametros de la plantilla\r\n    const columnsParametros = [\r\n        {\r\n            name: 'PARAMETROS DE LA PLANTILLA',\r\n            cell: parametro => <div><strong>{parametro.toUpperCase()}</strong></div>,\r\n            sortable: true,\r\n            width: \"30%\"\r\n        },\r\n        {\r\n            name: 'VALOR SELECCIONADO',\r\n            width: \"70%\",\r\n            cell: parametro =>\r\n                <div className='row'>\r\n                    <div className='col'>\r\n                        { cargarValoresDeParametro(parametro) }\r\n                    </div>\r\n                </div>\r\n        },\r\n    ];\r\n\r\n    // Metodo encargado de generar las columnas de los parametros de la plantilla\r\n    const columnsCampos = [\r\n        {\r\n            name: 'CAMPO',\r\n            cell: campo =>\r\n                <div>\r\n                    <strong>{campo.nombreCampo ? campo.nombreCampo : \"\"}</strong>\r\n                </div>,\r\n            sortable: true,\r\n            width: \"15%\"\r\n        },\r\n        {\r\n            name: 'TIPO',\r\n            cell: campo =>\r\n                <select className=\"form-control\" id={`idCampo${campo.nombreCampo}`} name={`name${campo.nombreCampo}`} disabled>\r\n                    <option value={validarTipoCampo(campo.tipoCampo)} selected> {validarTipoCampo(campo.tipoCampo)} </option>\r\n                </select>\r\n            ,\r\n            sortable: false,\r\n            width: \"25%\",\r\n        },\r\n        {\r\n            name: 'ITEMS',\r\n            width: \"50%\",\r\n            cell: campo =>\r\n                <div className='row'>\r\n                    <div className='col'>\r\n                        {cargarValoresCampos(campo)}\r\n                    </div>\r\n                </div>\r\n        },\r\n    ];\r\n\r\n    // Metodo encargado de setear el valor al mismo input\r\n    const changeTextInput = (e, arrayDatos) => {\r\n\r\n        // Se setea temporalmente\r\n        let elementoHtml = document.getElementById(e.target.name);\r\n        let nombreElemento = e.target.name;\r\n\r\n        // Se captura el valor escrito\r\n        let valor = e.target.value;\r\n\r\n        // El elemento existe\r\n        if (elementoHtml) {\r\n\r\n            // Se setea el nuevo valor\r\n            elementoHtml.title = valor;\r\n\r\n            // Se asigna el item dentro del array para enviarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n\r\n                // Se valida que la key sea igual al elemento modificado\r\n                if (key == nombreElemento) {\r\n\r\n                    // Se añade el item\r\n                    e.items = [valor];\r\n                }\r\n            })\r\n        }\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    }\r\n\r\n    // Metodo encargado de cambiar el valor de la fecha\r\n    const changeDateInput = (e) => {\r\n\r\n        // Se formatea\r\n        const newDate = moment(e.target.value).format('DD/MM/YYYY');\r\n\r\n        // Se captura el nombre del elemento\r\n        let nombreElemento = e.target.name;\r\n\r\n        // Se setea los valores\r\n        setValue(newDate);\r\n\r\n        // Se asigna el item dentro del array para enviarlo\r\n        getCamposAdicionales.forEach(e => {\r\n\r\n            // Se captura la key\r\n            let key = e.nombreCampo;\r\n\r\n            // Se valida que la key sea igual al elemento modificado\r\n            if (key == nombreElemento) {\r\n\r\n                // Se añade el item\r\n                e.items = [newDate];\r\n            }\r\n        })\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    };\r\n\r\n    // Metodo encargado de cambiar el valor del input\r\n    const changeCheckInput = (e, value) => {\r\n\r\n        // Se captura el elemento html\r\n        let nombreElemento = value;\r\n\r\n        // Se captura el elemento del check true o false\r\n        let checkeado = e.target.checked;\r\n\r\n        // Se captura el valor chequeado html\r\n        let valorCheck = e.target.value;\r\n\r\n        // Se valida cuando esta chequeado\r\n        if (checkeado == true) {\r\n\r\n            // Se asigna el item dentro del array para enviarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n\r\n                // Se valida que la key sea igual al elemento modificado\r\n                if (key == nombreElemento) {\r\n\r\n                    // Se valida la primera vez\r\n                    if (!e.itemsSeleccionado) {\r\n\r\n                        // Se añade el item\r\n                        e.itemsSeleccionado = [valorCheck];\r\n                    } else {\r\n\r\n                        // Se añade el item al array\r\n                        e.itemsSeleccionado.push(valorCheck);\r\n                    }\r\n                }\r\n            })\r\n        } else if (checkeado == false) {\r\n\r\n            // Se asigna el item dentro del array para quitarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n                let items = e.itemsSeleccionado ? e.itemsSeleccionado : [];\r\n\r\n                // Continua el proceso para quitarlo del array\r\n                if (items.length > 0 && (key == nombreElemento)) {\r\n\r\n                    // Se busca la posicion del elemento\r\n                    var index = items.indexOf(valorCheck);\r\n\r\n                    // Se quita el elemento\r\n                    items.splice(index, 1);\r\n                }\r\n            })\r\n        }\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    }\r\n\r\n    // Metodo encargado de cargar los valores de los campos\r\n    const cargarValoresCampos = (campo) => {\r\n\r\n        // Se inicializa la variable de campos\r\n        const campoParametro = campo;\r\n\r\n        // Se capturan la informacion del campo\r\n        const tipoCampo = campoParametro.tipoCampo;\r\n        const nombreCampo = campoParametro.nombreCampo;\r\n        const itemCampo = tipoCampo == 2 ? campoParametro.items : \"\";\r\n\r\n        // Se valida cuando el tipo campo es un listado\r\n        if (tipoCampo == 2) {\r\n\r\n            // Se retorna el mapeo\r\n            return (\r\n\r\n                // Se recorre el elemento\r\n                itemCampo.map((item, i) => {\r\n\r\n                    // Se retorna el HTML\r\n                    return (\r\n                        <div className=\"col-md-12 mt-1 ml-2 mb-1\" key={item}>\r\n                            <input type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id={item}\r\n                                name={item}\r\n                                value={item}\r\n                                onChange={(e) => changeCheckInput(e, nombreCampo)}\r\n                                defaultChecked={item.checked} /> {item}\r\n                        </div>\r\n                    )\r\n                })\r\n            )\r\n        } else if (tipoCampo == 1) {\r\n\r\n            // Se retorna el html del tipo fecha \r\n            return (\r\n                <div className=\"custom-control custom-switch custom-control-lg mt-2 mb-2\">\r\n                    <input type=\"date\"\r\n                        className=\"form-control\"\r\n                        id={nombreCampo}\r\n                        name={nombreCampo}\r\n                        onChange={changeDateInput}\r\n                        max={getMaxDate}\r\n                    />\r\n                </div>\r\n            )\r\n        } else if (tipoCampo == 0) {\r\n\r\n            // Se retorna el html del tipo texto\r\n            return (\r\n                <div className=\"custom-control custom-switch custom-control-lg mt-2 mb-2\">\r\n                    <input type=\"text\"\r\n                        className=\"form-control\"\r\n                        id={nombreCampo}\r\n                        name={nombreCampo}\r\n                        placeholder={nombreCampo}\r\n                        onChange={e => changeTextInput(e, campo)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de retorna los items separados\r\n    const validarItems = (item) => {\r\n\r\n        // Se valida que exista y tenga un elemento\r\n        if (item && item.length == 0) {\r\n\r\n            // Se retorna el primer elemento\r\n            return item;\r\n        } else if (item && item.length > 0) {\r\n\r\n            // Se retorna por comas\r\n            return item.join(\", \");\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de validar el tipo del campo\r\n    const validarTipoCampo = (tipo) => {\r\n\r\n        // Se inicializa la variable\r\n        let nombreRetornado;\r\n\r\n        // Se valida el tipo\r\n        if (tipo == 0) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Texto\";\r\n        } else if (tipo == 1) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Fecha\";\r\n        } else if (tipo == 2) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Lista\";\r\n        }\r\n\r\n        // Se retorna el valor\r\n        return nombreRetornado;\r\n    }\r\n\r\n    // Metodo encargado de cargar los parametros de la base de datos\r\n    const cargarParametros = (listaParametrosBaseDatos) => {\r\n\r\n        // Se setean los valores en null y vacios para que no salga el limitante de las hooks\r\n        setListaParametros(null);\r\n        setAntecedentesLista({ data: [] });\r\n        setInteresadosLista({ data: [] });\r\n        setEntidadesInvestigadoLista({ data: [] });\r\n        setCargosInvestigadoLista({ data: [] });\r\n        setEntidadInvestigadoLista({ data: [] });\r\n        setListaCamposPorParametroTemporal({ data: [] });\r\n        setListaParametros({ data: [] });\r\n\r\n        // Se inicializa el array\r\n        const data = {\r\n            \"data\": {\r\n                \"type\": 'mas_actuaciones',\r\n                \"attributes\": {\r\n                    \"id\": props.id_mas_actuacion,\r\n                    \"id_proceso_disciplinario\": from.procesoDisciplinarioId\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getByDataGeneric('mas_actuaciones/parametros-plantilla/' + props.id_mas_actuacion + '/' + from.procesoDisciplinarioId, data).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                validacionSpinner()\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se setean los valores a la lista general de parametros\r\n                    setListaParametros(datos);\r\n                    let existenDatos = false;\r\n                    \r\n                    datos.params.forEach(element => {\r\n                        if(Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0){\r\n                            existenDatos = true;\r\n                        }\r\n                    });\r\n                    \r\n                    setExistenDatosResultados(existenDatos)\r\n\r\n                    if (existenDatos && datos && datos.params && datos.resultados) {\r\n                        const nuevoElemento = [];\r\n                      \r\n                        datos.params.forEach(parametro => {\r\n                          if (datos.resultados[parametro] && Array.isArray(datos.resultados[parametro])) {\r\n                            datos.resultados[parametro].forEach((element, posicion) => {\r\n                                //if (datos.resultados[parametro].length === 1 || (element && element.principal)) {\r\n                                    let index = nuevoElemento.findIndex(data => data.param === parametro);\r\n                                    if (index > -1) {\r\n                                    nuevoElemento[index].value += \"$$$\" + (element.dato ? element.dato : 'SIN DATOS');\r\n                                    nuevoElemento[index].orden += \"$$$\" + posicion;\r\n                                    } else {\r\n                                    nuevoElemento.push({ \r\n                                        'param': parametro,\r\n                                        'value': element.dato ? element.dato : 'SIN DATOS', \r\n                                        'orden': posicion\r\n                                    });\r\n                                    }\r\n                                //}\r\n                            });\r\n                          }\r\n                        });\r\n                        setListaCamposPorParametroTemporal({ ...getListaCamposPorParametroTemporal, data: nuevoElemento });\r\n                      }\r\n\r\n\r\n                    window.showSpinner(false)\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric('mas_actuaciones/' + props.id_mas_actuacion).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n                \r\n                validacionSpinner()\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se valida que hayan campos adicionales\r\n                    if (datos.data.attributes.campos.length > 0) {\r\n\r\n                        // Se setean los valores a la lista\r\n                        setCamposAdicionales(datos.data.attributes.campos);\r\n\r\n                        // Se setean los campos en el from\r\n                        from.campos = datos.data.attributes.campos;\r\n                    } else if (from.campos) {\r\n\r\n                        // Se setean los campos en el from\r\n                        delete from.campos;\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se quita el cargando\r\n        window.showSpinner(false);\r\n    }\r\n\r\n    const descargarArchivo = () => {\r\n\r\n        try {\r\n            window.showSpinner(true)\r\n\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": \"mas_actuaciones\",\r\n                    \"attributes\": {\r\n                        \"params\": getListaCamposPorParametroTemporal.data,\r\n                    }\r\n                }\r\n            }\r\n\r\n            GenericApi.getByDataGeneric('mas_actuaciones/plantilla-diligenciada/' + props.id_mas_actuacion, data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        downloadBase64File(datos.content_type, datos.base_64, datos.file_name, global.Constants.TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES.DOCX);\r\n                        window.showSpinner(false);\r\n                    }\r\n                    else {\r\n                        setModalState({ title: \"SINPROC No \" + radicado + \" :: \", message: datos.error.toString(), show: true, redirect: null, from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    function downloadBase64File(contentType, base64Data, fileName, extension) {\r\n        const linkSource = `data:${contentType};base64,${base64Data}`;\r\n        const downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = linkSource;\r\n        downloadLink.download = fileName;\r\n        downloadLink.click();\r\n    }\r\n\r\n    const validacionSpinner = () => {\r\n        numeroLlamados++\r\n        if(numeroLlamados >= numeroTotalLlamados){\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spinner />\r\n            <ModalGen data={modalState} />\r\n            {\r\n                getIsLoading\r\n                ?\r\n                    <div className=\"text-center\">\r\n                        <div className=\"spinner-border text-primary\" role=\"status\">\r\n                            <span className=\"sr-only\">CARGANDO...</span>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                    <>\r\n                        {\r\n                            getListaParametros != null \r\n                            ?\r\n                                <>\r\n\r\n                                    {\r\n                                        getExistenDatosResultados == false\r\n                                        ?\r\n                                            <>\r\n                                                <div className='col-md-12 mt-4'>\r\n                                                    <div className=\"block-content alert-warning text-center\">\r\n                                                        <label>LA PLANTILLA NO CUENTA CON PARAMETROS</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <br></br>\r\n                                            </>\r\n                                        :\r\n                                            null\r\n                                    }\r\n                                    <div className='col-md-12'>\r\n                                        <label>PARÁMETROS DE LA PLANTILLA</label>\r\n                                    </div>\r\n                                    <div className='col-md-12 mt-2 mb-2'>\r\n                                        <DataTable className=\"table table-bordered table-striped table-vcenter js-dataTable-full\"\r\n                                            columns={columnsParametros}\r\n                                            data={getListaParametros.params}\r\n                                            noDataComponent={global.Constants.DATA_TABLE.SIN_DATOS_TABLE}\r\n                                            striped\r\n                                        />\r\n                                    </div>\r\n                                    {getCamposAdicionales && getCamposAdicionales.length > 0 ?\r\n                                        <>\r\n                                            <div className='col-md-12' style={{ marginTop: '50px' }}>\r\n                                                <label>CAMPOS ADICIONALES</label>\r\n                                            </div>\r\n                                            <div className='col-md-12 mt-2 mb-2'>\r\n                                                <DataTable className=\"table table-bordered table-striped table-vcenter js-dataTable-full\"\r\n                                                    columns={columnsCampos}\r\n                                                    data={getCamposAdicionales}\r\n                                                    noDataComponent={global.Constants.DATA_TABLE.SIN_DATOS_TABLE}\r\n                                                    striped\r\n                                                />\r\n                                            </div>\r\n                                        </>\r\n                                        : null\r\n                                    }\r\n                                    <div className='col-md-12 mt-4 mb-2'>\r\n                                        <label className='mr-2' htmlFor=\"documento_ruta\">DESCARGAR DOCUMENTO PRE-DILIGENCIADO CON LOS VALORES SELECCIONADOS</label>\r\n                                        <button type=\"button\" title='Descargar documento diligenciado' onClick={() => descargarArchivo()} className=\"btn btn-rounded btn-primary\"> <i className=\"fas fa-file-word\"></i></button>\r\n                                    </div>\r\n                                </>\r\n                            :\r\n                            <div className='col-md-12 mt-4'>\r\n                                <label>CARGANDO PARÁMETROS DE LA PLANTILLA...</label>\r\n                            </div>\r\n                        }\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ActuacionParametrosPlantillaForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}