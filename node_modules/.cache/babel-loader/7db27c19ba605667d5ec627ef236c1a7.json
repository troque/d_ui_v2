{"ast":null,"code":"/**\n * request.js\n *\n * Request class contains server only options\n */\n\nvar parse_url = require('url').parse;\nvar Headers = require('./headers');\nvar Body = require('./body');\nmodule.exports = Request;\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nfunction Request(input, init) {\n  var url, url_parsed;\n\n  // normalize input\n  if (!(input instanceof Request)) {\n    url = input;\n    url_parsed = parse_url(url);\n    input = {};\n  } else {\n    url = input.url;\n    url_parsed = parse_url(url);\n  }\n\n  // normalize init\n  init = init || {};\n\n  // fetch spec options\n  this.method = init.method || input.method || 'GET';\n  this.redirect = init.redirect || input.redirect || 'follow';\n  this.headers = new Headers(init.headers || input.headers || {});\n  this.url = url;\n\n  // server only options\n  this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n  this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n  this.counter = init.counter || input.counter || 0;\n  this.agent = init.agent || input.agent;\n  Body.call(this, init.body || this._clone(input), {\n    timeout: init.timeout || input.timeout || 0,\n    size: init.size || input.size || 0\n  });\n\n  // server request options\n  this.protocol = url_parsed.protocol;\n  this.hostname = url_parsed.hostname;\n  this.port = url_parsed.port;\n  this.path = url_parsed.path;\n  this.auth = url_parsed.auth;\n}\nRequest.prototype = Object.create(Body.prototype);\n\n/**\n * Clone this request\n *\n * @return  Request\n */\nRequest.prototype.clone = function () {\n  return new Request(this);\n};","map":{"version":3,"names":["parse_url","require","parse","Headers","Body","module","exports","Request","input","init","url","url_parsed","method","redirect","headers","follow","undefined","compress","counter","agent","call","body","_clone","timeout","size","protocol","hostname","port","path","auth","prototype","Object","create","clone"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/node-fetch/lib/request.js"],"sourcesContent":["\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nvar parse_url = require('url').parse;\nvar Headers = require('./headers');\nvar Body = require('./body');\n\nmodule.exports = Request;\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nfunction Request(input, init) {\n\tvar url, url_parsed;\n\n\t// normalize input\n\tif (!(input instanceof Request)) {\n\t\turl = input;\n\t\turl_parsed = parse_url(url);\n\t\tinput = {};\n\t} else {\n\t\turl = input.url;\n\t\turl_parsed = parse_url(url);\n\t}\n\n\t// normalize init\n\tinit = init || {};\n\n\t// fetch spec options\n\tthis.method = init.method || input.method || 'GET';\n\tthis.redirect = init.redirect || input.redirect || 'follow';\n\tthis.headers = new Headers(init.headers || input.headers || {});\n\tthis.url = url;\n\n\t// server only options\n\tthis.follow = init.follow !== undefined ?\n\t\tinit.follow : input.follow !== undefined ?\n\t\tinput.follow : 20;\n\tthis.compress = init.compress !== undefined ?\n\t\tinit.compress : input.compress !== undefined ?\n\t\tinput.compress : true;\n\tthis.counter = init.counter || input.counter || 0;\n\tthis.agent = init.agent || input.agent;\n\n\tBody.call(this, init.body || this._clone(input), {\n\t\ttimeout: init.timeout || input.timeout || 0,\n\t\tsize: init.size || input.size || 0\n\t});\n\n\t// server request options\n\tthis.protocol = url_parsed.protocol;\n\tthis.hostname = url_parsed.hostname;\n\tthis.port = url_parsed.port;\n\tthis.path = url_parsed.path;\n\tthis.auth = url_parsed.auth;\n}\n\nRequest.prototype = Object.create(Body.prototype);\n\n/**\n * Clone this request\n *\n * @return  Request\n */\nRequest.prototype.clone = function() {\n\treturn new Request(this);\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,KAAK,CAAC,CAACC,KAAK;AACpC,IAAIC,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE5BI,MAAM,CAACC,OAAO,GAAGC,OAAO;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC7B,IAAIC,GAAG,EAAEC,UAAU;;EAEnB;EACA,IAAI,EAAEH,KAAK,YAAYD,OAAO,CAAC,EAAE;IAChCG,GAAG,GAAGF,KAAK;IACXG,UAAU,GAAGX,SAAS,CAACU,GAAG,CAAC;IAC3BF,KAAK,GAAG,CAAC,CAAC;EACX,CAAC,MAAM;IACNE,GAAG,GAAGF,KAAK,CAACE,GAAG;IACfC,UAAU,GAAGX,SAAS,CAACU,GAAG,CAAC;EAC5B;;EAEA;EACAD,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;;EAEjB;EACA,IAAI,CAACG,MAAM,GAAGH,IAAI,CAACG,MAAM,IAAIJ,KAAK,CAACI,MAAM,IAAI,KAAK;EAClD,IAAI,CAACC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ,IAAIL,KAAK,CAACK,QAAQ,IAAI,QAAQ;EAC3D,IAAI,CAACC,OAAO,GAAG,IAAIX,OAAO,CAACM,IAAI,CAACK,OAAO,IAAIN,KAAK,CAACM,OAAO,IAAI,CAAC,CAAC,CAAC;EAC/D,IAAI,CAACJ,GAAG,GAAGA,GAAG;;EAEd;EACA,IAAI,CAACK,MAAM,GAAGN,IAAI,CAACM,MAAM,KAAKC,SAAS,GACtCP,IAAI,CAACM,MAAM,GAAGP,KAAK,CAACO,MAAM,KAAKC,SAAS,GACxCR,KAAK,CAACO,MAAM,GAAG,EAAE;EAClB,IAAI,CAACE,QAAQ,GAAGR,IAAI,CAACQ,QAAQ,KAAKD,SAAS,GAC1CP,IAAI,CAACQ,QAAQ,GAAGT,KAAK,CAACS,QAAQ,KAAKD,SAAS,GAC5CR,KAAK,CAACS,QAAQ,GAAG,IAAI;EACtB,IAAI,CAACC,OAAO,GAAGT,IAAI,CAACS,OAAO,IAAIV,KAAK,CAACU,OAAO,IAAI,CAAC;EACjD,IAAI,CAACC,KAAK,GAAGV,IAAI,CAACU,KAAK,IAAIX,KAAK,CAACW,KAAK;EAEtCf,IAAI,CAACgB,IAAI,CAAC,IAAI,EAAEX,IAAI,CAACY,IAAI,IAAI,IAAI,CAACC,MAAM,CAACd,KAAK,CAAC,EAAE;IAChDe,OAAO,EAAEd,IAAI,CAACc,OAAO,IAAIf,KAAK,CAACe,OAAO,IAAI,CAAC;IAC3CC,IAAI,EAAEf,IAAI,CAACe,IAAI,IAAIhB,KAAK,CAACgB,IAAI,IAAI;EAClC,CAAC,CAAC;;EAEF;EACA,IAAI,CAACC,QAAQ,GAAGd,UAAU,CAACc,QAAQ;EACnC,IAAI,CAACC,QAAQ,GAAGf,UAAU,CAACe,QAAQ;EACnC,IAAI,CAACC,IAAI,GAAGhB,UAAU,CAACgB,IAAI;EAC3B,IAAI,CAACC,IAAI,GAAGjB,UAAU,CAACiB,IAAI;EAC3B,IAAI,CAACC,IAAI,GAAGlB,UAAU,CAACkB,IAAI;AAC5B;AAEAtB,OAAO,CAACuB,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC5B,IAAI,CAAC0B,SAAS,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACAvB,OAAO,CAACuB,SAAS,CAACG,KAAK,GAAG,YAAW;EACpC,OAAO,IAAI1B,OAAO,CAAC,IAAI,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script"}