{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\Maestras\\\\TipoExpedienteMensajesForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport Spinner from '../Utils/Spinner';\nimport { Link } from \"react-router-dom\";\nimport GenericApi from '../Api/Services/GenericApi';\nimport { useLocation } from 'react-router-dom';\nimport '../Utils/Constants';\nimport ModalGen from '../Utils/Modals/ModalGeneric';\nimport InfoErrorApi from '../Utils/InfoErrorApi';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TipoExpedienteMensajesForm() {\n  _s();\n  const [getMinimoTextArea, setMinimoTextArea] = useState(0);\n  const [getMaximoTextArea, setMaximoTextArea] = useState(0);\n  const [errorApi, setErrorApi] = useState('');\n  const [getModalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [countTextArea, setCountTextArea] = useState(0);\n  const [getRepuestaMensajeTipoExpedienten, setRepuestaMensajeTipoExpedienten] = useState(false);\n\n  // Constantes para cargar los valores\n  const [getMensajeTipoExpediente, setMensajeTipoExpediente] = useState(\"\");\n  const [getValueTipoExpediente, setArrayTipoExpediente] = useState([]);\n  const [getTipoExpediente, setTipoExpediente] = useState([]);\n\n  // Constantes para los subtipos del expediente\n  const [getHabilitarSubTipoExpediente, setHabilitarSubTipoExpediente] = useState(null);\n  const [getValueSubTipoExpediente, setArraySubTipoExpediente] = useState([]);\n  const [getSubTipoExpediente, setSubTipoExpediente] = useState([]);\n  const [getArrayEstados, setArrayEstados] = useState([]);\n  const [getMensajeErrorTipoExpediente, setMensajeErrorTipoExpediente] = useState(\"\");\n  const [getMensajeErrorSubTipoExpediente, setMensajeErrorSubTipoExpediente] = useState(\"\");\n  const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\n  const [getTipoExpedienteNombre, setTipoExpedienteNombre] = useState(\"\");\n  const [getTipoSubExpedienteNombre, setTipoSubExpedienteNombre] = useState(\"\");\n  const getListaEstados = [{\n    value: '1',\n    label: 'ACTIVO'\n  }, {\n    value: '0',\n    label: 'INACTIVO'\n  }];\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  useEffect(() => {\n    async function fetchData() {\n      console.log(\"Daticos\", from);\n      // Se habilita el cargando\n      window.showSpinner(true);\n\n      // Se carga la api de parametros permitidos\n      obtenerParametros();\n      if (from != null) {\n        setTipoExpedienteNombre(from.attributes.tipo_expediente.nombre);\n        setTipoSubExpedienteNombre(from.attributes.id_sub_tipo_expediente);\n\n        // Se carga el mensaje y la longitud del mensaje\n        setMensajeTipoExpediente(from.attributes.mensaje);\n        if (from.attributes.mensaje) {\n          setRepuestaMensajeTipoExpedienten(true);\n        }\n        setCountTextArea(from.attributes.mensaje.length);\n\n        // Se carga el tipo de expediente\n        cargarTiposExpedientes();\n        setArrayTipoExpediente({\n          label: from.attributes.tipo_expediente.nombre,\n          value: from.attributes.tipo_expediente.id\n        });\n\n        // Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\n        const arrayValidarTipoExpedientes = [1, 3, 4];\n        const valorValidar = parseInt(from.attributes.tipo_expediente.id);\n\n        // Se valida que exista dentro del que lleva sub tipo de expediente\n        if (arrayValidarTipoExpedientes.includes(valorValidar)) {\n          // Se habilita el sub tipo de expediente\n          setHabilitarSubTipoExpediente(true);\n\n          // Se carga cuando es Derecho de peticion\n          if (valorValidar == 1) {\n            // Se cargan los datos del derecho de peticion\n            getApiTipoDerechoPeticion();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"Copias\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"General\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"Alerta control político\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 3\n              });\n            }\n          }\n\n          // Se carga cuando es Tipo Queja\n          else if (valorValidar == 3) {\n            // Se cargan los datos de tipo queja\n            getApiTipoQueja();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"Externa\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"Interna\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            }\n          }\n\n          // Se carga cuando es Tutela\n          else if (valorValidar == 4) {\n            // Se cargan los datos de tipo queja\n            getApiTipoTutela();\n\n            // Se carga el sub tipo de expediente\n            if (from.attributes.id_sub_tipo_expediente == \"días\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 1\n              });\n            } else if (from.attributes.id_sub_tipo_expediente == \"horas\") {\n              setArraySubTipoExpediente({\n                label: from.attributes.id_sub_tipo_expediente,\n                value: 2\n              });\n            }\n          }\n        }\n\n        // Se carga el estado\n        if (from.attributes.estado == 1) {\n          setArrayEstados({\n            label: 'ACTIVO',\n            value: from.attributes.estado\n          });\n        } else {\n          setArrayEstados({\n            label: 'INACTIVO',\n            value: from.attributes.estado\n          });\n        }\n\n        // Se deshabilita el cargando\n        window.showSpinner(false);\n      } else {\n        // Se carga los tipos de expediente por mensajes\n        cargarTipoExpedienteMensajes();\n      }\n    }\n    fetchData();\n  }, []);\n  const cargarTiposExpedientes = () => {\n    // Se inicializa el trycatch en caso de error de la api\n    try {\n      // Se inicializa el array general\n      var arrayGeneral = [];\n\n      // Buscamos los valores del array de los tipos de expedientes\n      GenericApi.getGeneric(\"mas-tipo-expediente\").then(datos => {\n        // Se valida que no haya ningun error\n        if (!datos.error) {\n          // Se valida que el array tenga mas de 0 elementos\n          if (datos[\"data\"].length > 0) {\n            // Se recorre el array de los tipo de expediente\n            for (let index = 0; index < datos.data.length; index++) {\n              // Se captura el valor por posicion\n              const element = datos.data[index];\n\n              // Se añade al array general\n              arrayGeneral.push({\n                label: element.attributes.nombre,\n                value: element.id\n              });\n            }\n\n            // Se añade el array general al array de los tipos de expedientes\n            setTipoExpediente(arrayGeneral);\n          }\n        } else {\n          setModalState({\n            title: \"Tipo expedientes\",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/TipoExpedientesMensajes',\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n\n  // Metodo encargado de traer los tipos de derecho de peticion\n  const getApiTipoDerechoPeticion = () => {\n    GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + 1).then(datos => {\n      // Se valida que no haya error en la API\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n\n  // Metodo encargado de traer los tipos de queja\n  const getApiTipoQueja = () => {\n    GenericApi.getGeneric(\"lista-tipo-queja\").then(datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n\n  // Metodo encargado de traer los tipos de tutela\n  const getApiTipoTutela = () => {\n    GenericApi.getGeneric(\"lista-terminos-respuesta/\" + 1).then(datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se inicializa las variables\n        let arrayGeneral = [];\n        let datosArray = datos.data;\n\n        // Se recorre el array de los sub tipo de expediente derecho de peticion\n        for (let index = 0; index < datosArray.length; index++) {\n          // Se captura el valor por posicion\n          const element = datosArray[index];\n\n          // Se añade al array general\n          arrayGeneral.push({\n            label: element.attributes.nombre,\n            value: element.id\n          });\n        }\n\n        // Se añade el array general al array de los tipos de expedientes\n        setSubTipoExpediente(arrayGeneral);\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/ClasificacionRadicadoLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        window.showSpinner(false);\n      }\n    });\n  };\n  const cargarTipoExpedienteMensajes = () => {\n    // Se deshabilita el cargando\n    window.showSpinner(false);\n\n    // Se carga el metodo para cargar los tipos de expediente\n    cargarTiposExpedientes();\n  };\n  const obtenerParametros = () => {\n    try {\n      const data = {\n        \"data\": {\n          \"type\": 'mas_parametro',\n          \"attributes\": {\n            \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\n          }\n        }\n      };\n\n      // Buscamos el parametro\n      GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(datos => {\n        if (!datos.error) {\n          if (datos[\"data\"].length > 0) {\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]));\n          }\n        } else {\n          setModalState({\n            title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/AntecedentesForm',\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n  const enviarDatos = valores => {\n    // Se inicializa el array\n    let data;\n\n    // Se valida que se haya seleccionado un tipo de expediente\n    if (!getValueTipoExpediente.value) {\n      // Se redeclara el mensaje\n      setMensajeErrorTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n      return false;\n    } else if (getValueTipoExpediente.value) {\n      // Se redeclara el mensaje en null\n      setMensajeErrorTipoExpediente(null);\n\n      // Se inicializa el array\n      const arrayTiposExpedienteValidos = [1, 3, 4];\n      const numeroValidar = parseInt(getValueTipoExpediente.value);\n\n      // Se valida que este dentro de los que llevan sub tipo de expediente\n      if (arrayTiposExpedienteValidos.includes(numeroValidar)) {\n        // Se valida que se haya seleccionado un sub tipo de expediente\n        if (getValueSubTipoExpediente.value) {\n          // Se redeclara el mensaje\n          setMensajeErrorSubTipoExpediente(null);\n\n          // Se valida que se haya seleccionado el estado\n          if (getArrayEstados.value) {\n            // Se redeclara el mensaje\n            setMensajeErrorEstado(null);\n\n            // Se inicializa el array a enviar por post\n            data = {\n              \"data\": {\n                \"type\": \"mas_tipo_expediente_mensajes\",\n                \"attributes\": {\n                  \"mensaje\": getMensajeTipoExpediente,\n                  \"id_tipo_expediente\": getValueTipoExpediente.value,\n                  \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\n                  \"tipo_expediente_nombre\": getTipoExpedienteNombre,\n                  \"sub_tipo_expediente_nombre\": getTipoSubExpedienteNombre,\n                  \"estado\": getArrayEstados.value\n                }\n              }\n            };\n          } else {\n            // Se redeclara el mensaje\n            setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n            return false;\n          }\n        } else {\n          // Se redeclara el mensaje del sub tipo de expediente\n          setMensajeErrorSubTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n          return false;\n        }\n      } else {\n        // Se valida que se haya seleccionado el estado\n        if (getArrayEstados.value) {\n          // Se redeclara el mensaje\n          setMensajeErrorEstado(null);\n\n          // Se inicializa el array a enviar por post\n          data = {\n            \"data\": {\n              \"type\": \"mas_tipo_expediente_mensajes\",\n              \"attributes\": {\n                \"mensaje\": getMensajeTipoExpediente,\n                \"id_tipo_expediente\": getValueTipoExpediente.value,\n                \"tipo_expediente_nombre\": getTipoExpedienteNombre,\n                \"estado\": getArrayEstados.value\n              }\n            }\n          };\n        } else {\n          // Se redeclara el mensaje\n          setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\n          return false;\n        }\n      }\n    }\n\n    // Se utiliza el cargando\n    window.showSpinner(true);\n\n    // Se inicializa la API\n    GenericApi.addGeneric('mas_tipo_expediente_mensajes', data).then(datos => {\n      // Se utiliza el cargando\n      window.showSpinner(false);\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: global.Constants.MENSAJES_MODAL.EXITOSO,\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          alert: global.Constants.TIPO_ALERTA.EXITO\n        });\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const actualizarDatos = valores => {\n    // Se inicializa el valor del id\n    const id = from.id;\n\n    // Se inicializa el array\n    let data;\n\n    // Se inicializa el array a enviar por post\n    data = {\n      \"data\": {\n        \"type\": \"mas_tipo_expediente_mensajes\",\n        \"attributes\": {\n          \"mensaje\": getMensajeTipoExpediente,\n          \"id_tipo_expediente\": getValueTipoExpediente.value,\n          \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\n          \"tipo_expediente_nombre\": getTipoExpedienteNombre,\n          \"sub_tipo_expediente_nombre\": getTipoSubExpedienteNombre,\n          \"estado\": getArrayEstados.value\n        }\n      }\n    };\n\n    // Se utiliza el cargando\n    window.showSpinner(true);\n    GenericApi.updateGeneric('mas_tipo_expediente_mensajes', id, data).then(datos => {\n      // Se deshabilita el cargando\n      window.showSpinner(false);\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: global.Constants.MENSAJES_MODAL.EXITOSO,\n          show: true,\n          redirect: '/TipoExpedienteMensajes',\n          alert: global.Constants.TIPO_ALERTA.EXITO\n        });\n      } else {\n        setModalState({\n          title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\",\n          message: datos.error.toString(),\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const changeMensajeTipoExpediente = e => {\n    if (e.target.value === '' || global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && e.target.value.length <= 4000) {\n      setMensajeTipoExpediente(e.target.value);\n      setCountTextArea(e.target.value.length);\n      setRepuestaMensajeTipoExpedienten(true);\n    }\n  };\n  const selectChangeTipoExpediente = v => {\n    setArraySubTipoExpediente([]);\n    setTipoExpedienteNombre(v.label);\n    console.log(v.value);\n    // Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\n    if (from == null) {\n      // Se carga el tipo de expediente en el array del select\n      setArrayTipoExpediente(v);\n\n      // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\n      if (v.value == \"1\") {\n        // Derecho de peticion\n\n        // Se cargan los datos del derecho de peticion\n        getApiTipoDerechoPeticion();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"2\") {\n        // Poder referente\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      } else if (v.value == \"3\") {\n        // Queja\n\n        // Se cargan los datos del tipo de queja\n        getApiTipoQueja();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"4\") {\n        // Tutela\n\n        // Se cargan los datos del tipo de tutela\n        getApiTipoTutela();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"5\") {\n        // Proceso Disciplinario\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      }\n    } else if (v != null) {\n      // Se carga el tipo de expediente en el array del select\n      setArrayTipoExpediente(v);\n\n      // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\n      if (v.value == \"1\") {\n        // Derecho de peticion\n\n        // Se cargan los datos del derecho de peticion\n        getApiTipoDerechoPeticion();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"2\") {\n        // Poder referente\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      } else if (v.value == \"3\") {\n        // Queja\n\n        // Se cargan los datos del tipo de queja\n        getApiTipoQueja();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"4\") {\n        // Tutela\n\n        // Se cargan los datos del tipo de tutela\n        getApiTipoTutela();\n\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(true);\n      } else if (v.value == \"5\") {\n        // Proceso Disciplinario\n        // Se habilita que se muestre el select del subtipo\n        setHabilitarSubTipoExpediente(null);\n      }\n    } else {\n      // setErrorEtapa('Campo requerido');\n    }\n  };\n  const selectChangeSubTipoExpediente = v => {\n    // Se carga el tipo de expediente en el array del select\n    setArraySubTipoExpediente(v);\n    setTipoSubExpedienteNombre(v.label);\n  };\n  const selectChangeEstados = v => {\n    // Se carga el tipo de estado en el array del select\n    setArrayEstados(v);\n  };\n\n  // Metodo encargado de validar que no se ingresen caracteres invalidos\n  function containsSpecialChars(str) {\n    const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\n      if (str.includes(specialChar)) {\n        return true;\n      }\n      return false;\n    });\n    return result;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(InfoErrorApi, {\n      error: errorApi\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: getModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        mensaje: ''\n      },\n      enableReinitialize: true,\n      validate: valores => {\n        // Se inicializa el array\n        let errores = {};\n        if (getRepuestaMensajeTipoExpedienten == false) {\n          errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n        }\n        if (from != null) {\n          // Se valida que tenga valores\n          if (!getMensajeTipoExpediente) {\n            errores.mensaje = global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION;\n          }\n\n          // Se valida que tenga el minimo de caracteres ingresados\n          else if (getMensajeTipoExpediente.length <= getMinimoTextArea) {\n            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\n          }\n\n          // Se valida que exista\n          if (getMensajeTipoExpediente) {\n            // Se valida que contenga caracteres invalidos\n            if (containsSpecialChars(getMensajeTipoExpediente)) {\n              errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n            }\n          }\n        } else {\n          // Se valida que tenga el minimo de caracteres ingresados\n          if (countTextArea > getMaximoTextArea) {\n            errores.mensaje = 'La descripción debe tener como maximo ' + getMaximoTextArea + ' caracteres';\n          } else if (countTextArea <= getMinimoTextArea) {\n            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\n          }\n\n          // Se valida que exista\n          if (valores.mensaje) {\n            // Se valida que contenga caracteres invalidos\n            if (containsSpecialChars(valores.mensaje)) {\n              errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n            }\n          }\n        }\n\n        // Se retorna los errores\n        return errores;\n      },\n      onSubmit: (valores, _ref) => {\n        let {\n          resetForm\n        } = _ref;\n        if (from != null) {\n          actualizarDatos(valores);\n        } else {\n          enviarDatos(valores);\n        }\n      },\n      children: _ref2 => {\n        let {\n          errors\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block block-rounded\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block block-themed\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-12\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"block-content\",\n                  children: /*#__PURE__*/_jsxDEV(\"nav\", {\n                    \"aria-label\": \"breadcrumb\",\n                    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n                      className: \"breadcrumb breadcrumb-alt push\",\n                      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                          underline: \"hover\",\n                          className: \"text-dark\",\n                          to: `/TipoExpedienteMensajes`,\n                          children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                            children: \"Lista de mensajes\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 692,\n                            columnNumber: 160\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 692,\n                          columnNumber: 82\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 692,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                        className: \"breadcrumb-item\",\n                        children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                          children: [from != null ? 'Actualizar' : 'Crear', \" configuraci\\xF3n de mensajes por tipo de expediente\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 693,\n                          columnNumber: 82\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 693,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 691,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 690,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 689,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-header\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"block-title\",\n                  children: \"ADMINISTRACI\\xD3N :: CONFIGURACI\\xD3N DE MENSAJES EN TIPOS DE EXPEDIENTE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 699,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-12\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"mensaje\",\n                        children: \"DESCRIPCI\\xD3N DEL MENSAJE\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 707,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(Field, {\n                        as: \"textarea\",\n                        className: \"form-control mt-2\",\n                        id: \"mensaje\",\n                        name: \"mensaje\",\n                        rows: \"6\",\n                        placeholder: \"Informaci\\xF3n para su solicitud....\",\n                        maxLength: getMaximoTextArea,\n                        minLength: getMinimoTextArea,\n                        value: getMensajeTipoExpediente,\n                        onChange: changeMensajeTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 708,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"text-right\",\n                        children: /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-primary\",\n                          children: [countTextArea, \" / \", getMaximoTextArea]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 720,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 719,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                        name: \"mensaje\",\n                        component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: errors.mensaje\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 722,\n                          columnNumber: 96\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 722,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 705,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 704,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-6\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group text-uppercase\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"tipo_expediente\",\n                        children: [\"TIPO DE EXPEDIENTE\", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 728,\n                          columnNumber: 100\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 728,\n                        columnNumber: 49\n                      }, this), getValueTipoExpediente ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"tipo_expediente\",\n                        name: \"tipo_expediente\",\n                        isMulti: false,\n                        value: getValueTipoExpediente,\n                        placeholder: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION,\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getTipoExpediente.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeTipoExpediente(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 730,\n                        columnNumber: 53\n                      }, this) : null, getMensajeErrorTipoExpediente ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 744,\n                        columnNumber: 53\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 727,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 726,\n                    columnNumber: 41\n                  }, this), getHabilitarSubTipoExpediente != null ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group text-uppercase\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"sub_tipo_expediente\",\n                        children: [\"SUB TIPO DE EXPEDIENTE\", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 753,\n                          columnNumber: 112\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 753,\n                        columnNumber: 53\n                      }, this), getValueSubTipoExpediente ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"sub_tipo_expediente\",\n                        name: \"sub_tipo_expediente\",\n                        isMulti: false,\n                        value: getValueSubTipoExpediente,\n                        placeholder: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION,\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getSubTipoExpediente.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeSubTipoExpediente(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 755,\n                        columnNumber: 57\n                      }, this) : null, getMensajeErrorSubTipoExpediente ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorSubTipoExpediente\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 769,\n                        columnNumber: 57\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 752,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 751,\n                    columnNumber: 45\n                  }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-md-3\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"form-group\",\n                      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"estado\",\n                        children: [\"ESTADO \", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"text-danger\",\n                          children: \"*\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 777,\n                          columnNumber: 80\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 777,\n                        columnNumber: 49\n                      }, this), getArrayEstados ? /*#__PURE__*/_jsxDEV(Select, {\n                        id: \"estado\",\n                        name: \"estado\",\n                        isMulti: false,\n                        value: getArrayEstados,\n                        placeholder: global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION,\n                        noOptionsMessage: () => \"Sin datos\",\n                        options: getListaEstados.map(e => ({\n                          label: e.label,\n                          value: e.value\n                        })),\n                        onChange: e => selectChangeEstados(e)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 779,\n                        columnNumber: 53\n                      }, this) : null, getMensajeErrorEstado ? /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: getMensajeErrorEstado\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 793,\n                        columnNumber: 53\n                      }, this) : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 776,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 775,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content block-content-full text-right bg-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-rounded btn-primary\",\n                children: from != null ? global.Constants.BOTON_NOMBRE.ACTUALIZAR : global.Constants.BOTON_NOMBRE.REGISTRAR\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: '/TipoExpedienteMensajes',\n                className: \"font-size-h5 font-w600\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn btn-rounded btn-outline-primary\",\n                  children: global.Constants.BOTON_NOMBRE.CANCELAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 806,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TipoExpedienteMensajesForm, \"wLTzOGpl0ClZ+gBONtiFpF/O8r8=\", false, function () {\n  return [useLocation];\n});\n_c = TipoExpedienteMensajesForm;\n;\nvar _c;\n$RefreshReg$(_c, \"TipoExpedienteMensajesForm\");","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Spinner","Link","GenericApi","useLocation","ModalGen","InfoErrorApi","Select","TipoExpedienteMensajesForm","getMinimoTextArea","setMinimoTextArea","getMaximoTextArea","setMaximoTextArea","errorApi","setErrorApi","getModalState","setModalState","title","message","show","countTextArea","setCountTextArea","getRepuestaMensajeTipoExpedienten","setRepuestaMensajeTipoExpedienten","getMensajeTipoExpediente","setMensajeTipoExpediente","getValueTipoExpediente","setArrayTipoExpediente","getTipoExpediente","setTipoExpediente","getHabilitarSubTipoExpediente","setHabilitarSubTipoExpediente","getValueSubTipoExpediente","setArraySubTipoExpediente","getSubTipoExpediente","setSubTipoExpediente","getArrayEstados","setArrayEstados","getMensajeErrorTipoExpediente","setMensajeErrorTipoExpediente","getMensajeErrorSubTipoExpediente","setMensajeErrorSubTipoExpediente","getMensajeErrorEstado","setMensajeErrorEstado","getTipoExpedienteNombre","setTipoExpedienteNombre","getTipoSubExpedienteNombre","setTipoSubExpedienteNombre","getListaEstados","value","label","location","from","state","fetchData","console","log","window","showSpinner","obtenerParametros","attributes","tipo_expediente","nombre","id_sub_tipo_expediente","mensaje","length","cargarTiposExpedientes","id","arrayValidarTipoExpedientes","valorValidar","parseInt","includes","getApiTipoDerechoPeticion","getApiTipoQueja","getApiTipoTutela","estado","cargarTipoExpedienteMensajes","arrayGeneral","getGeneric","then","datos","error","index","data","element","push","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","datosArray","getByDataGeneric","filter","map","filteredName","enviarDatos","valores","MENSAJE_ERROR","CAMPO_OBLIGATORIO","arrayTiposExpedienteValidos","numeroValidar","addGeneric","MENSAJES_MODAL","EXITOSO","EXITO","actualizarDatos","updateGeneric","changeMensajeTipoExpediente","e","target","CARACTERES_ESPECIALES","formatOnlyLettersWhitAccent","test","selectChangeTipoExpediente","v","selectChangeSubTipoExpediente","selectChangeEstados","containsSpecialChars","str","result","TEXT_AREA","split","some","specialChar","errores","ERROR_FORMATO_CARACTERES_INVALIDOS","MENSAJE_INFORMATIVO","SELECCIONE_UNA_OPCION","resetForm","errors","BOTON_NOMBRE","ACTUALIZAR","REGISTRAR","CANCELAR"],"sources":["C:/w2d/personeria/personeria-ui/src/components/Maestras/TipoExpedienteMensajesForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport Spinner from '../Utils/Spinner';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../Utils/Constants';\r\nimport ModalGen from '../Utils/Modals/ModalGeneric';\r\nimport InfoErrorApi from '../Utils/InfoErrorApi';\r\nimport Select from 'react-select';\r\n\r\nexport default function TipoExpedienteMensajesForm() {\r\n\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n    const [getRepuestaMensajeTipoExpedienten, setRepuestaMensajeTipoExpedienten] = useState(false);\r\n    \r\n\r\n    // Constantes para cargar los valores\r\n    const [getMensajeTipoExpediente, setMensajeTipoExpediente] = useState(\"\");\r\n    const [getValueTipoExpediente, setArrayTipoExpediente] = useState([]);\r\n    const [getTipoExpediente, setTipoExpediente] = useState([]);\r\n\r\n    // Constantes para los subtipos del expediente\r\n    const [getHabilitarSubTipoExpediente, setHabilitarSubTipoExpediente] = useState(null);\r\n\r\n    const [getValueSubTipoExpediente, setArraySubTipoExpediente] = useState([]);\r\n    const [getSubTipoExpediente, setSubTipoExpediente] = useState([]);\r\n    const [getArrayEstados, setArrayEstados] = useState([]);\r\n\r\n    const [getMensajeErrorTipoExpediente, setMensajeErrorTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorSubTipoExpediente, setMensajeErrorSubTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\r\n\r\n    const [getTipoExpedienteNombre, setTipoExpedienteNombre] = useState(\"\");\r\n    const [getTipoSubExpedienteNombre, setTipoSubExpedienteNombre] = useState(\"\");\r\n\r\n    const getListaEstados =\r\n        [\r\n            { value: '1', label: 'ACTIVO' },\r\n            { value: '0', label: 'INACTIVO' }\r\n        ];\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            console.log(\"Daticos\", from)\r\n            // Se habilita el cargando\r\n            window.showSpinner(true);\r\n\r\n            // Se carga la api de parametros permitidos\r\n            obtenerParametros();\r\n\r\n            if (from != null) {\r\n\r\n                setTipoExpedienteNombre(from.attributes.tipo_expediente.nombre)\r\n                setTipoSubExpedienteNombre(from.attributes.id_sub_tipo_expediente)\r\n\r\n                // Se carga el mensaje y la longitud del mensaje\r\n                setMensajeTipoExpediente(from.attributes.mensaje);\r\n\r\n                if(from.attributes.mensaje){\r\n                    setRepuestaMensajeTipoExpedienten(true)\r\n                }\r\n\r\n                setCountTextArea(from.attributes.mensaje.length);\r\n\r\n                // Se carga el tipo de expediente\r\n                cargarTiposExpedientes();\r\n                setArrayTipoExpediente({ label: from.attributes.tipo_expediente.nombre, value: from.attributes.tipo_expediente.id });\r\n\r\n                // Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\r\n                const arrayValidarTipoExpedientes = [1, 3, 4];\r\n                const valorValidar = parseInt(from.attributes.tipo_expediente.id);\r\n\r\n                // Se valida que exista dentro del que lleva sub tipo de expediente\r\n                if (arrayValidarTipoExpedientes.includes(valorValidar)) {\r\n\r\n                    // Se habilita el sub tipo de expediente\r\n                    setHabilitarSubTipoExpediente(true);\r\n\r\n                    // Se carga cuando es Derecho de peticion\r\n                    if (valorValidar == 1) {\r\n\r\n                        // Se cargan los datos del derecho de peticion\r\n                        getApiTipoDerechoPeticion();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Copias\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"General\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Alerta control político\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 3 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tipo Queja\r\n                    else if (valorValidar == 3) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoQueja();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Externa\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Interna\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tutela\r\n                    else if (valorValidar == 4) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoTutela();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"días\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"horas\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Se carga el estado\r\n                if (from.attributes.estado == 1) {\r\n                    setArrayEstados({ label: 'ACTIVO', value: from.attributes.estado });\r\n                } else {\r\n                    setArrayEstados({ label: 'INACTIVO', value: from.attributes.estado });\r\n                }\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            } else {\r\n\r\n                // Se carga los tipos de expediente por mensajes\r\n                cargarTipoExpedienteMensajes();\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const cargarTiposExpedientes = () => {\r\n\r\n        // Se inicializa el trycatch en caso de error de la api\r\n        try {\r\n\r\n            // Se inicializa el array general\r\n            var arrayGeneral = [];\r\n\r\n            // Buscamos los valores del array de los tipos de expedientes\r\n            GenericApi.getGeneric(\"mas-tipo-expediente\").then(\r\n                datos => {\r\n\r\n                    // Se valida que no haya ningun error\r\n                    if (!datos.error) {\r\n\r\n                        // Se valida que el array tenga mas de 0 elementos\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            // Se recorre el array de los tipo de expediente\r\n                            for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                                // Se captura el valor por posicion\r\n                                const element = datos.data[index];\r\n\r\n                                // Se añade al array general\r\n                                arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                            }\r\n\r\n                            // Se añade el array general al array de los tipos de expedientes\r\n                            setTipoExpediente(arrayGeneral);\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"Tipo expedientes\", message: datos.error.toString(), show: true, redirect: '/TipoExpedientesMensajes', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de derecho de peticion\r\n    const getApiTipoDerechoPeticion = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error en la API\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n\r\n                } else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/TipoExpedienteMensajes', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de queja\r\n    const getApiTipoQueja = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-queja\").then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de tutela\r\n    const getApiTipoTutela = () => {\r\n        GenericApi.getGeneric(\"lista-terminos-respuesta/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const cargarTipoExpedienteMensajes = () => {\r\n\r\n        // Se deshabilita el cargando\r\n        window.showSpinner(false);\r\n\r\n        // Se carga el metodo para cargar los tipos de expediente\r\n        cargarTiposExpedientes();\r\n    }\r\n\r\n    const obtenerParametros = () => {\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, redirect: '/AntecedentesForm', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se valida que se haya seleccionado un tipo de expediente\r\n        if (!getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje\r\n            setMensajeErrorTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n            return false;\r\n        } else if (getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje en null\r\n            setMensajeErrorTipoExpediente(null);\r\n\r\n            // Se inicializa el array\r\n            const arrayTiposExpedienteValidos = [1, 3, 4];\r\n            const numeroValidar = parseInt(getValueTipoExpediente.value);\r\n\r\n            // Se valida que este dentro de los que llevan sub tipo de expediente\r\n            if (arrayTiposExpedienteValidos.includes(numeroValidar)) {\r\n\r\n                // Se valida que se haya seleccionado un sub tipo de expediente\r\n                if (getValueSubTipoExpediente.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorSubTipoExpediente(null);\r\n\r\n                    // Se valida que se haya seleccionado el estado\r\n                    if (getArrayEstados.value) {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(null);\r\n\r\n                        // Se inicializa el array a enviar por post\r\n                        data = {\r\n                            \"data\": {\r\n                                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                                \"attributes\": {\r\n                                    \"mensaje\": getMensajeTipoExpediente,\r\n                                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                                    \"tipo_expediente_nombre\": getTipoExpedienteNombre,\r\n                                    \"sub_tipo_expediente_nombre\": getTipoSubExpedienteNombre,\r\n                                    \"estado\": getArrayEstados.value\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                        return false;\r\n                    }\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje del sub tipo de expediente\r\n                    setMensajeErrorSubTipoExpediente(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                    return false;\r\n                }\r\n            } else {\r\n\r\n                // Se valida que se haya seleccionado el estado\r\n                if (getArrayEstados.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(null);\r\n\r\n                    // Se inicializa el array a enviar por post\r\n                    data = {\r\n                        \"data\": {\r\n                            \"type\": \"mas_tipo_expediente_mensajes\",\r\n                            \"attributes\": {\r\n                                \"mensaje\": getMensajeTipoExpediente,\r\n                                \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                \"tipo_expediente_nombre\": getTipoExpedienteNombre,\r\n                                \"estado\": getArrayEstados.value\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.addGeneric('mas_tipo_expediente_mensajes', data).then(\r\n            datos => {\r\n\r\n                // Se utiliza el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const actualizarDatos = (valores) => {\r\n\r\n        // Se inicializa el valor del id\r\n        const id = from.id;\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                \"attributes\": {\r\n                    \"mensaje\": getMensajeTipoExpediente,\r\n                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                    \"tipo_expediente_nombre\": getTipoExpedienteNombre,\r\n                    \"sub_tipo_expediente_nombre\": getTipoSubExpedienteNombre,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        GenericApi.updateGeneric('mas_tipo_expediente_mensajes', id, data).then(\r\n            datos => {\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const changeMensajeTipoExpediente = (e) => {\r\n        if (\r\n                e.target.value === '' || \r\n                (global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && e.target.value.length <= 4000)\r\n            ) \r\n        {\r\n            setMensajeTipoExpediente(e.target.value);\r\n            setCountTextArea(e.target.value.length);\r\n            setRepuestaMensajeTipoExpedienten(true);\r\n        }\r\n    }\r\n\r\n    const selectChangeTipoExpediente = (v) => {\r\n        setArraySubTipoExpediente([])\r\n        setTipoExpedienteNombre(v.label)\r\n        console.log(v.value)\r\n        // Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\r\n        if (from == null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n            else if (v.value == \"5\") {  // Proceso Disciplinario\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            }\r\n        } else if (v != null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n            else if (v.value == \"5\") { // Proceso Disciplinario\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            }\r\n        } else {\r\n            // setErrorEtapa('Campo requerido');\r\n        }\r\n    }\r\n\r\n    const selectChangeSubTipoExpediente = (v) => {\r\n\r\n        // Se carga el tipo de expediente en el array del select\r\n        setArraySubTipoExpediente(v);        \r\n        setTipoSubExpedienteNombre(v.label)\r\n    }\r\n\r\n    const selectChangeEstados = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setArrayEstados(v);\r\n    }\r\n\r\n    // Metodo encargado de validar que no se ingresen caracteres invalidos\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<InfoErrorApi error={errorApi} />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    mensaje: '',\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                    // Se inicializa el array\r\n                    let errores = {};\r\n\r\n                    if(getRepuestaMensajeTipoExpedienten == false){\r\n                        errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                    }\r\n\r\n                    if (from != null) {\r\n\r\n                        // Se valida que tenga valores\r\n                        if (!getMensajeTipoExpediente) {\r\n                            errores.mensaje = global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION;\r\n                        }\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        else if (getMensajeTipoExpediente.length <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (getMensajeTipoExpediente) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(getMensajeTipoExpediente)) {\r\n                                errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        if (countTextArea > getMaximoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener como maximo ' + getMaximoTextArea + ' caracteres';\r\n                        }\r\n                        else if (countTextArea <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (valores.mensaje) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(valores.mensaje)) {\r\n                                errores.mensaje = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Se retorna los errores\r\n                    return errores;\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n\r\n                    if (from != null) {\r\n                        actualizarDatos(valores);\r\n                    } else {\r\n                        enviarDatos(valores);\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"block block-rounded\">\r\n                            <div className=\"block block-themed\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"block-content\">\r\n                                        <nav aria-label=\"breadcrumb\">\r\n                                            <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                                <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/TipoExpedienteMensajes`}> <small>Lista de mensajes</small></Link></li>\r\n                                                <li className=\"breadcrumb-item\"> <small>{from != null ? 'Actualizar' : 'Crear'} configuración de mensajes por tipo de expediente</small></li>\r\n                                            </ol>\r\n                                        </nav>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-header\">\r\n                                    <h3 className=\"block-title\">ADMINISTRACIÓN :: CONFIGURACIÓN DE MENSAJES EN TIPOS DE EXPEDIENTE</h3>\r\n                                </div>\r\n                                <div className=\"block-content\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                {/* <i className=\"fa fa-check text-success fa-2x mr-3\"></i> */}\r\n                                                <label htmlFor=\"mensaje\">DESCRIPCIÓN DEL MENSAJE</label>\r\n                                                <Field as=\"textarea\"\r\n                                                    className=\"form-control mt-2\"\r\n                                                    id=\"mensaje\"\r\n                                                    name=\"mensaje\"\r\n                                                    rows=\"6\"\r\n                                                    placeholder=\"Información para su solicitud....\"\r\n                                                    maxLength={getMaximoTextArea}\r\n                                                    minLength={getMinimoTextArea}\r\n                                                    value={getMensajeTipoExpediente}\r\n                                                    onChange={changeMensajeTipoExpediente}\r\n                                                ></Field>\r\n                                                <div className=\"text-right\">\r\n                                                    <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                                </div>\r\n                                                <ErrorMessage name=\"mensaje\" component={() => (<span className=\"text-danger\">{errors.mensaje}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group text-uppercase\">\r\n                                                <label htmlFor=\"tipo_expediente\">TIPO DE EXPEDIENTE<span className=\"text-danger\">*</span></label>\r\n                                                {(getValueTipoExpediente) ?\r\n                                                    <Select\r\n                                                        id='tipo_expediente'\r\n                                                        name='tipo_expediente'\r\n                                                        isMulti={false}\r\n                                                        value={getValueTipoExpediente}\r\n                                                        placeholder={global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getTipoExpediente.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeTipoExpediente(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorTipoExpediente ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorTipoExpediente}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {getHabilitarSubTipoExpediente != null\r\n                                            ?\r\n                                            <div className=\"col-md-3\">\r\n                                                <div className=\"form-group text-uppercase\">\r\n                                                    <label htmlFor=\"sub_tipo_expediente\">SUB TIPO DE EXPEDIENTE<span className=\"text-danger\">*</span></label>\r\n                                                    {(getValueSubTipoExpediente) ?\r\n                                                        <Select\r\n                                                            id='sub_tipo_expediente'\r\n                                                            name='sub_tipo_expediente'\r\n                                                            isMulti={false}\r\n                                                            value={getValueSubTipoExpediente}\r\n                                                            placeholder={global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}\r\n                                                            noOptionsMessage={() => \"Sin datos\"}\r\n                                                            options={getSubTipoExpediente.map(e =>\r\n                                                                ({ label: e.label, value: e.value })\r\n                                                            )}\r\n                                                            onChange={(e) => selectChangeSubTipoExpediente(e)}\r\n                                                        />\r\n                                                        : null}\r\n                                                    {getMensajeErrorSubTipoExpediente ?\r\n                                                        <span className=\"text-danger\">{getMensajeErrorSubTipoExpediente}</span>\r\n                                                        : null}\r\n                                                </div>\r\n                                            </div>\r\n                                            : null}\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"estado\">ESTADO <span className=\"text-danger\">*</span></label>\r\n                                                {(getArrayEstados) ?\r\n                                                    <Select\r\n                                                        id='estado'\r\n                                                        name='estado'\r\n                                                        isMulti={false}\r\n                                                        value={getArrayEstados}\r\n                                                        placeholder={global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaEstados.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeEstados(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorEstado ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorEstado}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"block-content block-content-full text-right bg-light\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >\r\n                                    {from != null ? global.Constants.BOTON_NOMBRE.ACTUALIZAR : global.Constants.BOTON_NOMBRE.REGISTRAR}\r\n                                </button>\r\n                                <Link to={'/TipoExpedienteMensajes'} className=\"font-size-h5 font-w600\" >\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}