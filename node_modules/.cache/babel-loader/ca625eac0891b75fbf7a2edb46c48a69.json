{"ast":null,"code":"import _regeneratorRuntime from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{ErrorMessage,Field,Form,Formik}from'formik';import Spinner from'../Utils/Spinner';import{Link}from\"react-router-dom\";import GenericApi from'../Api/Services/GenericApi';import{useLocation}from'react-router-dom';import'../Utils/Constants';import ModalGen from'../Utils/Modals/ModalGeneric';import InfoErrorApi from'../Utils/InfoErrorApi';import Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function ParametroCamposCaratulaForm(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),getMinimoTextArea=_useState2[0],setMinimoTextArea=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),getMaximoTextArea=_useState4[0],setMaximoTextArea=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),errorApi=_useState6[0],setErrorApi=_useState6[1];var _useState7=useState({title:\"\",message:\"\",show:false}),_useState8=_slicedToArray(_useState7,2),getModalState=_useState8[0],setModalState=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),countTextArea=_useState10[0],setCountTextArea=_useState10[1];// Constantes para cargar los valores\nvar _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),getNombreParametro=_useState12[0],setNombreParametro=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),getValorParametro=_useState14[0],setValorParametro=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),getArrayEstados=_useState16[0],setArrayEstados=_useState16[1];var _useState17=useState(\"\"),_useState18=_slicedToArray(_useState17,2),getMensajeErrorNombreParametro=_useState18[0],setMensajeErrorNombreParametro=_useState18[1];var _useState19=useState(\"\"),_useState20=_slicedToArray(_useState19,2),getMensajeErrorValorParametro=_useState20[0],setMensajeErrorValorParametro=_useState20[1];var _useState21=useState(\"\"),_useState22=_slicedToArray(_useState21,2),getMensajeErrorEstado=_useState22[0],setMensajeErrorEstado=_useState22[1];var getListaEstados=[{value:'1',label:'Activo'},{value:'0',label:'Inactivo'}];var getListaValorParametro=[{value:'Sinproc',label:'N° de Sinproc'},{value:'Antecedentes',label:'Listado de antecedentes'},{value:'Usuario',label:'Nombre de usuario'},{value:'Dependencia',label:'Dependencia de registro'},{value:'Vigencia',label:'Vigencia'},{value:'Fecha Registro',label:'Fecha de Registro'},{value:'Fecha Ingreso',label:'Fecha de Ingreso'},{value:'Generado',label:'Nombre de usuario actual'}];var location=useLocation();var from=location.state.from;useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Se habilita el cargando\nwindow.showSpinner(true);// Se carga la api de parametros permitidos\nobtenerParametros();if(from!=null){// Se carga el nombre del parametro\nsetNombreParametro(from.attributes.nombre_campo);// Se carga los tipos de valores por parametro\nvalidarValorParametro(from.attributes.type);// Se carga el estado\nif(from.attributes.estado==1){// Se setea el valor del estado\nsetArrayEstados({label:'Activo',value:from.attributes.estado});}else{// Se setea el valor del estado\nsetArrayEstados({label:'Inactivo',value:from.attributes.estado});}// Se deshabilita el cargando\nwindow.showSpinner(false);}else{// Se carga los tipos de expediente por mensajes\ncargarParametroCamposCaratula();}case 3:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);// Metodo encargado de cargar el formulario para registrar un parametro\nvar cargarParametroCamposCaratula=function cargarParametroCamposCaratula(){// Se deshabilita el cargando\nwindow.showSpinner(false);};// Metodo encargado de retornar el valor del parametro\nvar validarValorParametro=function validarValorParametro(parametro){// Se recorre el array de los parametros\nfor(var index=0;index<getListaValorParametro.length;index++){// Se captura el elemento por posicion\nvar element=getListaValorParametro[index];// Se valida que donde exista el parametro se retorna el label y el valor\nif(parametro==element.value){// Se setean los valores\nsetValorParametro({value:parametro,label:element.label});}}};// Metodo encargado de registrar los valores\nvar enviarDatos=function enviarDatos(valores){// Se inicializa el array\nvar data;// Se validan los campos\nif(!getNombreParametro){// Se setea el valor\nsetMensajeErrorNombreParametro('Debe ingresar un valor');// Se retorna el error\nreturn false;}else if(getNombreParametro){// Se valida que contenga caracteres invalidos\nif(containsSpecialChars(getNombreParametro)){// Se setea el valor\nsetMensajeErrorNombreParametro('Tiene caracteres inválidos');// Se retorna\nreturn false;}else{// Se setea el valor\nsetMensajeErrorNombreParametro('');}}// Se valida que tenga el minimo de caracteres ingresados\nif(getNombreParametro.length<=2){// Se setea el valor\nsetMensajeErrorNombreParametro('El parámetro debe tener al menos 3 caracteres');// Se retorna el error\nreturn false;}else{// Se setea el valor\nsetMensajeErrorNombreParametro('');}// Se valida que el valor del parametro sea diferente de null\nif(!getValorParametro.value){// Se setea el mensaje de error\nsetMensajeErrorValorParametro(\"Debe seleccionar al menos un valor\");// Se retorna el error\nreturn false;}else{// Se setea el mensaje de error\nsetMensajeErrorValorParametro(\"\");}// Se valida que el valor del parametro sea diferente de null\nif(!getArrayEstados.value){// Se setea el mensaje de error\nsetMensajeErrorEstado(\"Debe seleccionar al menos un valor\");// Se retorna el error\nreturn;}else{// Se setea el mensaje de error\nsetMensajeErrorEstado(\"\");}// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"parametro_campos_caratula\",\"attributes\":{\"nombre_campo\":getNombreParametro,\"type\":getValorParametro.value,\"estado\":getArrayEstados.value}}};// Se utiliza el cargando\nwindow.showSpinner(true);// Se inicializa la API\nGenericApi.addGeneric('parametro_campos_caratula',data).then(function(datos){// Se utiliza el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"Parámetro Campos Carátula :: Creación\",message:'Creado con éxito ',show:true,redirect:'/ParametroCamposCaratula',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"Parámetro Campos Carátula :: Error de creación\",message:datos.error.toString(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};// Metodo encargado de actualizar los valores \nvar actualizarDatos=function actualizarDatos(valores){// Se inicializa el valor del id\nvar id=from.id;// Se inicializa el array\nvar data;// Se validan los campos\nif(!getNombreParametro){// Se setea el valor\nsetMensajeErrorNombreParametro('Debe ingresar un valor');// Se retorna el error\nreturn false;}else if(getNombreParametro){// Se valida que contenga caracteres invalidos\nif(containsSpecialChars(getNombreParametro)){// Se setea el valor\nsetMensajeErrorNombreParametro('Tiene caracteres inválidos');// Se retorna\nreturn false;}else{// Se setea el valor\nsetMensajeErrorNombreParametro('');}}// Se valida que tenga el minimo de caracteres ingresados\nif(getNombreParametro.length<3){// Se setea el valor\nsetMensajeErrorNombreParametro('El parámetro debe tener al menos 3 caracteres');// Se retorna el error\nreturn false;}else{// Se setea el valor\nsetMensajeErrorNombreParametro('');}// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"parametro_campos_caratula\",\"attributes\":{\"nombre_campo\":getNombreParametro,\"type\":getValorParametro.value,\"estado\":getArrayEstados.value}}};// Se utiliza el cargando\nwindow.showSpinner(true);GenericApi.updateGeneric('parametro_campos_caratula',id,data).then(function(datos){// Se deshabilita el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"Parámetro Carátulas :: Actualización con éxito\",message:'Actualizado con éxito ',show:true,redirect:'/ParametroCamposCaratula',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"Parámetro Carátulas :: Error de actualización\",message:datos.errors[0].detail,show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};// Metodo encargado de validar el maximo de caracteres por input\nvar obtenerParametros=function obtenerParametros(){try{var data={\"data\":{\"type\":'mas_parametro',\"attributes\":{\"nombre\":\"minimo_caracteres_textarea|maximo_caracteres_textarea\"}}};// Buscamos el parametro\nGenericApi.getByDataGeneric(\"parametro/parametro-nombre\",data).then(function(datos){if(!datos.error){if(datos[\"data\"].length>0){datos[\"data\"].filter(function(data){return data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea');}).map(function(filteredName){return setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]);});datos[\"data\"].filter(function(data){return data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea');}).map(function(filteredName){return setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]);});}}else{setModalState({title:\"Antecedentes\",message:datos.error.toString(),show:true,redirect:'/AntecedentesForm',alert:global.Constants.TIPO_ALERTA.ERROR});}});}catch(error){console.log(error);}};// Metodo encargado de validar que no se ingresen caracteres invalidos\nfunction containsSpecialChars(str){var result=global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(function(specialChar){if(str.includes(specialChar)){return true;}return false;});return result;}// Metodo encargado de setear el valor del parametro\nvar changeParametro=function changeParametro(e){// Se setea el valor escrito a la constante\nsetNombreParametro(e.target.value);};// Metodo encargado de cambiar el valor del parametro\nvar selectChangeParametro=function selectChangeParametro(v){// Se setea el valor a la constante\nsetValorParametro(v);};// Metodo encargado de setear el valor del estado\nvar selectChangeEstados=function selectChangeEstados(v){// Se carga el tipo de estado en el array del select\nsetArrayEstados(v);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{}),/*#__PURE__*/_jsx(InfoErrorApi,{error:errorApi}),/*#__PURE__*/_jsx(ModalGen,{data:getModalState}),/*#__PURE__*/_jsx(Formik,{initialValues:{nombreParametro:''},enableReinitialize:true,validate:function validate(valores){},onSubmit:function onSubmit(valores,_ref){var resetForm=_ref.resetForm;if(from!=null){actualizarDatos(valores);}else{enviarDatos(valores);}},children:function children(_ref2){var errors=_ref2.errors;return/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"block block-rounded block-bordered\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"block block-themed\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsx(\"div\",{className:\"block-content\",children:/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb breadcrumb-alt push\",children:[/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Administraci\\xF3n\"})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Maestras\"})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsxs(Link,{underline:\"hover\",className:\"text-dark\",to:\"/ParametroCamposCaratula\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Lista parametros de la car\\xE1tula\"})]})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsxs(\"small\",{children:[from!=null?'Actualizar':'Crear',\" Par\\xE1metros de la car\\xE1tula\"]})]})]})})})}),/*#__PURE__*/_jsx(\"div\",{className:\"block-header\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"block-title\",children:\"Datos b\\xE1sicos\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"block-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"nombreParametro\",children:[\"Nombre par\\xE1metro \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",className:\"form-control\",id:\"nombreParametro\",name:\"nombreParametro\",value:from!=null?getNombreParametro:null,onChange:changeParametro}),getMensajeErrorNombreParametro?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorNombreParametro}):null]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"valorParametro\",children:[\"Valor par\\xE1metro \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getValorParametro?/*#__PURE__*/_jsx(Select,{id:\"valorParametro\",name:\"valorParametro\",isMulti:false,value:getValorParametro,placeholder:\"Selecciona\",noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getListaValorParametro.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeParametro(e);}}):null,getMensajeErrorValorParametro?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorValorParametro}):null]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"estado\",children:[\"Estado \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getArrayEstados?/*#__PURE__*/_jsx(Select,{id:\"estado\",name:\"estado\",isMulti:false,value:getArrayEstados,placeholder:\"Selecciona\",noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getListaEstados.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeEstados(e);}}):null,getMensajeErrorEstado?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorEstado}):null]})})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content block-content-full text-right bg-light\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-rounded btn-primary\",children:from!=null?\"Actualizar\":\"Crear\"}),/*#__PURE__*/_jsx(Link,{to:'/ParametroCamposCaratula',className:\"font-size-h5 font-w600\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-rounded btn-outline-primary\",children:\"Cancelar\"})})]})]})});}})]});}export default ParametroCamposCaratulaForm;","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Spinner","Link","GenericApi","useLocation","ModalGen","InfoErrorApi","Select","ParametroCamposCaratulaForm","getMinimoTextArea","setMinimoTextArea","getMaximoTextArea","setMaximoTextArea","errorApi","setErrorApi","title","message","show","getModalState","setModalState","countTextArea","setCountTextArea","getNombreParametro","setNombreParametro","getValorParametro","setValorParametro","getArrayEstados","setArrayEstados","getMensajeErrorNombreParametro","setMensajeErrorNombreParametro","getMensajeErrorValorParametro","setMensajeErrorValorParametro","getMensajeErrorEstado","setMensajeErrorEstado","getListaEstados","value","label","getListaValorParametro","location","from","state","fetchData","window","showSpinner","obtenerParametros","attributes","nombre_campo","validarValorParametro","type","estado","cargarParametroCamposCaratula","parametro","index","length","element","enviarDatos","valores","data","containsSpecialChars","addGeneric","then","datos","error","redirect","alert","global","Constants","TIPO_ALERTA","EXITO","toString","ERROR","actualizarDatos","id","updateGeneric","errors","detail","getByDataGeneric","filter","includes","map","filteredName","console","log","str","result","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","changeParametro","e","target","selectChangeParametro","v","selectChangeEstados","nombreParametro","resetForm"],"sources":["C:/w2d/personeria/personeria-ui/src/components/Maestras/ParametroCamposCaratulaForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport Spinner from '../Utils/Spinner';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../Utils/Constants';\r\nimport ModalGen from '../Utils/Modals/ModalGeneric';\r\nimport InfoErrorApi from '../Utils/InfoErrorApi';\r\nimport Select from 'react-select';\r\n\r\nfunction ParametroCamposCaratulaForm() {\r\n\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n\r\n    // Constantes para cargar los valores\r\n    const [getNombreParametro, setNombreParametro] = useState(\"\");\r\n    const [getValorParametro, setValorParametro] = useState([]);\r\n\r\n    const [getArrayEstados, setArrayEstados] = useState([]);\r\n\r\n    const [getMensajeErrorNombreParametro, setMensajeErrorNombreParametro] = useState(\"\");\r\n    const [getMensajeErrorValorParametro, setMensajeErrorValorParametro] = useState(\"\");\r\n    const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\r\n\r\n    const getListaEstados =\r\n        [\r\n            { value: '1', label: 'Activo' },\r\n            { value: '0', label: 'Inactivo' }\r\n        ];\r\n\r\n    const getListaValorParametro =\r\n        [\r\n            { value: 'Sinproc', label: 'N° de Sinproc' },\r\n            { value: 'Antecedentes', label: 'Listado de antecedentes' },\r\n            { value: 'Usuario', label: 'Nombre de usuario' },\r\n            { value: 'Dependencia', label: 'Dependencia de registro' },\r\n            { value: 'Vigencia', label: 'Vigencia' },\r\n            { value: 'Fecha Registro', label: 'Fecha de Registro' },\r\n            { value: 'Fecha Ingreso', label: 'Fecha de Ingreso' },\r\n            { value: 'Generado', label: 'Nombre de usuario actual' }\r\n        ];\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n\r\n            // Se habilita el cargando\r\n            window.showSpinner(true);\r\n\r\n            // Se carga la api de parametros permitidos\r\n            obtenerParametros();\r\n\r\n            if (from != null) {\r\n\r\n                // Se carga el nombre del parametro\r\n                setNombreParametro(from.attributes.nombre_campo);\r\n\r\n                // Se carga los tipos de valores por parametro\r\n                validarValorParametro(from.attributes.type);\r\n\r\n                // Se carga el estado\r\n                if (from.attributes.estado == 1) {\r\n\r\n                    // Se setea el valor del estado\r\n                    setArrayEstados({ label: 'Activo', value: from.attributes.estado });\r\n                } else {\r\n\r\n                    // Se setea el valor del estado\r\n                    setArrayEstados({ label: 'Inactivo', value: from.attributes.estado });\r\n                }\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            } else {\r\n\r\n                // Se carga los tipos de expediente por mensajes\r\n                cargarParametroCamposCaratula();\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Metodo encargado de cargar el formulario para registrar un parametro\r\n    const cargarParametroCamposCaratula = () => {\r\n\r\n        // Se deshabilita el cargando\r\n        window.showSpinner(false);\r\n    }\r\n\r\n    // Metodo encargado de retornar el valor del parametro\r\n    const validarValorParametro = (parametro) => {\r\n\r\n        // Se recorre el array de los parametros\r\n        for (let index = 0; index < getListaValorParametro.length; index++) {\r\n\r\n            // Se captura el elemento por posicion\r\n            const element = getListaValorParametro[index];\r\n\r\n            // Se valida que donde exista el parametro se retorna el label y el valor\r\n            if (parametro == element.value) {\r\n\r\n                // Se setean los valores\r\n                setValorParametro({ value: parametro, label: element.label });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Metodo encargado de registrar los valores\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se validan los campos\r\n        if (!getNombreParametro) {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('Debe ingresar un valor');\r\n\r\n            // Se retorna el error\r\n            return false;\r\n        } else if (getNombreParametro) {\r\n\r\n            // Se valida que contenga caracteres invalidos\r\n            if (containsSpecialChars(getNombreParametro)) {\r\n\r\n                // Se setea el valor\r\n                setMensajeErrorNombreParametro('Tiene caracteres inválidos');\r\n\r\n                // Se retorna\r\n                return false;\r\n            } else {\r\n\r\n                // Se setea el valor\r\n                setMensajeErrorNombreParametro('');\r\n            }\r\n        }\r\n\r\n        // Se valida que tenga el minimo de caracteres ingresados\r\n        if (getNombreParametro.length <= 2) {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('El parámetro debe tener al menos 3 caracteres');\r\n\r\n            // Se retorna el error\r\n            return false;\r\n        } else {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('');\r\n        }\r\n\r\n        // Se valida que el valor del parametro sea diferente de null\r\n        if (!getValorParametro.value) {\r\n\r\n            // Se setea el mensaje de error\r\n            setMensajeErrorValorParametro(\"Debe seleccionar al menos un valor\");\r\n\r\n            // Se retorna el error\r\n            return false;\r\n        } else {\r\n\r\n            // Se setea el mensaje de error\r\n            setMensajeErrorValorParametro(\"\");\r\n        }\r\n\r\n        // Se valida que el valor del parametro sea diferente de null\r\n        if (!getArrayEstados.value) {\r\n\r\n            // Se setea el mensaje de error\r\n            setMensajeErrorEstado(\"Debe seleccionar al menos un valor\");\r\n\r\n            // Se retorna el error\r\n            return;\r\n        } else {\r\n\r\n            // Se setea el mensaje de error\r\n            setMensajeErrorEstado(\"\");\r\n        }\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"parametro_campos_caratula\",\r\n                \"attributes\": {\r\n                    \"nombre_campo\": getNombreParametro,\r\n                    \"type\": getValorParametro.value,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.addGeneric('parametro_campos_caratula', data).then(\r\n            datos => {\r\n\r\n                // Se utiliza el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"Parámetro Campos Carátula :: Creación\", message: 'Creado con éxito ', show: true, redirect: '/ParametroCamposCaratula', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"Parámetro Campos Carátula :: Error de creación\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de actualizar los valores \r\n    const actualizarDatos = (valores) => {\r\n\r\n        // Se inicializa el valor del id\r\n        const id = from.id;\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se validan los campos\r\n        if (!getNombreParametro) {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('Debe ingresar un valor');\r\n\r\n            // Se retorna el error\r\n            return false;\r\n        } else if (getNombreParametro) {\r\n\r\n            // Se valida que contenga caracteres invalidos\r\n            if (containsSpecialChars(getNombreParametro)) {\r\n\r\n                // Se setea el valor\r\n                setMensajeErrorNombreParametro('Tiene caracteres inválidos');\r\n\r\n                // Se retorna\r\n                return false;\r\n            } else {\r\n\r\n                // Se setea el valor\r\n                setMensajeErrorNombreParametro('');\r\n            }\r\n        }\r\n\r\n        // Se valida que tenga el minimo de caracteres ingresados\r\n        if (getNombreParametro.length < 3) {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('El parámetro debe tener al menos 3 caracteres');\r\n\r\n            // Se retorna el error\r\n            return false;\r\n        } else {\r\n\r\n            // Se setea el valor\r\n            setMensajeErrorNombreParametro('');\r\n        }\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"parametro_campos_caratula\",\r\n                \"attributes\": {\r\n                    \"nombre_campo\": getNombreParametro,\r\n                    \"type\": getValorParametro.value,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        GenericApi.updateGeneric('parametro_campos_caratula', id, data).then(\r\n            datos => {\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"Parámetro Carátulas :: Actualización con éxito\", message: 'Actualizado con éxito ', show: true, redirect: '/ParametroCamposCaratula', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"Parámetro Carátulas :: Error de actualización\", message: datos.errors[0].detail, show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de validar el maximo de caracteres por input\r\n    const obtenerParametros = () => {\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"Antecedentes\", message: datos.error.toString(), show: true, redirect: '/AntecedentesForm', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de validar que no se ingresen caracteres invalidos\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    // Metodo encargado de setear el valor del parametro\r\n    const changeParametro = (e) => {\r\n\r\n        // Se setea el valor escrito a la constante\r\n        setNombreParametro(e.target.value);\r\n    }\r\n\r\n    // Metodo encargado de cambiar el valor del parametro\r\n    const selectChangeParametro = (v) => {\r\n\r\n        // Se setea el valor a la constante\r\n        setValorParametro(v)\r\n    }\r\n\r\n    // Metodo encargado de setear el valor del estado\r\n    const selectChangeEstados = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setArrayEstados(v);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<InfoErrorApi error={errorApi} />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    nombreParametro: '',\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n\r\n                    if (from != null) {\r\n                        actualizarDatos(valores);\r\n                    } else {\r\n                        enviarDatos(valores);\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"block block-rounded block-bordered\">\r\n                            <div className=\"block block-themed\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"block-content\">\r\n                                        <nav aria-label=\"breadcrumb\">\r\n                                            <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                                <li class=\"breadcrumb-item\"> <small>Administración</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>Maestras</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/ParametroCamposCaratula`}> <small>Lista parametros de la carátula</small></Link></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>{from != null ? 'Actualizar' : 'Crear'} Parámetros de la carátula</small></li>\r\n                                            </ol>\r\n                                        </nav>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-header\">\r\n                                    <h3 className=\"block-title\">Datos básicos</h3>\r\n                                </div>\r\n                                <div className=\"block-content\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"nombreParametro\">Nombre parámetro <span className=\"text-danger\">*</span></label>\r\n                                                <Field as=\"input\" type=\"text\" className=\"form-control\" id=\"nombreParametro\" name=\"nombreParametro\" value={from != null ? getNombreParametro : null} onChange={changeParametro}></Field>\r\n                                                {getMensajeErrorNombreParametro ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorNombreParametro}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"valorParametro\">Valor parámetro <span className=\"text-danger\">*</span></label>\r\n                                                {(getValorParametro) ?\r\n                                                    <Select\r\n                                                        id='valorParametro'\r\n                                                        name='valorParametro'\r\n                                                        isMulti={false}\r\n                                                        value={getValorParametro}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaValorParametro.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeParametro(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorValorParametro ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorValorParametro}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"estado\">Estado <span className=\"text-danger\">*</span></label>\r\n                                                {(getArrayEstados) ?\r\n                                                    <Select\r\n                                                        id='estado'\r\n                                                        name='estado'\r\n                                                        isMulti={false}\r\n                                                        value={getArrayEstados}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaEstados.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeEstados(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorEstado ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorEstado}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"block-content block-content-full text-right bg-light\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >\r\n                                    {from != null ? \"Actualizar\" : \"Crear\"}\r\n                                </button>\r\n                                <Link to={'/ParametroCamposCaratula'} className=\"font-size-h5 font-w600\" >\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >Cancelar</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ParametroCamposCaratulaForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}