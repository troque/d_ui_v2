{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLanguageByName = setLanguageByName;\nexports.addLanguageTranslations = addLanguageTranslations;\nexports.trModel = trModel;\nexports.trField = trField;\nexports.trError = trError;\nexports.trPath = trPath;\nexports.trPathSetBase = trPathSetBase;\nObject.defineProperty(exports, \"tr\", {\n  enumerable: true,\n  get: function get() {\n    return _translate.tr;\n  }\n});\nObject.defineProperty(exports, \"setLanguage\", {\n  enumerable: true,\n  get: function get() {\n    return _translate.setLanguage;\n  }\n});\n\nvar _translations = require(\"./translations\");\n\nvar _utils = require(\"./utils.js\");\n\nvar _translate = require(\"./translate\");\n\nvar defLangs = {\n  en: _translations.en,\n  es: _translations.es\n};\nvar modelBasePath = 'models';\n/**\n * Loads a language from the languages table.\n *\n * @param {string} name Language code as in `'en'` or `'fr'`.\n */\n\nfunction setLanguageByName(name) {\n  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);\n}\n/**\n * Allows to add a bunch of strings to a language\n */\n\n\nfunction addLanguageTranslations(lang, strings) {\n  defLangs[lang] = (0, _utils.deepmerge)(defLangs[lang], strings);\n}\n/**\n * Multipurpose semantic-ish translation.\n *\n * @param {string} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema.\n * @param {string} field Field name\n * @param {string} op Thing that varies based on\n *    the type.\n */\n\n\nfunction trModel(modelName, field, op) {\n  return (0, _translate.tr)(trPath(modelName, field, op));\n}\n/**\n * Translate field name\n *\n * @param {string|object} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema. It can also be an object with component\n *    props so it will figure out the values\n * @param {string} field Field name\n */\n\n\nfunction trField(modelName, field) {\n  if (typeof modelName == 'object') {\n    field = modelName.field;\n    modelName = modelName.schemaTypeName;\n  }\n\n  return (0, _translate.tr)(trPath(modelName, field, '_field'));\n}\n/**\n * Translates error message.\n *\n * @param {string} error Code of the error (usually the\n *    validation code-name)\n * @param {object} data Field configuration from `createSchema()`.\n */\n\n\nfunction trError(error, data) {\n  return (0, _translate.tr)(\"error.\".concat(error), data);\n}\n/**\n * Generates a model translation path.\n *\n * @param {string} model Name of the model (ie: 'client')\n * @param {string} field Name of the field\n * @param {string} op Name of the option or any subthing.\n *\n * @returns {string} id for the translation string\n */\n\n\nfunction trPath(model, field, op) {\n  if (typeof op == 'undefined') return [modelBasePath, model, field].join('.');else return [modelBasePath, model, field, op].join('.');\n}\n/**\n * Sets the base for the semantich(ish) translation, so\n * instead of 'models.<model>.<field>' can be\n * 'my.base.<model>.<field>'\n *\n * @param {string} newBasePath New path prepended to all\n *    string paths.\n */\n\n\nfunction trPathSetBase(newBasePath) {\n  modelBasePath = newBasePath;\n}","map":{"version":3,"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/translation_utils.js"],"names":["Object","defineProperty","exports","value","setLanguageByName","addLanguageTranslations","trModel","trField","trError","trPath","trPathSetBase","enumerable","get","_translate","tr","setLanguage","_translations","require","_utils","defLangs","en","es","modelBasePath","name","lang","strings","deepmerge","modelName","field","op","schemaTypeName","error","data","model","join","newBasePath"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLanguageByName = setLanguageByName;\nexports.addLanguageTranslations = addLanguageTranslations;\nexports.trModel = trModel;\nexports.trField = trField;\nexports.trError = trError;\nexports.trPath = trPath;\nexports.trPathSetBase = trPathSetBase;\nObject.defineProperty(exports, \"tr\", {\n  enumerable: true,\n  get: function () {\n    return _translate.tr;\n  }\n});\nObject.defineProperty(exports, \"setLanguage\", {\n  enumerable: true,\n  get: function () {\n    return _translate.setLanguage;\n  }\n});\n\nvar _translations = require(\"./translations\");\n\nvar _utils = require(\"./utils.js\");\n\nvar _translate = require(\"./translate\");\n\nconst defLangs = {\n  en: _translations.en,\n  es: _translations.es\n};\nlet modelBasePath = 'models';\n/**\n * Loads a language from the languages table.\n *\n * @param {string} name Language code as in `'en'` or `'fr'`.\n */\n\nfunction setLanguageByName(name) {\n  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);\n}\n/**\n * Allows to add a bunch of strings to a language\n */\n\n\nfunction addLanguageTranslations(lang, strings) {\n  defLangs[lang] = (0, _utils.deepmerge)(defLangs[lang], strings);\n}\n/**\n * Multipurpose semantic-ish translation.\n *\n * @param {string} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema.\n * @param {string} field Field name\n * @param {string} op Thing that varies based on\n *    the type.\n */\n\n\nfunction trModel(modelName, field, op) {\n  return (0, _translate.tr)(trPath(modelName, field, op));\n}\n/**\n * Translate field name\n *\n * @param {string|object} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema. It can also be an object with component\n *    props so it will figure out the values\n * @param {string} field Field name\n */\n\n\nfunction trField(modelName, field) {\n  if (typeof modelName == 'object') {\n    field = modelName.field;\n    modelName = modelName.schemaTypeName;\n  }\n\n  return (0, _translate.tr)(trPath(modelName, field, '_field'));\n}\n/**\n * Translates error message.\n *\n * @param {string} error Code of the error (usually the\n *    validation code-name)\n * @param {object} data Field configuration from `createSchema()`.\n */\n\n\nfunction trError(error, data) {\n  return (0, _translate.tr)(`error.${error}`, data);\n}\n/**\n * Generates a model translation path.\n *\n * @param {string} model Name of the model (ie: 'client')\n * @param {string} field Name of the field\n * @param {string} op Name of the option or any subthing.\n *\n * @returns {string} id for the translation string\n */\n\n\nfunction trPath(model, field, op) {\n  if (typeof op == 'undefined') return [modelBasePath, model, field].join('.');else return [modelBasePath, model, field, op].join('.');\n}\n/**\n * Sets the base for the semantich(ish) translation, so\n * instead of 'models.<model>.<field>' can be\n * 'my.base.<model>.<field>'\n *\n * @param {string} newBasePath New path prepended to all\n *    string paths.\n */\n\n\nfunction trPathSetBase(newBasePath) {\n  modelBasePath = newBasePath;\n}"]},"metadata":{},"sourceType":"script"}