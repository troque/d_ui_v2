{"ast":null,"code":"import _regeneratorRuntime from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{ErrorMessage,Field,Form,Formik}from'formik';import Spinner from'../Utils/Spinner';import{Link}from\"react-router-dom\";import GenericApi from'../Api/Services/GenericApi';import{useLocation}from'react-router-dom';import'../Utils/Constants';import ModalGen from'../Utils/Modals/ModalGeneric';import InfoErrorApi from'../Utils/InfoErrorApi';import Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function TipoUnidadForm(){// Constantes generales\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),errorApi=_useState2[0],setErrorApi=_useState2[1];var _useState3=useState({title:\"\",message:\"\",show:false}),_useState4=_slicedToArray(_useState3,2),getModalState=_useState4[0],setModalState=_useState4[1];// Constantes para cargar los valores\nvar _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),getNombreTipoUnidad=_useState6[0],setNombreTipoUnidad=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),getCodigoUnidad=_useState8[0],setCodigoUnidad=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),getDescripcionUnidad=_useState10[0],setDescripcionUnidad=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),getValueDependencias=_useState12[0],setValueDependencias=_useState12[1];// Constante para el array de los estados y dependencias\nvar _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),getArrayEstados=_useState14[0],setArrayEstados=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),getListadoDependencias=_useState16[0],setListadoDependencias=_useState16[1];// Constantes para los errores\nvar _useState17=useState(\"\"),_useState18=_slicedToArray(_useState17,2),getMensajeErrorDependencias=_useState18[0],setMensajeErrorDependencias=_useState18[1];var _useState19=useState(\"\"),_useState20=_slicedToArray(_useState19,2),getMensajeErrorEstado=_useState20[0],setMensajeErrorEstado=_useState20[1];var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),getRepuestaNombreTipoUnidad=_useState22[0],setRepuestaNombreTipoUnidad=_useState22[1];var _useState23=useState(false),_useState24=_slicedToArray(_useState23,2),getRepuestaCodigoUnidad=_useState24[0],setRepuestaCodigoUnidad=_useState24[1];var _useState25=useState(false),_useState26=_slicedToArray(_useState25,2),getRepuestaDescripcionUnidad=_useState26[0],setRepuestaDescripcionUnidad=_useState26[1];// Se inicializa el array de estados\nvar getListaEstados=[{value:'1',label:'ACTIVO'},{value:'0',label:'INACTIVO'}];var location=useLocation();var from=location.state.from;useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Se habilita el cargando\nwindow.showSpinner(true);// Se valida que haya informacion enviada por parametros al formulario\nif(from!=null){// Se carga el nombre\nsetNombreTipoUnidad(from.attributes.nombre);// Se carga el codigo de la unidad\nsetCodigoUnidad(from.attributes.codigo_unidad);// Se carga la descripcion de la unidad\nsetDescripcionUnidad(from.attributes.descripcion_unidad);// Se cargan las dependencias\ncargarDependencias();// Se carga el estado\nif(from.attributes.estado==1){setArrayEstados({label:'ACTIVO',value:from.attributes.estado});}else{setArrayEstados({label:'INACTIVO',value:from.attributes.estado});}// Se deshabilita el cargando\nwindow.showSpinner(false);}else{// Se carga los tipos de expediente por mensajes\ncargarDependencias();// Se deshabilita el cargando\nwindow.showSpinner(false);}case 2:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);// Metodo encargado de cargar las dependencias\nvar cargarDependencias=function cargarDependencias(){// Se inicializa el trycatch en caso de error de la api\ntry{// Se inicializa el array general\nvar arrayGeneral=[];// Buscamos los valores del array de los tipos de expedientes\nGenericApi.getGeneric(\"mas-dependencia-origen\").then(// Variable de la api\nfunction(datos){// Se valida que no haya ningun error\nif(!datos.error){// Se valida que el array tenga mas de 0 elementos\nif(datos[\"data\"].length>0){// Se recorre el array de los tipo de expediente\nfor(var index=0;index<datos.data.length;index++){// Se captura el valor por posicion\nvar element=datos.data[index];var dependenciaId=parseInt(element.id);// Se valida que haya informacion enviada por parametros al formulario\nif(from!=null){// Se valida cuando el elemento sea igual al elemento a editar para setear el valor\nif(dependenciaId==from.attributes.dependencia.id){// Se setea el valor\nsetValueDependencias({label:element.attributes.nombre,value:element.id});}}// Se añade al array general\narrayGeneral.push({label:element.attributes.nombre,value:element.id});}// Se añade el array general al array de los tipos de antecedentes\nsetListadoDependencias(arrayGeneral);}}else{setModalState({title:\"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\",message:datos.error.toString(),show:true,redirect:'/TipoExpedientesMensajes',alert:global.Constants.TIPO_ALERTA.ERROR});}});}catch(error){// console.log(error);\n}};// Metodo encargado de enviar los valores para crear\nvar enviarDatos=function enviarDatos(valores){// Se inicializa el array\nvar data;// Se valida que se haya seleccionado una dependencia\nif(!getValueDependencias.value){// Se redeclara el mensaje\nsetMensajeErrorDependencias(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);return false;}else if(getValueDependencias.value){// Se redeclara el mensaje en null\nsetMensajeErrorDependencias(null);// Se valida que se haya seleccionado un sub tipo de expediente\nif(!getArrayEstados.value){// Se redeclara el mensaje\nsetMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);return false;}else{// Se redeclara el mensaje\nsetMensajeErrorEstado(null);// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"mas_tipo_expediente_mensajes\",\"attributes\":{\"nombre\":getNombreTipoUnidad,\"codigo_unidad\":getCodigoUnidad,\"descripcion_unidad\":getDescripcionUnidad,\"id_dependencia\":getValueDependencias.value,\"estado\":getArrayEstados.value}}};}}// Se utiliza el cargando\nwindow.showSpinner(true);// Se inicializa la API\nGenericApi.addGeneric('mas_tipo_unidad',data).then(// Variable de API\nfunction(datos){// Se utiliza el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\",message:'Creado con éxito ',show:true,redirect:'/TipoUnidad',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\",message:datos.error.toString(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};// Metodo encargado de actualizar los valores\nvar actualizarDatos=function actualizarDatos(valores){// Se inicializa el valor del id\nvar id=from.id;// Se inicializa el array\nvar data;// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"mas_tipo_expediente_mensajes\",\"attributes\":{\"nombre\":getNombreTipoUnidad,\"codigo_unidad\":getCodigoUnidad,\"descripcion_unidad\":getDescripcionUnidad,\"id_dependencia\":getValueDependencias.value,\"estado\":getArrayEstados.value}}};// console.log(\"data -> \", data);\n// Se utiliza el cargando\nwindow.showSpinner(true);// API Encargada de actualizar \nGenericApi.updateGeneric('mas_tipo_unidad',id,data).then(// Variable de respuesta de la API\nfunction(datos){// Se deshabilita el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\",message:global.Constants.MENSAJES_MODAL.EXITOSO,show:true,redirect:'/TipoUnidad',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\",message:datos.error.toString(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};// Metodo encargado de setear el valor del estado\nvar selectChangeEstados=function selectChangeEstados(v){// Se carga el tipo de estado en el array del select\nsetArrayEstados(v);};// Metodo encargado de setear el valor de la dependencia\nvar selectChangeListadoDependencias=function selectChangeListadoDependencias(v){// Se carga el tipo de estado en el array del select\nsetValueDependencias(v);};// Metodo encargado de validar que no se ingresen caracteres invalidos\nfunction containsSpecialChars(str){var result=global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(function(specialChar){if(str.includes(specialChar)){return true;}return false;});return result;}// Metodo encargado de setear el mensaje\nvar changeMensaje=function changeMensaje(e){if(e.target.value===''||global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value)&&e.target.value.length<=255){setNombreTipoUnidad(e.target.value);setRepuestaNombreTipoUnidad(true);}};// Metodo encargado de setear el codigo de la unidad\nvar changeCodigoUnidad=function changeCodigoUnidad(e){if(e.target.value===''||global.Constants.CARACTERES_ESPECIALES.formatOnlyNumbers.test(e.target.value)&&e.target.value.length<=10){setCodigoUnidad(e.target.value);setRepuestaCodigoUnidad(true);}};// Metodo encargado de setear la descripcion de la unidad\nvar changeDescripcionUnidad=function changeDescripcionUnidad(e){if(e.target.value===''||global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value)&&e.target.value.length<=255){setDescripcionUnidad(e.target.value);setRepuestaDescripcionUnidad(true);}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{}),/*#__PURE__*/_jsx(InfoErrorApi,{error:errorApi}),/*#__PURE__*/_jsx(ModalGen,{data:getModalState}),/*#__PURE__*/_jsx(Formik,{initialValues:{nombreTipoUnidad:'',codigoUnidad:'',descripcionUnidad:''},enableReinitialize:true,validate:function validate(valores){// Se inicializa el array\nvar errores={};if(getRepuestaNombreTipoUnidad==false&&getNombreTipoUnidad!=''){errores.nombreTipoUnidad=global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;}if(getRepuestaCodigoUnidad==false&&getCodigoUnidad!=''){errores.codigoUnidad=global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;}if(getRepuestaDescripcionUnidad==false&&getDescripcionUnidad!=''){errores.descripcionUnidad=global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;}// Se valida que tenga valores el nombre\nif(!getNombreTipoUnidad){errores.nombreTipoUnidad=global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;}// Se valida que exista\nif(getNombreTipoUnidad){// Se valida que contenga caracteres invalidos\nif(containsSpecialChars(getNombreTipoUnidad)){errores.nombreTipoUnidad=global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;}}// Se retorna los errores\nreturn errores;},onSubmit:function onSubmit(valores,_ref){var resetForm=_ref.resetForm;if(from!=null){actualizarDatos(valores);}else{enviarDatos(valores);}},children:function children(_ref2){var errors=_ref2.errors;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"w2d_block\",children:/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb breadcrumb-alt push\",children:[/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(Link,{underline:\"hover\",className:\"text-dark\",to:\"/TipoUnidad\",children:/*#__PURE__*/_jsx(\"small\",{children:\"Lista de tipos de unidad\"})})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\" Tipos de unidad\"})]})]})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"block block-rounded block-bordered\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"block block-themed\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"block-header\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"block-title\",children:\"ADMINISTRACI\\xD3N :: CAR\\xC1TULA :: TIPOS DE UNIDAD\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"row text-right w2d-enter\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsx(Link,{to:'/ParametroCamposCaratula',title:\"Regresar\",children:/*#__PURE__*/_jsxs(\"button\",{type:\"button\",className:\"btn btn-primary\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-backward\"}),\" \"]})})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"nombreTipoUnidad\",children:[\"NOMBRE \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",className:\"form-control\",id:\"nombreTipoUnidad\",name:\"nombreTipoUnidad\",value:getNombreTipoUnidad,onChange:changeMensaje}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"nombreTipoUnidad\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.nombreTipoUnidad});}})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"codigoUnidad\",children:\"C\\xD3DIGO DE LA UNIDAD\"}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",className:\"form-control\",id:\"codigoUnidad\",name:\"codigoUnidad\",value:getCodigoUnidad,onChange:changeCodigoUnidad}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"codigoUnidad\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.codigoUnidad});}})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"descripcionUnidad\",children:\"DESCRIPCI\\xD3N\"}),/*#__PURE__*/_jsx(Field,{as:\"input\",type:\"text\",className:\"form-control\",id:\"descripcionUnidad\",name:\"descripcionUnidad\",value:getDescripcionUnidad,onChange:changeDescripcionUnidad}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"descripcionUnidad\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.descripcionUnidad});}})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"dependencia\",children:[\"DEPENDENCIA: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getValueDependencias?/*#__PURE__*/_jsx(Select,{id:\"dependencia\",name:\"dependencia\",isMulti:false,value:getValueDependencias,placeholder:global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION,noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getListadoDependencias.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeListadoDependencias(e);}}):null,getMensajeErrorDependencias?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorDependencias}):null]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"estado\",children:[\"ESTADO \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getArrayEstados?/*#__PURE__*/_jsx(Select,{id:\"estado\",name:\"estado\",isMulti:false,value:getArrayEstados,placeholder:global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION,noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getListaEstados.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeEstados(e);}}):null,getMensajeErrorEstado?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorEstado}):null]})})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content block-content-full text-right bg-light\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-rounded btn-primary\",children:from!=null?global.Constants.BOTON_NOMBRE.ACTUALIZAR:global.Constants.BOTON_NOMBRE.REGISTRAR}),/*#__PURE__*/_jsx(Link,{to:'/TipoUnidad',className:\"font-size-h5 font-w600\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-rounded btn-outline-primary\",children:global.Constants.BOTON_NOMBRE.CANCELAR})})]})]})]});}})]});};","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Spinner","Link","GenericApi","useLocation","ModalGen","InfoErrorApi","Select","TipoUnidadForm","errorApi","setErrorApi","title","message","show","getModalState","setModalState","getNombreTipoUnidad","setNombreTipoUnidad","getCodigoUnidad","setCodigoUnidad","getDescripcionUnidad","setDescripcionUnidad","getValueDependencias","setValueDependencias","getArrayEstados","setArrayEstados","getListadoDependencias","setListadoDependencias","getMensajeErrorDependencias","setMensajeErrorDependencias","getMensajeErrorEstado","setMensajeErrorEstado","getRepuestaNombreTipoUnidad","setRepuestaNombreTipoUnidad","getRepuestaCodigoUnidad","setRepuestaCodigoUnidad","getRepuestaDescripcionUnidad","setRepuestaDescripcionUnidad","getListaEstados","value","label","location","from","state","fetchData","window","showSpinner","attributes","nombre","codigo_unidad","descripcion_unidad","cargarDependencias","estado","arrayGeneral","getGeneric","then","datos","error","length","index","data","element","dependenciaId","parseInt","id","dependencia","push","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","enviarDatos","valores","MENSAJE_ERROR","CAMPO_OBLIGATORIO","addGeneric","EXITO","actualizarDatos","updateGeneric","MENSAJES_MODAL","EXITOSO","selectChangeEstados","v","selectChangeListadoDependencias","containsSpecialChars","str","result","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","includes","changeMensaje","e","target","formatOnlyLettersWhitAccent","test","changeCodigoUnidad","formatOnlyNumbers","changeDescripcionUnidad","nombreTipoUnidad","codigoUnidad","descripcionUnidad","errores","ERROR_FORMATO_CARACTERES_INVALIDOS","resetForm","errors","MENSAJE_INFORMATIVO","SELECCIONE_UNA_OPCION","map","BOTON_NOMBRE","ACTUALIZAR","REGISTRAR","CANCELAR"],"sources":["C:/w2d/personeria/personeria-ui/src/components/Maestras/TipoUnidadForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport Spinner from '../Utils/Spinner';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../Utils/Constants';\r\nimport ModalGen from '../Utils/Modals/ModalGeneric';\r\nimport InfoErrorApi from '../Utils/InfoErrorApi';\r\nimport Select from 'react-select';\r\n\r\nexport default function TipoUnidadForm() {\r\n\r\n    // Constantes generales\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n\r\n    // Constantes para cargar los valores\r\n    const [getNombreTipoUnidad, setNombreTipoUnidad] = useState(\"\");\r\n    const [getCodigoUnidad, setCodigoUnidad] = useState(\"\");\r\n    const [getDescripcionUnidad, setDescripcionUnidad] = useState(\"\");\r\n    const [getValueDependencias, setValueDependencias] = useState([]);\r\n\r\n    // Constante para el array de los estados y dependencias\r\n    const [getArrayEstados, setArrayEstados] = useState([]);\r\n    const [getListadoDependencias, setListadoDependencias] = useState([]);\r\n\r\n    // Constantes para los errores\r\n    const [getMensajeErrorDependencias, setMensajeErrorDependencias] = useState(\"\");\r\n    const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\r\n    const [getRepuestaNombreTipoUnidad, setRepuestaNombreTipoUnidad] = useState(false);\r\n    const [getRepuestaCodigoUnidad, setRepuestaCodigoUnidad] = useState(false);\r\n    const [getRepuestaDescripcionUnidad, setRepuestaDescripcionUnidad] = useState(false);\r\n\r\n    // Se inicializa el array de estados\r\n    const getListaEstados =\r\n        [\r\n            { value: '1', label: 'ACTIVO' },\r\n            { value: '0', label: 'INACTIVO' }\r\n        ];\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n\r\n            // Se habilita el cargando\r\n            window.showSpinner(true);\r\n\r\n            // Se valida que haya informacion enviada por parametros al formulario\r\n            if (from != null) {\r\n\r\n                // Se carga el nombre\r\n                setNombreTipoUnidad(from.attributes.nombre);\r\n\r\n                // Se carga el codigo de la unidad\r\n                setCodigoUnidad(from.attributes.codigo_unidad);\r\n\r\n                // Se carga la descripcion de la unidad\r\n                setDescripcionUnidad(from.attributes.descripcion_unidad);\r\n\r\n                // Se cargan las dependencias\r\n                cargarDependencias();\r\n\r\n                // Se carga el estado\r\n                if (from.attributes.estado == 1) {\r\n                    setArrayEstados({ label: 'ACTIVO', value: from.attributes.estado });\r\n                } else {\r\n                    setArrayEstados({ label: 'INACTIVO', value: from.attributes.estado });\r\n                }\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            } else {\r\n\r\n                // Se carga los tipos de expediente por mensajes\r\n                cargarDependencias();\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Metodo encargado de cargar las dependencias\r\n    const cargarDependencias = () => {\r\n\r\n        // Se inicializa el trycatch en caso de error de la api\r\n        try {\r\n\r\n            // Se inicializa el array general\r\n            var arrayGeneral = [];\r\n\r\n            // Buscamos los valores del array de los tipos de expedientes\r\n            GenericApi.getGeneric(\"mas-dependencia-origen\").then(\r\n\r\n                // Variable de la api\r\n                datos => {\r\n\r\n                    // Se valida que no haya ningun error\r\n                    if (!datos.error) {\r\n\r\n                        // Se valida que el array tenga mas de 0 elementos\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            // Se recorre el array de los tipo de expediente\r\n                            for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                                // Se captura el valor por posicion\r\n                                const element = datos.data[index];\r\n                                const dependenciaId = parseInt(element.id);\r\n\r\n                                // Se valida que haya informacion enviada por parametros al formulario\r\n                                if (from != null) {\r\n\r\n                                    // Se valida cuando el elemento sea igual al elemento a editar para setear el valor\r\n                                    if (dependenciaId == from.attributes.dependencia.id) {\r\n\r\n                                        // Se setea el valor\r\n                                        setValueDependencias({ label: element.attributes.nombre, value: element.id })\r\n                                    }\r\n                                }\r\n\r\n                                // Se añade al array general\r\n                                arrayGeneral.push({ label: element.attributes.nombre, value: element.id });\r\n                            }\r\n\r\n                            // Se añade el array general al array de los tipos de antecedentes\r\n                            setListadoDependencias(arrayGeneral);\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\", message: datos.error.toString(), show: true, redirect: '/TipoExpedientesMensajes', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de enviar los valores para crear\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se valida que se haya seleccionado una dependencia\r\n        if (!getValueDependencias.value) {\r\n\r\n            // Se redeclara el mensaje\r\n            setMensajeErrorDependencias(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n            return false;\r\n        } else if (getValueDependencias.value) {\r\n\r\n            // Se redeclara el mensaje en null\r\n            setMensajeErrorDependencias(null);\r\n\r\n            // Se valida que se haya seleccionado un sub tipo de expediente\r\n            if (!getArrayEstados.value) {\r\n\r\n                // Se redeclara el mensaje\r\n                setMensajeErrorEstado(global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO);\r\n                return false;\r\n            } else {\r\n\r\n                // Se redeclara el mensaje\r\n                setMensajeErrorEstado(null);\r\n\r\n                // Se inicializa el array a enviar por post\r\n                data = {\r\n                    \"data\": {\r\n                        \"type\": \"mas_tipo_expediente_mensajes\",\r\n                        \"attributes\": {\r\n                            \"nombre\": getNombreTipoUnidad,\r\n                            \"codigo_unidad\": getCodigoUnidad,\r\n                            \"descripcion_unidad\": getDescripcionUnidad,\r\n                            \"id_dependencia\": getValueDependencias.value,\r\n                            \"estado\": getArrayEstados.value\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.addGeneric('mas_tipo_unidad', data).then(\r\n\r\n            // Variable de API\r\n            datos => {\r\n\r\n                // Se utiliza el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\", message: 'Creado con éxito ', show: true, redirect: '/TipoUnidad', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de actualizar los valores\r\n    const actualizarDatos = (valores) => {\r\n\r\n        // Se inicializa el valor del id\r\n        const id = from.id;\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                \"attributes\": {\r\n                    \"nombre\": getNombreTipoUnidad,\r\n                    \"codigo_unidad\": getCodigoUnidad,\r\n                    \"descripcion_unidad\": getDescripcionUnidad,\r\n                    \"id_dependencia\": getValueDependencias.value,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // console.log(\"data -> \", data);\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // API Encargada de actualizar \r\n        GenericApi.updateGeneric('mas_tipo_unidad', id, data).then(\r\n\r\n            // Variable de respuesta de la API\r\n            datos => {\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\", message: global.Constants.MENSAJES_MODAL.EXITOSO, show: true, redirect: '/TipoUnidad', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                }\r\n                else {\r\n                    setModalState({ title: \"ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de setear el valor del estado\r\n    const selectChangeEstados = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setArrayEstados(v);\r\n    }\r\n\r\n    // Metodo encargado de setear el valor de la dependencia\r\n    const selectChangeListadoDependencias = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setValueDependencias(v);\r\n    }\r\n\r\n    // Metodo encargado de validar que no se ingresen caracteres invalidos\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    // Metodo encargado de setear el mensaje\r\n    const changeMensaje = (e) => {\r\n        if (e.target.value === '' || \r\n        (global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && \r\n        e.target.value.length <= 255)) {\r\n            setNombreTipoUnidad(e.target.value);\r\n            setRepuestaNombreTipoUnidad(true);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de setear el codigo de la unidad\r\n    const changeCodigoUnidad = (e) => {\r\n        if (e.target.value === '' || \r\n        (global.Constants.CARACTERES_ESPECIALES.formatOnlyNumbers.test(e.target.value) && \r\n        e.target.value.length <= 10)) {\r\n            setCodigoUnidad(e.target.value);\r\n            setRepuestaCodigoUnidad(true);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de setear la descripcion de la unidad\r\n    const changeDescripcionUnidad = (e) => {\r\n        if (e.target.value === '' || \r\n        (global.Constants.CARACTERES_ESPECIALES.formatOnlyLettersWhitAccent.test(e.target.value) && \r\n        e.target.value.length <= 255)) {\r\n            setDescripcionUnidad(e.target.value);\r\n            setRepuestaDescripcionUnidad(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<InfoErrorApi error={errorApi} />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    nombreTipoUnidad: '',\r\n                    codigoUnidad: '',\r\n                    descripcionUnidad: '',\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                    // Se inicializa el array\r\n                    let errores = {};\r\n\r\n                    if(getRepuestaNombreTipoUnidad == false && getNombreTipoUnidad != ''){\r\n                        errores.nombreTipoUnidad = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                    }\r\n\r\n                    if(getRepuestaCodigoUnidad == false && getCodigoUnidad != ''){\r\n                        errores.codigoUnidad = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                    }\r\n\r\n                    if(getRepuestaDescripcionUnidad == false && getDescripcionUnidad != ''){\r\n                        errores.descripcionUnidad = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                    }\r\n\r\n                    // Se valida que tenga valores el nombre\r\n                    if (!getNombreTipoUnidad) {\r\n                        errores.nombreTipoUnidad = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\r\n                    }\r\n\r\n                    // Se valida que exista\r\n                    if (getNombreTipoUnidad) {\r\n\r\n                        // Se valida que contenga caracteres invalidos\r\n                        if (containsSpecialChars(getNombreTipoUnidad)) {\r\n                            errores.nombreTipoUnidad = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                        }\r\n                    }\r\n\r\n                    // Se retorna los errores\r\n                    return errores;\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n\r\n                    if (from != null) {\r\n                        actualizarDatos(valores);\r\n                    } else {\r\n                        enviarDatos(valores);\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n\r\n                        <div className=\"w2d_block\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/TipoUnidad`}><small>Lista de tipos de unidad</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <small> Tipos de unidad</small></li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n\r\n                        <div className=\"block block-rounded block-bordered\">\r\n\r\n                            <div className=\"block block-themed\">\r\n\r\n                                <div className=\"block-header\">\r\n                                    <h3 className=\"block-title\">ADMINISTRACIÓN :: CARÁTULA :: TIPOS DE UNIDAD</h3>\r\n                                </div>\r\n                                <div className=\"block-content\">\r\n\r\n                                    <div className=\"row text-right w2d-enter\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <Link to={'/ParametroCamposCaratula'} title='Regresar'>\r\n                                                <button type=\"button\" className=\"btn btn-primary\"><i className=\"fas fa-backward\"></i> </button>\r\n                                            </Link>                                            \r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"nombreTipoUnidad\">NOMBRE <span className=\"text-danger\">*</span></label>\r\n                                                <Field as=\"input\" type=\"text\" className=\"form-control\" id=\"nombreTipoUnidad\" name=\"nombreTipoUnidad\" value={getNombreTipoUnidad} onChange={changeMensaje}></Field>\r\n                                                <ErrorMessage name=\"nombreTipoUnidad\" component={() => (<span className=\"text-danger\">{errors.nombreTipoUnidad}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"codigoUnidad\">CÓDIGO DE LA UNIDAD</label>\r\n                                                <Field as=\"input\" type=\"text\" className=\"form-control\" id=\"codigoUnidad\" name=\"codigoUnidad\" value={getCodigoUnidad} onChange={changeCodigoUnidad}></Field>\r\n                                                <ErrorMessage name=\"codigoUnidad\" component={() => (<span className=\"text-danger\">{errors.codigoUnidad}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"descripcionUnidad\">DESCRIPCIÓN</label>\r\n                                                <Field as=\"input\" type=\"text\" className=\"form-control\" id=\"descripcionUnidad\" name=\"descripcionUnidad\" value={getDescripcionUnidad} onChange={changeDescripcionUnidad}></Field>\r\n                                                <ErrorMessage name=\"descripcionUnidad\" component={() => (<span className=\"text-danger\">{errors.descripcionUnidad}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"dependencia\">DEPENDENCIA: <span className=\"text-danger\">*</span></label>\r\n                                                {getValueDependencias ?\r\n                                                    <Select\r\n                                                        id='dependencia'\r\n                                                        name='dependencia'\r\n                                                        isMulti={false}\r\n                                                        value={getValueDependencias}\r\n                                                        placeholder= {global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListadoDependencias.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeListadoDependencias(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorDependencias ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorDependencias}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"estado\">ESTADO <span className=\"text-danger\">*</span></label>\r\n                                                {(getArrayEstados) ?\r\n                                                    <Select\r\n                                                        id='estado'\r\n                                                        name='estado'\r\n                                                        isMulti={false}\r\n                                                        value={getArrayEstados}\r\n                                                        placeholder= {global.Constants.MENSAJE_INFORMATIVO.SELECCIONE_UNA_OPCION}\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaEstados.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeEstados(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorEstado ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorEstado}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"block-content block-content-full text-right bg-light\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >\r\n                                    {from != null ? global.Constants.BOTON_NOMBRE.ACTUALIZAR : global.Constants.BOTON_NOMBRE.REGISTRAR}\r\n                                </button>\r\n                                <Link to={'/TipoUnidad'} className=\"font-size-h5 font-w600\" >\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}