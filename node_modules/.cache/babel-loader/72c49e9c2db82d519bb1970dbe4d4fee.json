{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumberedArray = createNumberedArray;\nexports.deepmerge = deepmerge;\nexports.getPropsTransform = getPropsTransform;\nexports.getSkinComponent = getSkinComponent;\nexports.inputName = inputName;\nexports.isObject = isObject;\nexports.objectTraverse = objectTraverse;\nexports.pathToArray = pathToArray;\nexports.processOptions = processOptions;\nexports.schemaType = void 0;\nexports.schemaTypeEx = schemaTypeEx;\nexports.valueFromEvent = valueFromEvent;\nexports.valueOrCreate = valueOrCreate;\nvar _translation_utils = require(\"./translation_utils\");\nconst _excluded = [\"fieldSchema\", \"schemaTypeName\", \"field\", \"options\", \"addDefault\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n\n/**\n * Translates schema specification type. Types can\n * be specified with a string or a constructor like\n * String.\n *\n * @param {string|function} type Type specification.\n *\n * @returns {string} Type as string.\n */\nconst schemaType = type => {\n  if (typeof type == 'function') return typeof type();else return type;\n};\n/**\n * Translates the schema's type specification. Type\n * can be specified as with schemaType and also can\n * be a subschema or an array of other schema.\n *\n * @param {any} type Can be:\n *    - String like 'number'\n *    - Constructor like Number\n *    - Schema instance\n *    - Array with schema instance in the first element.\n *        Example: [client]\n */\n\nexports.schemaType = schemaType;\nfunction schemaTypeEx(type) {\n  if (typeof type == 'object' && type._type == 'schema') return 'schema';else {\n    const isArray = Array.isArray(type);\n    const first = type && type[0];\n    const isSchema = isArray && type.length > 0 && first._type && first._type == 'schema';\n    if (isSchema) return 'array';else return schemaType(type);\n  }\n} // Thanks Mariuzzo\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\n\nfunction isObject(item) {\n  return typeof item == 'object' && !(item instanceof Date);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\nfunction deepmerge(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        const sourceIsArray = Array.isArray(source[key]);\n        if (!target[key]) {\n          if (sourceIsArray) Object.assign(target, {\n            [key]: []\n          });else Object.assign(target, {\n            [key]: {}\n          });\n        } // Arrays are overwritten\n\n        if (sourceIsArray) target[key] = _toConsumableArray(source[key]);else deepmerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return deepmerge.apply(void 0, [target].concat(sources));\n}\nfunction createNumberedArray(length) {\n  return Array.from({\n    length\n  }, (_, k) => k);\n}\n/**\n * Converts options from different formats to\n * [ { label, value } ]\n *\n * You can usually pass control props here. Options will\n * be acquired from fieldSchema.\n *\n * @param {string} schemaTypeName Model name\n * @param {string} field Field name\n * @param {function|array} options Array with options. If\n *  it's a function it will be called with props.\n *  Array (or resulting one after calling) will be processed\n *  to populate label and value.\n */\n\nfunction processOptions(_ref) {\n  let {\n      fieldSchema,\n      schemaTypeName,\n      field,\n      options,\n      addDefault\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (fieldSchema && !options) options = fieldSchema.options;\n  const extracted = typeof options == 'function' ? options(_objectSpread({\n    name,\n    field,\n    schemaTypeName\n  }, rest)) : options;\n  const getLabel = option => (0, _translation_utils.trModel)(schemaTypeName, field, option);\n  const processed = extracted.map(option => {\n    if (typeof option == 'string') {\n      return {\n        value: option,\n        label: getLabel(option)\n      };\n    } else {\n      if ('key' in option) {\n        return _objectSpread(_objectSpread({}, option), {}, {\n          label: option.label || getLabel(option.key)\n        });\n      } else return option;\n    }\n  });\n  if (addDefault) {\n    return [{\n      label: (0, _translation_utils.trModel)(schemaTypeName, field, '_default'),\n      value: ''\n    }].concat(_toConsumableArray(processed));\n  } else {\n    return processed;\n  }\n}\n/**\n * Transforms typical form path to array. Example:\n *\n * `pathToArray(\"pets[4].name\") --> ['pets', '4', 'name']`\n * `pathToArray(\"pets.4.name\") --> ['pets', '4', 'name']`\n */\n\nfunction pathToArray(path) {\n  const unsquared = path.replace(/[[.](.*?)[\\].]/g, '.$1.');\n  return unsquared.split('.');\n}\n/**\n * Traverses an object using an array of keys.\n *\n * @param {object} object Object to traverse\n * @param {string|array} path Path in the form `\"pets.4.name\"`,\n *  `\"pets[4].name\"` or `['pets', '4', 'name']`\n * @param {object} options Optional options:\n *  {\n *    createIfMissing: false, // Creates missing entities with objects,\n *    returnValue: false,     // Ultimate value if you are not interested\n *                            // in context\n *  }\n *\n * @returns {array} Array in the form `[ object, attribute ]`\n *  (or empty if subobject is not found).\n *\n *  This allows you to mutate original object like this:\n *\n *  const [ container, attribute ] = objectTraverse(obj, path)\n *  container[attribute] = newValue\n *\n * TODO When createIfMissing, use path brackets as a\n * hint to when to create arrays or objects\n */\n\nfunction objectTraverse(object, pathOrArray) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    createIfMissing,\n    returnValue\n  } = options;\n  const arrayed = Array.isArray(pathOrArray) ? pathOrArray : pathToArray(pathOrArray);\n  const [next, ...rest] = arrayed;\n  if (next in object) {\n    if (rest.length == 0) {\n      if (returnValue) return object[next];else return [object, next];\n    } else {\n      if (createIfMissing && typeof object[next] == 'undefined') object[next] = {};\n      return objectTraverse(object[next], rest, options);\n    }\n  } else {\n    if (createIfMissing) {\n      object[next] = {}; // Repeat\n\n      return objectTraverse(object, arrayed, options);\n    } else {\n      if (returnValue) return null;else return [];\n    }\n  }\n}\n/**\n * Returns input name in the form 'parent.index.field'\n *\n * @param {string} parent Optional parent\n * @param {number|string} index Optional index\n * @param {string} field Field\n *\n * @returns {string} Depends:\n *      - If you passed index, then '<parent>.<index>.<field>'\n *      - Else if you passed parent, then '<parent>.<field>'\n *      - Else field\n */\n\nfunction inputName(_ref2) {\n  let {\n    parent,\n    index,\n    field\n  } = _ref2;\n  if (typeof index == 'undefined') return parent ? `${parent}.${field}` : field;else return `${parent || ''}.${index}.${field}`;\n}\n/**\n * If attr is not found in object, we create it in the form\n * object[attr] = defaultObject\n *\n * @param {object} object Object\n * @param {string} attr Key\n * @param {function} create Function that returns a brand new\n *    object to assign if it didn't exist. Important: It must be\n *    a new object.\n *\n * @returns New or existing object[attr]\n *\n * @example\n *  const obj = { existing: { count: 42 } }\n *\n *  valueOrCreate(obj, 'existing', () => ({ count: 0 }))\n *    // -> { count: 42 }\n *  valueOrCreate(obj, 'invented', () => ({ count: 0 }))\n *    // -> { count: 0 }\n */\n\nfunction valueOrCreate(object, attr, create) {\n  if (!(attr in object)) object[attr] = create();\n  return object[attr];\n}\n/**\n * @param {any} thing If thing is an event, value\n *  will be extracted. I consider event anything\n *  that has target with type\n * @returns {any} value\n */\n\nfunction valueFromEvent(thing) {\n  if ('target' in thing) {\n    const {\n      target,\n      target: {\n        type,\n        value\n      }\n    } = thing;\n    switch (type) {\n      case 'checkbox':\n        return target.checked;\n      default:\n        return value;\n    }\n  } else {\n    return thing;\n  }\n}\n/**\n * Gets props transform from skin element (formelly `render`)\n */\n\nfunction getPropsTransform(skinElement) {\n  return skinElement.props || skinElement.render;\n}\n/**\n * Gets component from skin element\n */\n\nfunction getSkinComponent(skinElement) {\n  return skinElement.component || skinElement.render;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createNumberedArray","deepmerge","getPropsTransform","getSkinComponent","inputName","isObject","objectTraverse","pathToArray","processOptions","schemaType","schemaTypeEx","valueFromEvent","valueOrCreate","_translation_utils","require","_excluded","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","arr2","type","_type","first","isSchema","item","Date","sources","shift","sourceIsArray","assign","concat","_","k","_ref","fieldSchema","schemaTypeName","field","options","addDefault","rest","extracted","getLabel","option","trModel","processed","map","label","path","unsquared","replace","split","pathOrArray","createIfMissing","returnValue","arrayed","next","parent","index","attr","create","thing","checked","skinElement","props","render","component"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNumberedArray = createNumberedArray;\nexports.deepmerge = deepmerge;\nexports.getPropsTransform = getPropsTransform;\nexports.getSkinComponent = getSkinComponent;\nexports.inputName = inputName;\nexports.isObject = isObject;\nexports.objectTraverse = objectTraverse;\nexports.pathToArray = pathToArray;\nexports.processOptions = processOptions;\nexports.schemaType = void 0;\nexports.schemaTypeEx = schemaTypeEx;\nexports.valueFromEvent = valueFromEvent;\nexports.valueOrCreate = valueOrCreate;\n\nvar _translation_utils = require(\"./translation_utils\");\n\nconst _excluded = [\"fieldSchema\", \"schemaTypeName\", \"field\", \"options\", \"addDefault\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/**\n * Translates schema specification type. Types can\n * be specified with a string or a constructor like\n * String.\n *\n * @param {string|function} type Type specification.\n *\n * @returns {string} Type as string.\n */\nconst schemaType = type => {\n  if (typeof type == 'function') return typeof type();else return type;\n};\n/**\n * Translates the schema's type specification. Type\n * can be specified as with schemaType and also can\n * be a subschema or an array of other schema.\n *\n * @param {any} type Can be:\n *    - String like 'number'\n *    - Constructor like Number\n *    - Schema instance\n *    - Array with schema instance in the first element.\n *        Example: [client]\n */\n\n\nexports.schemaType = schemaType;\n\nfunction schemaTypeEx(type) {\n  if (typeof type == 'object' && type._type == 'schema') return 'schema';else {\n    const isArray = Array.isArray(type);\n    const first = type && type[0];\n    const isSchema = isArray && type.length > 0 && first._type && first._type == 'schema';\n    if (isSchema) return 'array';else return schemaType(type);\n  }\n} // Thanks Mariuzzo\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\n\n\nfunction isObject(item) {\n  return typeof item == 'object' && !(item instanceof Date);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\n\nfunction deepmerge(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        const sourceIsArray = Array.isArray(source[key]);\n\n        if (!target[key]) {\n          if (sourceIsArray) Object.assign(target, {\n            [key]: []\n          });else Object.assign(target, {\n            [key]: {}\n          });\n        } // Arrays are overwritten\n\n\n        if (sourceIsArray) target[key] = _toConsumableArray(source[key]);else deepmerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepmerge.apply(void 0, [target].concat(sources));\n}\n\nfunction createNumberedArray(length) {\n  return Array.from({\n    length\n  }, (_, k) => k);\n}\n/**\n * Converts options from different formats to\n * [ { label, value } ]\n *\n * You can usually pass control props here. Options will\n * be acquired from fieldSchema.\n *\n * @param {string} schemaTypeName Model name\n * @param {string} field Field name\n * @param {function|array} options Array with options. If\n *  it's a function it will be called with props.\n *  Array (or resulting one after calling) will be processed\n *  to populate label and value.\n */\n\n\nfunction processOptions(_ref) {\n  let {\n    fieldSchema,\n    schemaTypeName,\n    field,\n    options,\n    addDefault\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (fieldSchema && !options) options = fieldSchema.options;\n  const extracted = typeof options == 'function' ? options(_objectSpread({\n    name,\n    field,\n    schemaTypeName\n  }, rest)) : options;\n\n  const getLabel = option => (0, _translation_utils.trModel)(schemaTypeName, field, option);\n\n  const processed = extracted.map(option => {\n    if (typeof option == 'string') {\n      return {\n        value: option,\n        label: getLabel(option)\n      };\n    } else {\n      if ('key' in option) {\n        return _objectSpread(_objectSpread({}, option), {}, {\n          label: option.label || getLabel(option.key)\n        });\n      } else return option;\n    }\n  });\n\n  if (addDefault) {\n    return [{\n      label: (0, _translation_utils.trModel)(schemaTypeName, field, '_default'),\n      value: ''\n    }].concat(_toConsumableArray(processed));\n  } else {\n    return processed;\n  }\n}\n/**\n * Transforms typical form path to array. Example:\n *\n * `pathToArray(\"pets[4].name\") --> ['pets', '4', 'name']`\n * `pathToArray(\"pets.4.name\") --> ['pets', '4', 'name']`\n */\n\n\nfunction pathToArray(path) {\n  const unsquared = path.replace(/[[.](.*?)[\\].]/g, '.$1.');\n  return unsquared.split('.');\n}\n/**\n * Traverses an object using an array of keys.\n *\n * @param {object} object Object to traverse\n * @param {string|array} path Path in the form `\"pets.4.name\"`,\n *  `\"pets[4].name\"` or `['pets', '4', 'name']`\n * @param {object} options Optional options:\n *  {\n *    createIfMissing: false, // Creates missing entities with objects,\n *    returnValue: false,     // Ultimate value if you are not interested\n *                            // in context\n *  }\n *\n * @returns {array} Array in the form `[ object, attribute ]`\n *  (or empty if subobject is not found).\n *\n *  This allows you to mutate original object like this:\n *\n *  const [ container, attribute ] = objectTraverse(obj, path)\n *  container[attribute] = newValue\n *\n * TODO When createIfMissing, use path brackets as a\n * hint to when to create arrays or objects\n */\n\n\nfunction objectTraverse(object, pathOrArray, options = {}) {\n  const {\n    createIfMissing,\n    returnValue\n  } = options;\n  const arrayed = Array.isArray(pathOrArray) ? pathOrArray : pathToArray(pathOrArray);\n  const [next, ...rest] = arrayed;\n\n  if (next in object) {\n    if (rest.length == 0) {\n      if (returnValue) return object[next];else return [object, next];\n    } else {\n      if (createIfMissing && typeof object[next] == 'undefined') object[next] = {};\n      return objectTraverse(object[next], rest, options);\n    }\n  } else {\n    if (createIfMissing) {\n      object[next] = {}; // Repeat\n\n      return objectTraverse(object, arrayed, options);\n    } else {\n      if (returnValue) return null;else return [];\n    }\n  }\n}\n/**\n * Returns input name in the form 'parent.index.field'\n *\n * @param {string} parent Optional parent\n * @param {number|string} index Optional index\n * @param {string} field Field\n *\n * @returns {string} Depends:\n *      - If you passed index, then '<parent>.<index>.<field>'\n *      - Else if you passed parent, then '<parent>.<field>'\n *      - Else field\n */\n\n\nfunction inputName({\n  parent,\n  index,\n  field\n}) {\n  if (typeof index == 'undefined') return parent ? `${parent}.${field}` : field;else return `${parent || ''}.${index}.${field}`;\n}\n/**\n * If attr is not found in object, we create it in the form\n * object[attr] = defaultObject\n *\n * @param {object} object Object\n * @param {string} attr Key\n * @param {function} create Function that returns a brand new\n *    object to assign if it didn't exist. Important: It must be\n *    a new object.\n *\n * @returns New or existing object[attr]\n *\n * @example\n *  const obj = { existing: { count: 42 } }\n *\n *  valueOrCreate(obj, 'existing', () => ({ count: 0 }))\n *    // -> { count: 42 }\n *  valueOrCreate(obj, 'invented', () => ({ count: 0 }))\n *    // -> { count: 0 }\n */\n\n\nfunction valueOrCreate(object, attr, create) {\n  if (!(attr in object)) object[attr] = create();\n  return object[attr];\n}\n/**\n * @param {any} thing If thing is an event, value\n *  will be extracted. I consider event anything\n *  that has target with type\n * @returns {any} value\n */\n\n\nfunction valueFromEvent(thing) {\n  if ('target' in thing) {\n    const {\n      target,\n      target: {\n        type,\n        value\n      }\n    } = thing;\n\n    switch (type) {\n      case 'checkbox':\n        return target.checked;\n\n      default:\n        return value;\n    }\n  } else {\n    return thing;\n  }\n}\n/**\n * Gets props transform from skin element (formelly `render`)\n */\n\n\nfunction getPropsTransform(skinElement) {\n  return skinElement.props || skinElement.render;\n}\n/**\n * Gets component from skin element\n */\n\n\nfunction getSkinComponent(skinElement) {\n  return skinElement.component || skinElement.render;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}