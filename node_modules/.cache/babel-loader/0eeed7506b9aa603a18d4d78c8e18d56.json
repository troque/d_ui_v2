{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * The shared strings table.\n * @ignore\n */\nclass SharedStrings {\n  /**\n   * Constructs a new instance of _SharedStrings.\n   * @param {{}} node - The node.\n   */\n  constructor(node) {\n    this._stringArray = [];\n    this._indexMap = {};\n    this._init(node);\n    this._cacheExistingSharedStrings();\n  }\n\n  /**\n   * Gets the index for a string\n   * @param {string|Array.<{}>} string - The string or rich text array.\n   * @returns {number} The index\n   */\n  getIndexForString(string) {\n    // If the string is found in the cache, return the index.\n    const key = _.isArray(string) ? JSON.stringify(string) : string;\n    let index = this._indexMap[key];\n    if (index >= 0) return index;\n\n    // Otherwise, add it to the caches.\n    index = this._stringArray.length;\n    this._stringArray.push(string);\n    this._indexMap[key] = index;\n\n    // Append a new si node.\n    this._node.children.push({\n      name: \"si\",\n      children: _.isArray(string) ? string : [{\n        name: \"t\",\n        attributes: {\n          'xml:space': \"preserve\"\n        },\n        children: [string]\n      }]\n    });\n    return index;\n  }\n\n  /**\n   * Get the string for a given index\n   * @param {number} index - The index\n   * @returns {string} The string\n   */\n  getStringByIndex(index) {\n    return this._stringArray[index];\n  }\n\n  /**\n   * Convert the collection to an XML object.\n   * @returns {{}} The XML object.\n   */\n  toXml() {\n    return this._node;\n  }\n\n  /**\n   * Store any existing values in the caches.\n   * @private\n   * @returns {undefined}\n   */\n  _cacheExistingSharedStrings() {\n    this._node.children.forEach((node, i) => {\n      const content = node.children[0];\n      if (content.name === \"t\") {\n        const string = content.children[0];\n        this._stringArray.push(string);\n        this._indexMap[string] = i;\n      } else {\n        // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n        this._stringArray.push(node.children);\n        this._indexMap[JSON.stringify(node.children)] = i;\n      }\n    });\n  }\n\n  /**\n   * Initialize the node.\n   * @param {{}} [node] - The shared strings node.\n   * @private\n   * @returns {undefined}\n   */\n  _init(node) {\n    if (!node) node = {\n      name: \"sst\",\n      attributes: {\n        xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n      },\n      children: []\n    };\n    this._node = node;\n    delete this._node.attributes.count;\n    delete this._node.attributes.uniqueCount;\n  }\n}\nmodule.exports = SharedStrings;\n\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/","map":{"version":3,"names":["_","require","SharedStrings","constructor","node","_stringArray","_indexMap","_init","_cacheExistingSharedStrings","getIndexForString","string","key","isArray","JSON","stringify","index","length","push","_node","children","name","attributes","getStringByIndex","toXml","forEach","i","content","xmlns","count","uniqueCount","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/SharedStrings.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * The shared strings table.\n * @ignore\n */\nclass SharedStrings {\n    /**\n     * Constructs a new instance of _SharedStrings.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._stringArray = [];\n        this._indexMap = {};\n\n        this._init(node);\n        this._cacheExistingSharedStrings();\n    }\n\n    /**\n     * Gets the index for a string\n     * @param {string|Array.<{}>} string - The string or rich text array.\n     * @returns {number} The index\n     */\n    getIndexForString(string) {\n        // If the string is found in the cache, return the index.\n        const key = _.isArray(string) ? JSON.stringify(string) : string;\n        let index = this._indexMap[key];\n        if (index >= 0) return index;\n\n        // Otherwise, add it to the caches.\n        index = this._stringArray.length;\n        this._stringArray.push(string);\n        this._indexMap[key] = index;\n\n        // Append a new si node.\n        this._node.children.push({\n            name: \"si\",\n            children: _.isArray(string) ? string : [\n                {\n                    name: \"t\",\n                    attributes: { 'xml:space': \"preserve\" },\n                    children: [string]\n                }\n            ]\n        });\n\n        return index;\n    }\n\n    /**\n     * Get the string for a given index\n     * @param {number} index - The index\n     * @returns {string} The string\n     */\n    getStringByIndex(index) {\n        return this._stringArray[index];\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML object.\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Store any existing values in the caches.\n     * @private\n     * @returns {undefined}\n     */\n    _cacheExistingSharedStrings() {\n        this._node.children.forEach((node, i) => {\n            const content = node.children[0];\n            if (content.name === \"t\") {\n                const string = content.children[0];\n                this._stringArray.push(string);\n                this._indexMap[string] = i;\n            } else {\n                // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n                this._stringArray.push(node.children);\n                this._indexMap[JSON.stringify(node.children)] = i;\n            }\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The shared strings node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"sst\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n            },\n            children: []\n        };\n\n        this._node = node;\n\n        delete this._node.attributes.count;\n        delete this._node.attributes.uniqueCount;\n    }\n}\n\nmodule.exports = SharedStrings;\n\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}