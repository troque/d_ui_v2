{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSchema = createSchema;\n\n/**\n * Creates a Schema from the specification.\n *\n * @function\n * @param {string} typeName Name of the model being created.\n *    It can be chosen freely.\n * @param {object} schema Schema specification.\n */\nfunction createSchema(typeName, schema) {\n  return {\n    _type: 'schema',\n    /**\n     * Returns the schema specification.\n     *\n     * @returns {object} Schema specification.\n     */\n    getSchema: function getSchema() {\n      return schema;\n    },\n    /**\n     * Returns the schema specification.\n     *\n     * @returns {object} Schema specification.\n     */\n    getFieldSchema: function getFieldSchema(name) {\n      return schema[name];\n    },\n    /**\n     * Returns the schema name.\n     *\n     * @returns {string} Schema name (also called ``typeName``).\n     */\n    getType: function getType() {\n      return typeName;\n    },\n    /**\n     * Returns the name of the fields.\n     */\n    getFieldNames: function getFieldNames() {\n      return Object.keys(schema);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSchema","typeName","schema","_type","getSchema","getFieldSchema","name","getType","getFieldNames","keys"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/createSchema.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSchema = createSchema;\n\n/**\n * Creates a Schema from the specification.\n *\n * @function\n * @param {string} typeName Name of the model being created.\n *    It can be chosen freely.\n * @param {object} schema Schema specification.\n */\nfunction createSchema(typeName, schema) {\n  return {\n    _type: 'schema',\n\n    /**\n     * Returns the schema specification.\n     *\n     * @returns {object} Schema specification.\n     */\n    getSchema: () => schema,\n\n    /**\n     * Returns the schema specification.\n     *\n     * @returns {object} Schema specification.\n     */\n    getFieldSchema: name => schema[name],\n\n    /**\n     * Returns the schema name.\n     *\n     * @returns {string} Schema name (also called ``typeName``).\n     */\n    getType: () => typeName,\n\n    /**\n     * Returns the name of the fields.\n     */\n    getFieldNames: () => Object.keys(schema)\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,YAAY,GAAGA,YAAY;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,CAACC,QAAQ,EAAEC,MAAM,EAAE;EACtC,OAAO;IACLC,KAAK,EAAE,QAAQ;IAEf;AACJ;AACA;AACA;AACA;IACIC,SAAS,EAAE;MAAA,OAAMF,MAAM;IAAA;IAEvB;AACJ;AACA;AACA;AACA;IACIG,cAAc,EAAE,wBAAAC,IAAI;MAAA,OAAIJ,MAAM,CAACI,IAAI,CAAC;IAAA;IAEpC;AACJ;AACA;AACA;AACA;IACIC,OAAO,EAAE;MAAA,OAAMN,QAAQ;IAAA;IAEvB;AACJ;AACA;IACIO,aAAa,EAAE;MAAA,OAAMZ,MAAM,CAACa,IAAI,CAACP,MAAM,CAAC;IAAA;EAC1C,CAAC;AACH"},"metadata":{},"sourceType":"script"}