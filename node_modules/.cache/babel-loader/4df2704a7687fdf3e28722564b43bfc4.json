{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCoercers = createCoercers;\n\nvar _utils = require(\"./utils\");\n\nfunction createCoercers(_ref) {\n  let {\n    initialValues,\n    stateRef,\n    skin,\n    notify,\n    schema\n  } = _ref;\n  return function coercedSubmit(doc) {\n    const coerceObject = _ref2 => {\n      let {\n        object,\n        schemaDef\n      } = _ref2;\n      const fields = Object.keys(schemaDef);\n      const result = (0, _utils.deepmerge)({}, object);\n      fields.forEach(fieldName => {\n        const fieldSchema = schemaDef[fieldName];\n        const {\n          type\n        } = fieldSchema;\n        const typeKey = (0, _utils.schemaTypeEx)(type);\n        const {\n          coerce\n        } = fieldSchema.coerce ? fieldSchema : skin[typeKey];\n        const value = object[fieldName];\n\n        if (coerce) {\n          result[fieldName] = coerce(value, {\n            coerceObject,\n            schemaDef,\n            fieldName\n          });\n        }\n      });\n      return result;\n    };\n\n    const coerceWithSchema = _ref3 => {\n      let {\n        doc,\n        schema\n      } = _ref3;\n      const schemaDef = schema.getSchema();\n      return coerceObject({\n        object: doc,\n        schemaDef\n      });\n    };\n\n    const fields = Object.keys(stateRef.current.fields);\n    const values = fields.reduce((values, field) => {\n      const state = stateRef.current.fields[field];\n\n      if (state.visible) {\n        const [container, attr] = (0, _utils.objectTraverse)(values, field, {\n          createIfMissing: true\n        });\n        const [docContainer] = (0, _utils.objectTraverse)(doc, field);\n\n        if (container && attr) {\n          if (state.changed) container[attr] = state.value;else if (docContainer) container[attr] = docContainer[attr];\n        }\n      }\n\n      return values;\n    }, {});\n    const wholeObj = (0, _utils.deepmerge)({}, initialValues, values);\n    const coerced = coerceWithSchema({\n      doc: wholeObj,\n      schema\n    });\n    notify(coerced, doc);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createCoercers","_utils","require","initialValues","stateRef","skin","notify","schema","coercedSubmit","doc","coerceObject","object","schemaDef","fields","keys","result","deepmerge","forEach","fieldName","fieldSchema","type","typeKey","schemaTypeEx","coerce","coerceWithSchema","getSchema","current","values","reduce","field","state","visible","container","attr","objectTraverse","createIfMissing","docContainer","changed","wholeObj","coerced"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/coercing.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCoercers = createCoercers;\n\nvar _utils = require(\"./utils\");\n\nfunction createCoercers({\n  initialValues,\n  stateRef,\n  skin,\n  notify,\n  schema\n}) {\n  return function coercedSubmit(doc) {\n    const coerceObject = ({\n      object,\n      schemaDef\n    }) => {\n      const fields = Object.keys(schemaDef);\n      const result = (0, _utils.deepmerge)({}, object);\n      fields.forEach(fieldName => {\n        const fieldSchema = schemaDef[fieldName];\n        const {\n          type\n        } = fieldSchema;\n        const typeKey = (0, _utils.schemaTypeEx)(type);\n        const {\n          coerce\n        } = fieldSchema.coerce ? fieldSchema : skin[typeKey];\n        const value = object[fieldName];\n\n        if (coerce) {\n          result[fieldName] = coerce(value, {\n            coerceObject,\n            schemaDef,\n            fieldName\n          });\n        }\n      });\n      return result;\n    };\n\n    const coerceWithSchema = ({\n      doc,\n      schema\n    }) => {\n      const schemaDef = schema.getSchema();\n      return coerceObject({\n        object: doc,\n        schemaDef\n      });\n    };\n\n    const fields = Object.keys(stateRef.current.fields);\n    const values = fields.reduce((values, field) => {\n      const state = stateRef.current.fields[field];\n\n      if (state.visible) {\n        const [container, attr] = (0, _utils.objectTraverse)(values, field, {\n          createIfMissing: true\n        });\n        const [docContainer] = (0, _utils.objectTraverse)(doc, field);\n\n        if (container && attr) {\n          if (state.changed) container[attr] = state.value;else if (docContainer) container[attr] = docContainer[attr];\n        }\n      }\n\n      return values;\n    }, {});\n    const wholeObj = (0, _utils.deepmerge)({}, initialValues, values);\n    const coerced = coerceWithSchema({\n      doc: wholeObj,\n      schema\n    });\n    notify(coerced, doc);\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}