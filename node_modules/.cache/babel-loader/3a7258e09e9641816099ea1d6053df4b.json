{"ast":null,"code":"\"use strict\";\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n  /**\n   * Convert a date to a number for Excel.\n   * @param {Date} date - The date.\n   * @returns {number} The number.\n   */\n  static dateToNumber(date) {\n    return dateConverter.dateToNumber(date);\n  }\n\n  /**\n   * Create a new blank workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n  static fromBlankAsync() {\n    return Workbook.fromBlankAsync();\n  }\n\n  /**\n   * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n   * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n   * @param {{}} [opts] - Options\n   * @param {string} [opts.password] - The password to decrypt the workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n  static fromDataAsync(data, opts) {\n    return Workbook.fromDataAsync(data, opts);\n  }\n\n  /**\n   * Loads a workbook from file.\n   * @param {string} path - The path to the workbook.\n   * @param {{}} [opts] - Options\n   * @param {string} [opts.password] - The password to decrypt the workbook.\n   * @returns {Promise.<Workbook>} The workbook.\n   */\n  static fromFileAsync(path, opts) {\n    return Workbook.fromFileAsync(path, opts);\n  }\n\n  /**\n   * Convert an Excel number to a date.\n   * @param {number} number - The number.\n   * @returns {Date} The date.\n   */\n  static numberToDate(number) {\n    return dateConverter.numberToDate(number);\n  }\n\n  /**\n   * The Promise library.\n   * @type {Promise}\n   */\n  static get Promise() {\n    return externals.Promise;\n  }\n  static set Promise(Promise) {\n    externals.Promise = Promise;\n  }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\nmodule.exports = XlsxPopulate;","map":{"version":3,"names":["externals","require","Workbook","FormulaError","dateConverter","RichText","XlsxPopulate","dateToNumber","date","fromBlankAsync","fromDataAsync","data","opts","fromFileAsync","path","numberToDate","number","Promise","MIME_TYPE","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/XlsxPopulate.js"],"sourcesContent":["\"use strict\";\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    static dateToNumber(date) {\n        return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromBlankAsync() {\n        return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromDataAsync(data, opts) {\n        return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromFileAsync(path, opts) {\n        return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    static numberToDate(number) {\n        return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    static get Promise() {\n        return externals.Promise;\n    }\n    static set Promise(Promise) {\n        externals.Promise = Promise;\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\n\nmodule.exports = XlsxPopulate;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,YAAY,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AACA,MAAMK,YAAY,CAAC;EACf;AACJ;AACA;AACA;AACA;EACI,OAAOC,YAAY,CAACC,IAAI,EAAE;IACtB,OAAOJ,aAAa,CAACG,YAAY,CAACC,IAAI,CAAC;EAC3C;;EAEA;AACJ;AACA;AACA;EACI,OAAOC,cAAc,GAAG;IACpB,OAAOP,QAAQ,CAACO,cAAc,EAAE;EACpC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,aAAa,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC7B,OAAOV,QAAQ,CAACQ,aAAa,CAACC,IAAI,EAAEC,IAAI,CAAC;EAC7C;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOC,aAAa,CAACC,IAAI,EAAEF,IAAI,EAAE;IAC7B,OAAOV,QAAQ,CAACW,aAAa,CAACC,IAAI,EAAEF,IAAI,CAAC;EAC7C;;EAEA;AACJ;AACA;AACA;AACA;EACI,OAAOG,YAAY,CAACC,MAAM,EAAE;IACxB,OAAOZ,aAAa,CAACW,YAAY,CAACC,MAAM,CAAC;EAC7C;;EAEA;AACJ;AACA;AACA;EACI,WAAWC,OAAO,GAAG;IACjB,OAAOjB,SAAS,CAACiB,OAAO;EAC5B;EACA,WAAWA,OAAO,CAACA,OAAO,EAAE;IACxBjB,SAAS,CAACiB,OAAO,GAAGA,OAAO;EAC/B;AACJ;;AAEA;AACA;AACA;AACA;AACAX,YAAY,CAACY,SAAS,GAAGhB,QAAQ,CAACgB,SAAS;;AAE3C;AACA;AACA;AACA;AACAZ,YAAY,CAACH,YAAY,GAAGA,YAAY;;AAExC;AACA;AACA;AACA;AACAG,YAAY,CAACD,QAAQ,GAAGA,QAAQ;AAEhCc,MAAM,CAACC,OAAO,GAAGd,YAAY"},"metadata":{},"sourceType":"script"}