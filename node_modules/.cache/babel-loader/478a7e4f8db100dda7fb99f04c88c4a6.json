{"ast":null,"code":"function getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (process.env.NODE_ENV !== \"production\") {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? {\n      ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]);\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\nconst min = Math.min;\nconst max = Math.max;\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const alignment = getAlignment(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // Make sure that arrow points at the reference\n\n    const alignmentPadding = alignment === 'start' ? paddingObject[minProp] : paddingObject[maxProp];\n    const shouldAddOffset = alignmentPadding > 0 && center !== offset && rects.reference[length] <= rects.floating[length];\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = 'bottom';\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n              if (placement) {\n                resetPlacement = placement;\n              }\n              break;\n            }\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({\n        ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getSide","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","process","env","NODE_ENV","console","error","join","name","Error","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","fn","nextX","nextY","data","reset","initialPlacement","elements","warn","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offsetParent","getOffsetParent","min","Math","max","within","min$1","value","max$1","arrow","alignment","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","alignmentPadding","shouldAddOffset","alignmentOffset","centerOffset","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","sides","allPlacements","reduce","acc","concat","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_middlewareData$autoP3","_middlewareData$autoP4","_placementsSortedByLe","detectOverflowOptions","placements","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","resetPlacement","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","isBasePlacement","overflowsData","push","_middlewareData$flip$","_middlewareData$flip2","nextIndex","_overflowsData$map$so","map","d","getSideOffsets","isAnySideFullyClipped","some","hide","_temp","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","_middlewareData$offse3","_middlewareData$offse4","isOriginSide","size","apply","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","availableHeight","availableWidth","nextDimensions","inline","_await$platform$getCl","fallback","clientRects","getClientRects","getBoundingClientRect","_clientRects$find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/@floating-ui/core/dist/floating-ui.core.esm.js"],"sourcesContent":["function getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n    strategy\n  }) : rects[elementContext]);\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const alignment = getAlignment(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // Make sure that arrow points at the reference\n\n    const alignmentPadding = alignment === 'start' ? paddingObject[minProp] : paddingObject[maxProp];\n    const shouldAddOffset = alignmentPadding > 0 && center !== offset && rects.reference[length] <= rects.floating[length];\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP = (_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.index) != null ? _middlewareData$autoP : 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP3 = (_middlewareData$autoP4 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP4.overflows) != null ? _middlewareData$autoP3 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = side === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip2;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (_temp) {\n  let {\n    strategy = 'referenceHidden',\n    ...detectOverflowOptions\n  } = _temp === void 0 ? {} : _temp;\n  return {\n    name: 'hide',\n\n    async fn(middlewareArguments) {\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({ ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) != null ? _await$platform$getCl : [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}