{"ast":null,"code":"\"use strict\";\n\n/* eslint camelcase:off */\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A Rich text fragment.\n */\nclass RichTextFragment {\n  /**\n   * Creates a new instance of RichTextFragment.\n   * @constructor\n   * @param {string|Object} value - Text value or XML node\n   * @param {object|undefined|null} [styles] - Multiple styles.\n   * @param {RichText} richText - The rich text instance where this fragment belongs to.\n   */\n  constructor(value, styles, richText) {\n    this._richText = richText;\n    if (value.name === 'r') {\n      this._node = value;\n      this._fontNode = xmlq.findChild(this._node, 'rPr');\n      if (!this._fontNode) {\n        this._fontNode = {\n          name: 'rPr',\n          attributes: {},\n          children: []\n        };\n        this._node.children.unshift(this._fontNode);\n      }\n      this._valueNode = xmlq.findChild(this._node, 't');\n    } else {\n      this._node = {\n        name: 'r',\n        attributes: {},\n        children: [{\n          name: 'rPr',\n          attributes: {},\n          children: []\n        }, {\n          name: 't',\n          attributes: {},\n          children: []\n        }]\n      };\n      this._fontNode = xmlq.findChild(this._node, 'rPr');\n      this._valueNode = xmlq.findChild(this._node, 't');\n      this.value(value);\n      if (styles) {\n        this.style(styles);\n      }\n    }\n  }\n\n  /**\n   * Gets the value of this part of rich text\n   * @return {string} text\n   */ /**\n      * Sets the value of this part of rich text\n      * @param {string} text - the text to set\n      * @return {RichTextFragment} - RichTextFragment\n      */\n  value() {\n    return new ArgHandler(\"_RichText.value\").case(() => {\n      return this._valueNode.children[0];\n    }).case('string', value => {\n      value = value.replace(/(?:\\r\\n|\\r|\\n)/g, '\\r\\n');\n      const hasLineSeparator = value.indexOf('\\r\\n') !== -1;\n      this._valueNode.children[0] = value;\n      if (value.charAt(0) === ' ') xmlq.setAttributes(this._valueNode, {\n        'xml:space': 'preserve'\n      });\n      if (this._richText) this._richText.removeUnsupportedNodes();\n      if (hasLineSeparator) {\n        // set wrapText = true if it contains line separator, excel will only display new lines if it sets.\n        if (this._richText.cell) {\n          this._richText.cell.style('wrapText', true);\n        }\n        xmlq.setAttributes(this._valueNode, {\n          'xml:space': 'preserve'\n        });\n      }\n      return this;\n    }).handle(arguments);\n  }\n\n  /**\n   * Convert the rich text to an XML object.\n   * @returns {{}} The XML form.\n   * @ignore\n   */\n  toXml() {\n    return this._node;\n  }\n\n  /**\n   * Gets an individual style.\n   * @param {string} name - The name of the style.\n   * @returns {*} The style.\n   */ /**\n      * Gets multiple styles.\n      * @param {Array.<string>} names - The names of the style.\n      * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n      */ /**\n         * Sets an individual style.\n         * @param {string} name - The name of the style.\n         * @param {*} value - The value to set.\n         * @returns {RichTextFragment} This RichTextFragment.\n         */ /**\n            * Sets multiple styles.\n            * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n            * @returns {RichTextFragment} This RichTextFragment.\n            */\n  style() {\n    return new ArgHandler(\"_RichText.style\").case('string', name => {\n      // Get single value\n      const getterName = `_get_${name}`;\n      if (!this[getterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n      return this[getterName]();\n    }).case('array', names => {\n      // Get list of values\n      const values = {};\n      names.forEach(name => {\n        values[name] = this.style(name);\n      });\n      return values;\n    }).case(['string', '*'], (name, value) => {\n      // Set a single value\n      const setterName = `_set_${name}`;\n      if (!this[setterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n      return this[setterName](value);\n    }).case('object', nameValues => {\n      // Object of key value pairs to set\n      for (const name in nameValues) {\n        if (!nameValues.hasOwnProperty(name)) continue;\n        const value = nameValues[name];\n        this.style(name, value);\n      }\n      return this;\n    }).handle(arguments);\n  }\n  _getColor(node, name) {\n    const child = xmlq.findChild(node, name);\n    if (!child || !child.attributes) return;\n    const color = {};\n    if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n    if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n    if (_.isEmpty(color)) return;\n    return color;\n  }\n  _setColor(node, name, color) {\n    if (typeof color === \"string\") color = {\n      rgb: color\n    };else if (typeof color === \"number\") color = {\n      theme: color\n    };\n    xmlq.setChildAttributes(node, name, {\n      rgb: color && color.rgb && color.rgb.toUpperCase(),\n      indexed: null,\n      theme: color && color.theme,\n      tint: color && color.tint\n    });\n    xmlq.removeChildIfEmpty(node, 'color');\n  }\n  _get_bold() {\n    return xmlq.hasChild(this._fontNode, 'b');\n  }\n  _set_bold(bold) {\n    if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n  }\n  _get_italic() {\n    return xmlq.hasChild(this._fontNode, 'i');\n  }\n  _set_italic(italic) {\n    if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n  }\n  _get_underline() {\n    const uNode = xmlq.findChild(this._fontNode, 'u');\n    return uNode ? uNode.attributes.val || true : false;\n  }\n  _set_underline(underline) {\n    if (underline) {\n      const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n      const val = typeof underline === 'string' ? underline : null;\n      xmlq.setAttributes(uNode, {\n        val\n      });\n    } else {\n      xmlq.removeChild(this._fontNode, 'u');\n    }\n  }\n  _get_strikethrough() {\n    return xmlq.hasChild(this._fontNode, 'strike');\n  }\n  _set_strikethrough(strikethrough) {\n    if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n  }\n  _getFontVerticalAlignment() {\n    return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n  }\n  _setFontVerticalAlignment(alignment) {\n    xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n      val: alignment\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n  }\n  _get_subscript() {\n    return this._getFontVerticalAlignment() === \"subscript\";\n  }\n  _set_subscript(subscript) {\n    this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n  }\n  _get_superscript() {\n    return this._getFontVerticalAlignment() === \"superscript\";\n  }\n  _set_superscript(superscript) {\n    this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n  }\n  _get_fontSize() {\n    return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n  }\n  _set_fontSize(size) {\n    xmlq.setChildAttributes(this._fontNode, 'sz', {\n      val: size\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n  }\n  _get_fontFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'rFont', \"val\");\n  }\n  _set_fontFamily(family) {\n    xmlq.setChildAttributes(this._fontNode, 'rFont', {\n      val: family\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'rFont');\n  }\n  _get_fontGenericFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n  }\n\n  /**\n   * @param {number} genericFamily - 1: Serif, 2: Sans Serif, 3: Monospace,\n   * @private\n   * @return {undefined}\n   */\n  _set_fontGenericFamily(genericFamily) {\n    xmlq.setChildAttributes(this._fontNode, 'family', {\n      val: genericFamily\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'family');\n  }\n  _get_fontColor() {\n    return this._getColor(this._fontNode, \"color\");\n  }\n  _set_fontColor(color) {\n    this._setColor(this._fontNode, \"color\", color);\n  }\n  _get_fontScheme() {\n    // can be 'minor', 'major', 'none'\n    return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n  }\n\n  /**\n   * @param {string} scheme - 'minor'|'major'|'none'\n   * @private\n   * @return {undefined}\n   */\n  _set_fontScheme(scheme) {\n    xmlq.setChildAttributes(this._fontNode, 'scheme', {\n      val: scheme\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n  }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichTextFragment.name) RichTextFragment.name = \"RichTextFragment\";\nmodule.exports = RichTextFragment;","map":{"version":3,"names":["ArgHandler","require","_","xmlq","colorIndexes","RichTextFragment","constructor","value","styles","richText","_richText","name","_node","_fontNode","findChild","attributes","children","unshift","_valueNode","style","case","replace","hasLineSeparator","indexOf","charAt","setAttributes","removeUnsupportedNodes","cell","handle","arguments","toXml","getterName","Error","names","values","forEach","setterName","nameValues","hasOwnProperty","_getColor","node","child","color","rgb","theme","indexed","tint","isEmpty","_setColor","setChildAttributes","toUpperCase","removeChildIfEmpty","_get_bold","hasChild","_set_bold","bold","appendChildIfNotFound","removeChild","_get_italic","_set_italic","italic","_get_underline","uNode","val","_set_underline","underline","_get_strikethrough","_set_strikethrough","strikethrough","_getFontVerticalAlignment","getChildAttribute","_setFontVerticalAlignment","alignment","_get_subscript","_set_subscript","subscript","_get_superscript","_set_superscript","superscript","_get_fontSize","_set_fontSize","size","_get_fontFamily","_set_fontFamily","family","_get_fontGenericFamily","_set_fontGenericFamily","genericFamily","_get_fontColor","_set_fontColor","_get_fontScheme","_set_fontScheme","scheme","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/RichTextFragment.js"],"sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A Rich text fragment.\n */\nclass RichTextFragment {\n    /**\n     * Creates a new instance of RichTextFragment.\n     * @constructor\n     * @param {string|Object} value - Text value or XML node\n     * @param {object|undefined|null} [styles] - Multiple styles.\n     * @param {RichText} richText - The rich text instance where this fragment belongs to.\n     */\n    constructor(value, styles, richText) {\n        this._richText = richText;\n        if (value.name === 'r') {\n            this._node = value;\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            if (!this._fontNode) {\n                this._fontNode = { name: 'rPr', attributes: {}, children: [] };\n                this._node.children.unshift(this._fontNode);\n            }\n            this._valueNode = xmlq.findChild(this._node, 't');\n        } else {\n            this._node = {\n                name: 'r',\n                attributes: {},\n                children: [\n                    { name: 'rPr', attributes: {}, children: [] },\n                    { name: 't', attributes: {}, children: [] }\n                ]\n            };\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            this._valueNode = xmlq.findChild(this._node, 't');\n            this.value(value);\n            if (styles) {\n                this.style(styles);\n            }\n        }\n    }\n\n    /**\n     * Gets the value of this part of rich text\n     * @return {string} text\n     *//**\n     * Sets the value of this part of rich text\n     * @param {string} text - the text to set\n     * @return {RichTextFragment} - RichTextFragment\n     */\n    value() {\n        return new ArgHandler(\"_RichText.value\")\n            .case(() => {\n                return this._valueNode.children[0];\n            })\n            .case('string', value => {\n                value = value.replace(/(?:\\r\\n|\\r|\\n)/g, '\\r\\n');\n                const hasLineSeparator = value.indexOf('\\r\\n') !== -1;\n                this._valueNode.children[0] = value;\n                if (value.charAt(0) === ' ') xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n\n                if (this._richText) this._richText.removeUnsupportedNodes();\n                if (hasLineSeparator) {\n                    // set wrapText = true if it contains line separator, excel will only display new lines if it sets.\n                    if (this._richText.cell) {\n                        this._richText.cell.style('wrapText', true);\n                    }\n                    xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     *//**\n     * Sets multiple styles.\n     * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     */\n    style() {\n        return new ArgHandler(\"_RichText.style\")\n            .case('string', name => {\n                // Get single value\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[setterName](value);\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'rFont', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'rFont', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'rFont');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    /**\n     * @param {number} genericFamily - 1: Serif, 2: Sans Serif, 3: Monospace,\n     * @private\n     * @return {undefined}\n     */\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    /**\n     * @param {string} scheme - 'minor'|'major'|'none'\n     * @private\n     * @return {undefined}\n     */\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichTextFragment.name) RichTextFragment.name = \"RichTextFragment\";\n\nmodule.exports = RichTextFragment;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}