{"ast":null,"code":"/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint eqnull:true */\n/*exported CFB */\n/*global module, require:false, process:false, Buffer:false, Uint8Array:false, Uint16Array:false */\n\nvar Base64_map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nfunction Base64_encode(input) {\n  var o = \"\";\n  var c1 = 0,\n    c2 = 0,\n    c3 = 0,\n    e1 = 0,\n    e2 = 0,\n    e3 = 0,\n    e4 = 0;\n  for (var i = 0; i < input.length;) {\n    c1 = input.charCodeAt(i++);\n    e1 = c1 >> 2;\n    c2 = input.charCodeAt(i++);\n    e2 = (c1 & 3) << 4 | c2 >> 4;\n    c3 = input.charCodeAt(i++);\n    e3 = (c2 & 15) << 2 | c3 >> 6;\n    e4 = c3 & 63;\n    if (isNaN(c2)) e3 = e4 = 64;else if (isNaN(c3)) e4 = 64;\n    o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);\n  }\n  return o;\n}\nfunction Base64_decode(input) {\n  var o = \"\";\n  var c1 = 0,\n    c2 = 0,\n    c3 = 0,\n    e1 = 0,\n    e2 = 0,\n    e3 = 0,\n    e4 = 0;\n  input = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n  for (var i = 0; i < input.length;) {\n    e1 = Base64_map.indexOf(input.charAt(i++));\n    e2 = Base64_map.indexOf(input.charAt(i++));\n    c1 = e1 << 2 | e2 >> 4;\n    o += String.fromCharCode(c1);\n    e3 = Base64_map.indexOf(input.charAt(i++));\n    c2 = (e2 & 15) << 4 | e3 >> 2;\n    if (e3 !== 64) o += String.fromCharCode(c2);\n    e4 = Base64_map.indexOf(input.charAt(i++));\n    c3 = (e3 & 3) << 6 | e4;\n    if (e4 !== 64) o += String.fromCharCode(c3);\n  }\n  return o;\n}\nvar has_buf = function () {\n  return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node;\n}();\nvar Buffer_from = function () {\n  if (typeof Buffer !== 'undefined') {\n    var nbfs = !Buffer.from;\n    if (!nbfs) try {\n      Buffer.from(\"foo\", \"utf8\");\n    } catch (e) {\n      nbfs = true;\n    }\n    return nbfs ? function (buf, enc) {\n      return enc ? new Buffer(buf, enc) : new Buffer(buf);\n    } : Buffer.from.bind(Buffer);\n  }\n  return function () {};\n}();\nfunction new_raw_buf(len) {\n  /* jshint -W056 */\n  if (has_buf) {\n    if (Buffer.alloc) return Buffer.alloc(len);\n    var b = new Buffer(len);\n    b.fill(0);\n    return b;\n  }\n  return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len) {\n  /* jshint -W056 */\n  if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);\n  return typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nvar s2a = function s2a(s) {\n  if (has_buf) return Buffer_from(s, \"binary\");\n  return s.split(\"\").map(function (x) {\n    return x.charCodeAt(0) & 0xff;\n  });\n};\nvar chr0 = /\\u0000/g,\n  chr1 = /[\\u0001-\\u0006]/g;\nvar __toBuffer = function (bufs) {\n  var x = [];\n  for (var i = 0; i < bufs[0].length; ++i) {\n    x.push.apply(x, bufs[0][i]);\n  }\n  return x;\n};\nvar ___toBuffer = __toBuffer;\nvar __utf16le = function (b, s, e) {\n  var ss = [];\n  for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i)));\n  return ss.join(\"\").replace(chr0, '');\n};\nvar ___utf16le = __utf16le;\nvar __hexlify = function (b, s, l) {\n  var ss = [];\n  for (var i = s; i < s + l; ++i) ss.push((\"0\" + b[i].toString(16)).slice(-2));\n  return ss.join(\"\");\n};\nvar ___hexlify = __hexlify;\nvar __bconcat = function (bufs) {\n  if (Array.isArray(bufs[0])) return [].concat.apply([], bufs);\n  var maxlen = 0,\n    i = 0;\n  for (i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;\n  var o = new Uint8Array(maxlen);\n  for (i = 0, maxlen = 0; i < bufs.length; maxlen += bufs[i].length, ++i) o.set(bufs[i], maxlen);\n  return o;\n};\nvar bconcat = __bconcat;\nif (has_buf) {\n  __utf16le = function (b, s, e) {\n    if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);\n    return b.toString('utf16le', s, e).replace(chr0, '') /*.replace(chr1,'!')*/;\n  };\n\n  __hexlify = function (b, s, l) {\n    return Buffer.isBuffer(b) ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);\n  };\n  __toBuffer = function (bufs) {\n    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);\n  };\n  s2a = function (s) {\n    return Buffer_from(s, \"binary\");\n  };\n  bconcat = function (bufs) {\n    return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : __bconcat(bufs);\n  };\n}\nvar __readUInt8 = function (b, idx) {\n  return b[idx];\n};\nvar __readUInt16LE = function (b, idx) {\n  return b[idx + 1] * (1 << 8) + b[idx];\n};\nvar __readInt16LE = function (b, idx) {\n  var u = b[idx + 1] * (1 << 8) + b[idx];\n  return u < 0x8000 ? u : (0xffff - u + 1) * -1;\n};\nvar __readUInt32LE = function (b, idx) {\n  return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\nvar __readInt32LE = function (b, idx) {\n  return (b[idx + 3] << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\nfunction ReadShift(size, t) {\n  var oI,\n    oS,\n    type = 0;\n  switch (size) {\n    case 1:\n      oI = __readUInt8(this, this.l);\n      break;\n    case 2:\n      oI = (t !== 'i' ? __readUInt16LE : __readInt16LE)(this, this.l);\n      break;\n    case 4:\n      oI = __readInt32LE(this, this.l);\n      break;\n    case 16:\n      type = 2;\n      oS = __hexlify(this, this.l, size);\n  }\n  this.l += size;\n  if (type === 0) return oI;\n  return oS;\n}\nvar __writeUInt32LE = function (b, val, idx) {\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >>> 8 & 0xFF;\n  b[idx + 2] = val >>> 16 & 0xFF;\n  b[idx + 3] = val >>> 24 & 0xFF;\n};\nvar __writeInt32LE = function (b, val, idx) {\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >> 8 & 0xFF;\n  b[idx + 2] = val >> 16 & 0xFF;\n  b[idx + 3] = val >> 24 & 0xFF;\n};\nfunction WriteShift(t, val, f) {\n  var size = 0,\n    i = 0;\n  switch (f) {\n    case \"hex\":\n      for (; i < t; ++i) {\n        this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;\n      }\n      return this;\n    case \"utf16le\":\n      var end = this.l + t;\n      for (i = 0; i < Math.min(val.length, t); ++i) {\n        var cc = val.charCodeAt(i);\n        this[this.l++] = cc & 0xff;\n        this[this.l++] = cc >> 8;\n      }\n      while (this.l < end) this[this.l++] = 0;\n      return this;\n  }\n  switch (t) {\n    case 1:\n      size = 1;\n      this[this.l] = val & 0xFF;\n      break;\n    case 2:\n      size = 2;\n      this[this.l] = val & 0xFF;\n      val >>>= 8;\n      this[this.l + 1] = val & 0xFF;\n      break;\n    case 4:\n      size = 4;\n      __writeUInt32LE(this, val, this.l);\n      break;\n    case -4:\n      size = 4;\n      __writeInt32LE(this, val, this.l);\n      break;\n  }\n  this.l += size;\n  return this;\n}\nfunction CheckField(hexstr, fld) {\n  var m = __hexlify(this, this.l, hexstr.length >> 1);\n  if (m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n  this.l += hexstr.length >> 1;\n}\nfunction prep_blob(blob, pos) {\n  blob.l = pos;\n  blob.read_shift = ReadShift;\n  blob.chk = CheckField;\n  blob.write_shift = WriteShift;\n}\nfunction new_buf(sz) {\n  var o = new_raw_buf(sz);\n  prep_blob(o, 0);\n  return o;\n}\n\n/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32 = function () {\n  var CRC32 = {};\n  CRC32.version = '1.2.1';\n  /*global Int32Array */\n  function signed_crc_table() {\n    var c = 0,\n      table = new Array(256);\n    for (var n = 0; n != 256; ++n) {\n      c = n;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      table[n] = c;\n    }\n    return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n  }\n  var T0 = signed_crc_table();\n  function slice_by_16_tables(T) {\n    var c = 0,\n      v = 0,\n      n = 0,\n      table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096);\n    for (n = 0; n != 256; ++n) table[n] = T[n];\n    for (n = 0; n != 256; ++n) {\n      v = T[n];\n      for (c = 256 + n; c < 4096; c += 256) v = table[c] = v >>> 8 ^ T[v & 0xFF];\n    }\n    var out = [];\n    for (n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n    return out;\n  }\n  var TT = slice_by_16_tables(T0);\n  var T1 = TT[0],\n    T2 = TT[1],\n    T3 = TT[2],\n    T4 = TT[3],\n    T5 = TT[4];\n  var T6 = TT[5],\n    T7 = TT[6],\n    T8 = TT[7],\n    T9 = TT[8],\n    Ta = TT[9];\n  var Tb = TT[10],\n    Tc = TT[11],\n    Td = TT[12],\n    Te = TT[13],\n    Tf = TT[14];\n  function crc32_bstr(bstr, seed) {\n    var C = seed ^ -1;\n    for (var i = 0, L = bstr.length; i < L;) C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 0xFF];\n    return ~C;\n  }\n  function crc32_buf(B, seed) {\n    var C = seed ^ -1,\n      L = B.length - 15,\n      i = 0;\n    for (; i < L;) C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n    L += 15;\n    while (i < L) C = C >>> 8 ^ T0[(C ^ B[i++]) & 0xFF];\n    return ~C;\n  }\n  function crc32_str(str, seed) {\n    var C = seed ^ -1;\n    for (var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n      c = str.charCodeAt(i++);\n      if (c < 0x80) {\n        C = C >>> 8 ^ T0[(C ^ c) & 0xFF];\n      } else if (c < 0x800) {\n        C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n      } else if (c >= 0xD800 && c < 0xE000) {\n        c = (c & 1023) + 64;\n        d = str.charCodeAt(i++) & 1023;\n        C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 0xFF];\n      } else {\n        C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 0xFF];\n        C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 0xFF];\n      }\n    }\n    return ~C;\n  }\n  CRC32.table = T0;\n  CRC32.bstr = crc32_bstr;\n  CRC32.buf = crc32_buf;\n  CRC32.str = crc32_str;\n  return CRC32;\n}();\n/* [MS-CFB] v20171201 */\nvar CFB = function _CFB() {\n  var exports = {};\n  exports.version = '1.2.2';\n  /* [MS-CFB] 2.6.4 */\n  function namecmp(l, r) {\n    var L = l.split(\"/\"),\n      R = r.split(\"/\");\n    for (var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n      if (c = L[i].length - R[i].length) return c;\n      if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n    }\n    return L.length - R.length;\n  }\n  function dirname(p) {\n    if (p.charAt(p.length - 1) == \"/\") return p.slice(0, -1).indexOf(\"/\") === -1 ? p : dirname(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(0, c + 1);\n  }\n  function filename(p) {\n    if (p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(c + 1);\n  }\n  /* -------------------------------------------------------------------------- */\n  /* DOS Date format:\n     high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n     add 1980 to stored year\n     stored second should be doubled\n  */\n\n  /* write JS date to buf as a DOS date */\n  function write_dos_date(buf, date) {\n    if (typeof date === \"string\") date = new Date(date);\n    var hms = date.getHours();\n    hms = hms << 6 | date.getMinutes();\n    hms = hms << 5 | date.getSeconds() >>> 1;\n    buf.write_shift(2, hms);\n    var ymd = date.getFullYear() - 1980;\n    ymd = ymd << 4 | date.getMonth() + 1;\n    ymd = ymd << 5 | date.getDate();\n    buf.write_shift(2, ymd);\n  }\n\n  /* read four bytes from buf and interpret as a DOS date */\n  function parse_dos_date(buf) {\n    var hms = buf.read_shift(2) & 0xFFFF;\n    var ymd = buf.read_shift(2) & 0xFFFF;\n    var val = new Date();\n    var d = ymd & 0x1F;\n    ymd >>>= 5;\n    var m = ymd & 0x0F;\n    ymd >>>= 4;\n    val.setMilliseconds(0);\n    val.setFullYear(ymd + 1980);\n    val.setMonth(m - 1);\n    val.setDate(d);\n    var S = hms & 0x1F;\n    hms >>>= 5;\n    var M = hms & 0x3F;\n    hms >>>= 6;\n    val.setHours(hms);\n    val.setMinutes(M);\n    val.setSeconds(S << 1);\n    return val;\n  }\n  function parse_extra_field(blob) {\n    prep_blob(blob, 0);\n    var o = {};\n    var flags = 0;\n    while (blob.l <= blob.length - 4) {\n      var type = blob.read_shift(2);\n      var sz = blob.read_shift(2),\n        tgt = blob.l + sz;\n      var p = {};\n      switch (type) {\n        /* UNIX-style Timestamps */\n        case 0x5455:\n          {\n            flags = blob.read_shift(1);\n            if (flags & 1) p.mtime = blob.read_shift(4);\n            /* for some reason, CD flag corresponds to LFH */\n            if (sz > 5) {\n              if (flags & 2) p.atime = blob.read_shift(4);\n              if (flags & 4) p.ctime = blob.read_shift(4);\n            }\n            if (p.mtime) p.mt = new Date(p.mtime * 1000);\n          }\n          break;\n      }\n      blob.l = tgt;\n      o[type] = p;\n    }\n    return o;\n  }\n  var fs;\n  function get_fs() {\n    return fs || (fs = require('fs'));\n  }\n  function parse(file, options) {\n    if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\n    if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);\n    if (file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\n    var mver = 3;\n    var ssz = 512;\n    var nmfs = 0; // number of mini FAT sectors\n    var difat_sec_cnt = 0;\n    var dir_start = 0;\n    var minifat_start = 0;\n    var difat_start = 0;\n    var fat_addrs = []; // locations of FAT sectors\n\n    /* [MS-CFB] 2.2 Compound File Header */\n    var blob = file.slice(0, 512);\n    prep_blob(blob, 0);\n\n    /* major version */\n    var mv = check_get_mver(blob);\n    mver = mv[0];\n    switch (mver) {\n      case 3:\n        ssz = 512;\n        break;\n      case 4:\n        ssz = 4096;\n        break;\n      case 0:\n        if (mv[1] == 0) return parse_zip(file, options);\n      /* falls through */\n      default:\n        throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n    }\n\n    /* reprocess header */\n    if (ssz !== 512) {\n      blob = file.slice(0, ssz);\n      prep_blob(blob, 28 /* blob.l */);\n    }\n    /* Save header for final object */\n    var header = file.slice(0, ssz);\n    check_shifts(blob, mver);\n\n    // Number of Directory Sectors\n    var dir_cnt = blob.read_shift(4, 'i');\n    if (mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);\n\n    // Number of FAT Sectors\n    blob.l += 4;\n\n    // First Directory Sector Location\n    dir_start = blob.read_shift(4, 'i');\n\n    // Transaction Signature\n    blob.l += 4;\n\n    // Mini Stream Cutoff Size\n    blob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\n    // First Mini FAT Sector Location\n    minifat_start = blob.read_shift(4, 'i');\n\n    // Number of Mini FAT Sectors\n    nmfs = blob.read_shift(4, 'i');\n\n    // First DIFAT sector location\n    difat_start = blob.read_shift(4, 'i');\n\n    // Number of DIFAT Sectors\n    difat_sec_cnt = blob.read_shift(4, 'i');\n\n    // Grab FAT Sector Locations\n    for (var q = -1, j = 0; j < 109; ++j) {\n      /* 109 = (512 - blob.l)>>>2; */\n      q = blob.read_shift(4, 'i');\n      if (q < 0) break;\n      fat_addrs[j] = q;\n    }\n\n    /** Break the file up into sectors */\n    var sectors = sectorify(file, ssz);\n    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n\n    /** Chains */\n    var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n    sector_list[dir_start].name = \"!Directory\";\n    if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n    sector_list[fat_addrs[0]].name = \"!FAT\";\n    sector_list.fat_addrs = fat_addrs;\n    sector_list.ssz = ssz;\n\n    /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n    var files = {},\n      Paths = [],\n      FileIndex = [],\n      FullPaths = [];\n    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n    build_full_paths(FileIndex, FullPaths, Paths);\n    Paths.shift();\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n\n    // $FlowIgnore\n    if (options && options.raw) o.raw = {\n      header: header,\n      sectors: sectors\n    };\n    return o;\n  } // parse\n\n  /* [MS-CFB] 2.2 Compound File Header -- read up to major version */\n  function check_get_mver(blob) {\n    if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];\n    // header signature 8\n    blob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\n    // clsid 16\n    //blob.chk(HEADER_CLSID, 'CLSID: ');\n    blob.l += 16;\n\n    // minor version 2\n    var mver = blob.read_shift(2, 'u');\n    return [blob.read_shift(2, 'u'), mver];\n  }\n  function check_shifts(blob, mver) {\n    var shift = 0x09;\n\n    // Byte Order\n    //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n    blob.l += 2;\n\n    // Sector Shift\n    switch (shift = blob.read_shift(2)) {\n      case 0x09:\n        if (mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift);\n        break;\n      case 0x0c:\n        if (mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift);\n        break;\n      default:\n        throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n    }\n\n    // Mini Sector Shift\n    blob.chk('0600', 'Mini Sector Shift: ');\n\n    // Reserved\n    blob.chk('000000000000', 'Reserved: ');\n  }\n\n  /** Break the file up into sectors */\n  function sectorify(file, ssz) {\n    var nsectors = Math.ceil(file.length / ssz) - 1;\n    var sectors = [];\n    for (var i = 1; i < nsectors; ++i) sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);\n    sectors[nsectors - 1] = file.slice(nsectors * ssz);\n    return sectors;\n  }\n\n  /* [MS-CFB] 2.6.4 Red-Black Tree */\n  function build_full_paths(FI, FP, Paths) {\n    var i = 0,\n      L = 0,\n      R = 0,\n      C = 0,\n      j = 0,\n      pl = Paths.length;\n    var dad = [],\n      q = [];\n    for (; i < pl; ++i) {\n      dad[i] = q[i] = i;\n      FP[i] = Paths[i];\n    }\n    for (; j < q.length; ++j) {\n      i = q[j];\n      L = FI[i].L;\n      R = FI[i].R;\n      C = FI[i].C;\n      if (dad[i] === i) {\n        if (L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n        if (R !== -1 && dad[R] !== R) dad[i] = dad[R];\n      }\n      if (C !== -1 /*NOSTREAM*/) dad[C] = i;\n      if (L !== -1 && i != dad[i]) {\n        dad[L] = dad[i];\n        if (q.lastIndexOf(L) < j) q.push(L);\n      }\n      if (R !== -1 && i != dad[i]) {\n        dad[R] = dad[i];\n        if (q.lastIndexOf(R) < j) q.push(R);\n      }\n    }\n    for (i = 1; i < pl; ++i) if (dad[i] === i) {\n      if (R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];\n    }\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type === 0 /* unknown */) continue;\n      j = i;\n      if (j != dad[j]) do {\n        j = dad[j];\n        FP[i] = FP[j] + \"/\" + FP[i];\n      } while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n      dad[i] = -1;\n    }\n    FP[0] += \"/\";\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n    }\n  }\n  function get_mfat_entry(entry, payload, mini) {\n    var start = entry.start,\n      size = entry.size;\n    //return (payload.slice(start*MSSZ, start*MSSZ + size));\n    var o = [];\n    var idx = start;\n    while (mini && size > 0 && idx >= 0) {\n      o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n      size -= MSSZ;\n      idx = __readInt32LE(mini, idx * 4);\n    }\n    if (o.length === 0) return new_buf(0);\n    return bconcat(o).slice(0, entry.size);\n  }\n\n  /** Chase down the rest of the DIFAT chain to build a comprehensive list\n      DIFAT chains by storing the next sector number as the last 32 bits */\n  function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n    var q = ENDOFCHAIN;\n    if (idx === ENDOFCHAIN) {\n      if (cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n    } else if (idx !== -1 /*FREESECT*/) {\n      var sector = sectors[idx],\n        m = (ssz >>> 2) - 1;\n      if (!sector) return;\n      for (var i = 0; i < m; ++i) {\n        if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;\n        fat_addrs.push(q);\n      }\n      if (cnt >= 1) sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);\n    }\n  }\n\n  /** Follow the linked list of sectors for a given starting point */\n  function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n    var buf = [],\n      buf_chain = [];\n    if (!chkd) chkd = [];\n    var modulus = ssz - 1,\n      j = 0,\n      jj = 0;\n    for (j = start; j >= 0;) {\n      chkd[j] = true;\n      buf[buf.length] = j;\n      buf_chain.push(sectors[j]);\n      var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n      jj = j * 4 & modulus;\n      if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n      if (!sectors[addr]) break;\n      j = __readInt32LE(sectors[addr], jj);\n    }\n    return {\n      nodes: buf,\n      data: __toBuffer([buf_chain])\n    };\n  }\n\n  /** Chase down the sector linked lists */\n  function make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n    var sl = sectors.length,\n      sector_list = [];\n    var chkd = [],\n      buf = [],\n      buf_chain = [];\n    var modulus = ssz - 1,\n      i = 0,\n      j = 0,\n      k = 0,\n      jj = 0;\n    for (i = 0; i < sl; ++i) {\n      buf = [];\n      k = i + dir_start;\n      if (k >= sl) k -= sl;\n      if (chkd[k]) continue;\n      buf_chain = [];\n      var seen = [];\n      for (j = k; j >= 0;) {\n        seen[j] = true;\n        chkd[j] = true;\n        buf[buf.length] = j;\n        buf_chain.push(sectors[j]);\n        var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n        jj = j * 4 & modulus;\n        if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n        if (!sectors[addr]) break;\n        j = __readInt32LE(sectors[addr], jj);\n        if (seen[j]) break;\n      }\n      sector_list[k] = {\n        nodes: buf,\n        data: __toBuffer([buf_chain])\n      };\n    }\n    return sector_list;\n  }\n\n  /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n  function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {\n    var minifat_store = 0,\n      pl = Paths.length ? 2 : 0;\n    var sector = sector_list[dir_start].data;\n    var i = 0,\n      namelen = 0,\n      name;\n    for (; i < sector.length; i += 128) {\n      var blob = sector.slice(i, i + 128);\n      prep_blob(blob, 64);\n      namelen = blob.read_shift(2);\n      name = __utf16le(blob, 0, namelen - pl);\n      Paths.push(name);\n      var o = {\n        name: name,\n        type: blob.read_shift(1),\n        color: blob.read_shift(1),\n        L: blob.read_shift(4, 'i'),\n        R: blob.read_shift(4, 'i'),\n        C: blob.read_shift(4, 'i'),\n        clsid: blob.read_shift(16),\n        state: blob.read_shift(4, 'i'),\n        start: 0,\n        size: 0\n      };\n      var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);\n      var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);\n      o.start = blob.read_shift(4, 'i');\n      o.size = blob.read_shift(4, 'i');\n      if (o.size < 0 && o.start < 0) {\n        o.size = o.type = 0;\n        o.start = ENDOFCHAIN;\n        o.name = \"\";\n      }\n      if (o.type === 5) {\n        /* root */\n        minifat_store = o.start;\n        if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n        /*minifat_size = o.size;*/\n      } else if (o.size >= 4096 /* MSCSZ */) {\n        o.storage = 'fat';\n        if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n        sector_list[o.start].name = o.name;\n        o.content = sector_list[o.start].data.slice(0, o.size);\n      } else {\n        o.storage = 'minifat';\n        if (o.size < 0) o.size = 0;else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n          o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);\n        }\n      }\n      if (o.content) prep_blob(o.content, 0);\n      files[name] = o;\n      FileIndex.push(o);\n    }\n  }\n  function read_date(blob, offset) {\n    return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);\n  }\n  function read_file(filename, options) {\n    get_fs();\n    return parse(fs.readFileSync(filename), options);\n  }\n  function read(blob, options) {\n    var type = options && options.type;\n    if (!type) {\n      if (has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n    }\n    switch (type || \"base64\") {\n      case \"file\":\n        return read_file(blob, options);\n      case \"base64\":\n        return parse(s2a(Base64_decode(blob)), options);\n      case \"binary\":\n        return parse(s2a(blob), options);\n    }\n    return parse(blob, options);\n  }\n  function init_cfb(cfb, opts) {\n    var o = opts || {},\n      root = o.root || \"Root Entry\";\n    if (!cfb.FullPaths) cfb.FullPaths = [];\n    if (!cfb.FileIndex) cfb.FileIndex = [];\n    if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n    if (cfb.FullPaths.length === 0) {\n      cfb.FullPaths[0] = root + \"/\";\n      cfb.FileIndex[0] = {\n        name: root,\n        type: 5\n      };\n    }\n    if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n    seed_cfb(cfb);\n  }\n  function seed_cfb(cfb) {\n    var nm = \"\\u0001Sh33tJ5\";\n    if (CFB.find(cfb, \"/\" + nm)) return;\n    var p = new_buf(4);\n    p[0] = 55;\n    p[1] = p[3] = 50;\n    p[2] = 54;\n    cfb.FileIndex.push({\n      name: nm,\n      type: 2,\n      content: p,\n      size: 4,\n      L: 69,\n      R: 69,\n      C: 69\n    });\n    cfb.FullPaths.push(cfb.FullPaths[0] + nm);\n    rebuild_cfb(cfb);\n  }\n  function rebuild_cfb(cfb, f) {\n    init_cfb(cfb);\n    var gc = false,\n      s = false;\n    for (var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n      var _file = cfb.FileIndex[i];\n      switch (_file.type) {\n        case 0:\n          if (s) gc = true;else {\n            cfb.FileIndex.pop();\n            cfb.FullPaths.pop();\n          }\n          break;\n        case 1:\n        case 2:\n        case 5:\n          s = true;\n          if (isNaN(_file.R * _file.L * _file.C)) gc = true;\n          if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n          break;\n        default:\n          gc = true;\n          break;\n      }\n    }\n    if (!gc && !f) return;\n    var now = new Date(1987, 1, 19),\n      j = 0;\n    // Track which names exist\n    var fullPaths = Object.create ? Object.create(null) : {};\n    var data = [];\n    for (i = 0; i < cfb.FullPaths.length; ++i) {\n      fullPaths[cfb.FullPaths[i]] = true;\n      if (cfb.FileIndex[i].type === 0) continue;\n      data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n    }\n    for (i = 0; i < data.length; ++i) {\n      var dad = dirname(data[i][0]);\n      s = fullPaths[dad];\n      while (!s) {\n        while (dirname(dad) && !fullPaths[dirname(dad)]) dad = dirname(dad);\n        data.push([dad, {\n          name: filename(dad).replace(\"/\", \"\"),\n          type: 1,\n          clsid: HEADER_CLSID,\n          ct: now,\n          mt: now,\n          content: null\n        }]);\n\n        // Add name to set\n        fullPaths[dad] = true;\n        dad = dirname(data[i][0]);\n        s = fullPaths[dad];\n      }\n    }\n    data.sort(function (x, y) {\n      return namecmp(x[0], y[0]);\n    });\n    cfb.FullPaths = [];\n    cfb.FileIndex = [];\n    for (i = 0; i < data.length; ++i) {\n      cfb.FullPaths[i] = data[i][0];\n      cfb.FileIndex[i] = data[i][1];\n    }\n    for (i = 0; i < data.length; ++i) {\n      var elt = cfb.FileIndex[i];\n      var nm = cfb.FullPaths[i];\n      elt.name = filename(nm).replace(\"/\", \"\");\n      elt.L = elt.R = elt.C = -(elt.color = 1);\n      elt.size = elt.content ? elt.content.length : 0;\n      elt.start = 0;\n      elt.clsid = elt.clsid || HEADER_CLSID;\n      if (i === 0) {\n        elt.C = data.length > 1 ? 1 : -1;\n        elt.size = 0;\n        elt.type = 5;\n      } else if (nm.slice(-1) == \"/\") {\n        for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == nm) break;\n        elt.C = j >= data.length ? -1 : j;\n        for (j = i + 1; j < data.length; ++j) if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;\n        elt.R = j >= data.length ? -1 : j;\n        elt.type = 1;\n      } else {\n        if (dirname(cfb.FullPaths[i + 1] || \"\") == dirname(nm)) elt.R = i + 1;\n        elt.type = 2;\n      }\n    }\n  }\n  function _write(cfb, options) {\n    var _opts = options || {};\n    /* MAD is order-sensitive, skip rebuild and sort */\n    if (_opts.fileType == 'mad') return write_mad(cfb, _opts);\n    rebuild_cfb(cfb);\n    switch (_opts.fileType) {\n      case 'zip':\n        return write_zip(cfb, _opts);\n      //case 'mad': return write_mad(cfb, _opts);\n    }\n\n    var L = function (cfb) {\n      var mini_size = 0,\n        fat_size = 0;\n      for (var i = 0; i < cfb.FileIndex.length; ++i) {\n        var file = cfb.FileIndex[i];\n        if (!file.content) continue;\n        var flen = file.content.length;\n        if (flen > 0) {\n          if (flen < 0x1000) mini_size += flen + 0x3F >> 6;else fat_size += flen + 0x01FF >> 9;\n        }\n      }\n      var dir_cnt = cfb.FullPaths.length + 3 >> 2;\n      var mini_cnt = mini_size + 7 >> 3;\n      var mfat_cnt = mini_size + 0x7F >> 7;\n      var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n      var fat_cnt = fat_base + 0x7F >> 7;\n      var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n      while (fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n      var L = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n      cfb.FileIndex[0].size = mini_size << 6;\n      L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);\n      return L;\n    }(cfb);\n    var o = new_buf(L[7] << 9);\n    var i = 0,\n      T = 0;\n    {\n      for (i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);\n      for (i = 0; i < 8; ++i) o.write_shift(2, 0);\n      o.write_shift(2, 0x003E);\n      o.write_shift(2, 0x0003);\n      o.write_shift(2, 0xFFFE);\n      o.write_shift(2, 0x0009);\n      o.write_shift(2, 0x0006);\n      for (i = 0; i < 3; ++i) o.write_shift(2, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, L[2]);\n      o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n      o.write_shift(4, 0);\n      o.write_shift(4, 1 << 12);\n      o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[3]);\n      o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[1]);\n      for (i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n    }\n    if (L[1]) {\n      for (T = 0; T < L[1]; ++T) {\n        for (; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n        o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n      }\n    }\n    var chainit = function (w) {\n      for (T += w; i < T - 1; ++i) o.write_shift(-4, i + 1);\n      if (w) {\n        ++i;\n        o.write_shift(-4, ENDOFCHAIN);\n      }\n    };\n    T = i = 0;\n    for (T += L[1]; i < T; ++i) o.write_shift(-4, consts.DIFSECT);\n    for (T += L[2]; i < T; ++i) o.write_shift(-4, consts.FATSECT);\n    chainit(L[3]);\n    chainit(L[4]);\n    var j = 0,\n      flen = 0;\n    var file = cfb.FileIndex[0];\n    for (; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      flen = file.content.length;\n      if (flen < 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x01FF >> 9);\n    }\n    chainit(L[6] + 7 >> 3);\n    while (o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n    T = i = 0;\n    for (j = 0; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      flen = file.content.length;\n      if (!flen || flen >= 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x3F >> 6);\n    }\n    while (o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n    for (i = 0; i < L[4] << 2; ++i) {\n      var nm = cfb.FullPaths[i];\n      if (!nm || nm.length === 0) {\n        for (j = 0; j < 17; ++j) o.write_shift(4, 0);\n        for (j = 0; j < 3; ++j) o.write_shift(4, -1);\n        for (j = 0; j < 12; ++j) o.write_shift(4, 0);\n        continue;\n      }\n      file = cfb.FileIndex[i];\n      if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n      var _nm = i === 0 && _opts.root || file.name;\n      if (_nm.length > 32) {\n        console.error(\"Name \" + _nm + \" will be truncated to \" + _nm.slice(0, 32));\n        _nm = _nm.slice(0, 32);\n      }\n      flen = 2 * (_nm.length + 1);\n      o.write_shift(64, _nm, \"utf16le\");\n      o.write_shift(2, flen);\n      o.write_shift(1, file.type);\n      o.write_shift(1, file.color);\n      o.write_shift(-4, file.L);\n      o.write_shift(-4, file.R);\n      o.write_shift(-4, file.C);\n      if (!file.clsid) for (j = 0; j < 4; ++j) o.write_shift(4, 0);else o.write_shift(16, file.clsid, \"hex\");\n      o.write_shift(4, file.state || 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, file.start);\n      o.write_shift(4, file.size);\n      o.write_shift(4, 0);\n    }\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n      if (file.size >= 0x1000) {\n        o.l = file.start + 1 << 9;\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size);\n          // o is a 0-filled Buffer so just set next offset\n          o.l += file.size + 511 & -512;\n        } else {\n          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n          for (; j & 0x1FF; ++j) o.write_shift(1, 0);\n        }\n      }\n    }\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n      if (file.size > 0 && file.size < 0x1000) {\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size);\n          // o is a 0-filled Buffer so just set next offset\n          o.l += file.size + 63 & -64;\n        } else {\n          for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n          for (; j & 0x3F; ++j) o.write_shift(1, 0);\n        }\n      }\n    }\n    if (has_buf) {\n      o.l = o.length;\n    } else {\n      // When using Buffer, already 0-filled\n      while (o.l < o.length) o.write_shift(1, 0);\n    }\n    return o;\n  }\n  /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\n  function find(cfb, path) {\n    var UCFullPaths = cfb.FullPaths.map(function (x) {\n      return x.toUpperCase();\n    });\n    var UCPaths = UCFullPaths.map(function (x) {\n      var y = x.split(\"/\");\n      return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)];\n    });\n    var k = false;\n    if (path.charCodeAt(0) === 47 /* \"/\" */) {\n      k = true;\n      path = UCFullPaths[0].slice(0, -1) + path;\n    } else k = path.indexOf(\"/\") !== -1;\n    var UCPath = path.toUpperCase();\n    var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n    if (w !== -1) return cfb.FileIndex[w];\n    var m = !UCPath.match(chr1);\n    UCPath = UCPath.replace(chr0, '');\n    if (m) UCPath = UCPath.replace(chr1, '!');\n    for (w = 0; w < UCFullPaths.length; ++w) {\n      if ((m ? UCFullPaths[w].replace(chr1, '!') : UCFullPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n      if ((m ? UCPaths[w].replace(chr1, '!') : UCPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n    }\n    return null;\n  }\n  /** CFB Constants */\n  var MSSZ = 64; /* Mini Sector Size = 1<<6 */\n  //var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n  /* 2.1 Compound File Sector Numbers and Types */\n  var ENDOFCHAIN = -2;\n  /* 2.2 Compound File Header */\n  var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\n  var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\n  var HEADER_CLSID = '00000000000000000000000000000000';\n  var consts = {\n    /* 2.1 Compund File Sector Numbers and Types */\n    MAXREGSECT: -6,\n    DIFSECT: -4,\n    FATSECT: -3,\n    ENDOFCHAIN: ENDOFCHAIN,\n    FREESECT: -1,\n    /* 2.2 Compound File Header */\n    HEADER_SIGNATURE: HEADER_SIGNATURE,\n    HEADER_MINOR_VERSION: '3e00',\n    MAXREGSID: -6,\n    NOSTREAM: -1,\n    HEADER_CLSID: HEADER_CLSID,\n    /* 2.6.1 Compound File Directory Entry */\n    EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root']\n  };\n  function write_file(cfb, filename, options) {\n    get_fs();\n    var o = _write(cfb, options);\n    fs.writeFileSync(filename, o);\n  }\n  function a2s(o) {\n    var out = new Array(o.length);\n    for (var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);\n    return out.join(\"\");\n  }\n  function write(cfb, options) {\n    var o = _write(cfb, options);\n    switch (options && options.type || \"buffer\") {\n      case \"file\":\n        get_fs();\n        fs.writeFileSync(options.filename, o);\n        return o;\n      case \"binary\":\n        return typeof o == \"string\" ? o : a2s(o);\n      case \"base64\":\n        return Base64_encode(typeof o == \"string\" ? o : a2s(o));\n      case \"buffer\":\n        if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n      /* falls through */\n      case \"array\":\n        return typeof o == \"string\" ? s2a(o) : o;\n    }\n    return o;\n  }\n  /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\n  var _zlib;\n  function use_zlib(zlib) {\n    try {\n      var InflateRaw = zlib.InflateRaw;\n      var InflRaw = new InflateRaw();\n      InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n      if (InflRaw.bytesRead) _zlib = zlib;else throw new Error(\"zlib does not expose bytesRead\");\n    } catch (e) {\n      console.error(\"cannot use native zlib: \" + (e.message || e));\n    }\n  }\n  function _inflateRawSync(payload, usz) {\n    if (!_zlib) return _inflate(payload, usz);\n    var InflateRaw = _zlib.InflateRaw;\n    var InflRaw = new InflateRaw();\n    var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n    payload.l += InflRaw.bytesRead;\n    return out;\n  }\n  function _deflateRawSync(payload) {\n    return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n  }\n  var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n  /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\n  var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];\n\n  /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\n  var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n  function bit_swap_8(n) {\n    var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;\n    return (t >> 16 | t >> 8 | t) & 0xFF;\n  }\n  var use_typed_arrays = typeof Uint8Array !== 'undefined';\n  var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];\n  for (var q = 0; q < 1 << 8; ++q) bitswap8[q] = bit_swap_8(q);\n  function bit_swap_n(n, b) {\n    var rev = bitswap8[n & 0xFF];\n    if (b <= 8) return rev >>> 8 - b;\n    rev = rev << 8 | bitswap8[n >> 8 & 0xFF];\n    if (b <= 16) return rev >>> 16 - b;\n    rev = rev << 8 | bitswap8[n >> 16 & 0xFF];\n    return rev >>> 24 - b;\n  }\n\n  /* helpers for unaligned bit reads */\n  function read_bits_2(buf, bl) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;\n  }\n  function read_bits_3(buf, bl) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;\n  }\n  function read_bits_4(buf, bl) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;\n  }\n  function read_bits_5(buf, bl) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;\n  }\n  function read_bits_7(buf, bl) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;\n  }\n\n  /* works up to n = 3 * 8 + 1 = 25 */\n  function read_bits_n(buf, bl, n) {\n    var w = bl & 7,\n      h = bl >>> 3,\n      f = (1 << n) - 1;\n    var v = buf[h] >>> w;\n    if (n < 8 - w) return v & f;\n    v |= buf[h + 1] << 8 - w;\n    if (n < 16 - w) return v & f;\n    v |= buf[h + 2] << 16 - w;\n    if (n < 24 - w) return v & f;\n    v |= buf[h + 3] << 24 - w;\n    return v & f;\n  }\n\n  /* helpers for unaligned bit writes */\n  function write_bits_3(buf, bl, v) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    if (w <= 5) buf[h] |= (v & 7) << w;else {\n      buf[h] |= v << w & 0xFF;\n      buf[h + 1] = (v & 7) >> 8 - w;\n    }\n    return bl + 3;\n  }\n  function write_bits_1(buf, bl, v) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    v = (v & 1) << w;\n    buf[h] |= v;\n    return bl + 1;\n  }\n  function write_bits_8(buf, bl, v) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v;\n    return bl + 8;\n  }\n  function write_bits_16(buf, bl, v) {\n    var w = bl & 7,\n      h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v & 0xFF;\n    buf[h + 2] = v >>> 8;\n    return bl + 16;\n  }\n\n  /* until ArrayBuffer#realloc is a thing, fake a realloc */\n  function realloc(b, sz) {\n    var L = b.length,\n      M = 2 * L > sz ? 2 * L : sz + 5,\n      i = 0;\n    if (L >= sz) return b;\n    if (has_buf) {\n      var o = new_unsafe_buf(M);\n      // $FlowIgnore\n      if (b.copy) b.copy(o);else for (; i < b.length; ++i) o[i] = b[i];\n      return o;\n    } else if (use_typed_arrays) {\n      var a = new Uint8Array(M);\n      if (a.set) a.set(b);else for (; i < L; ++i) a[i] = b[i];\n      return a;\n    }\n    b.length = M;\n    return b;\n  }\n\n  /* zero-filled arrays for older browsers */\n  function zero_fill_array(n) {\n    var o = new Array(n);\n    for (var i = 0; i < n; ++i) o[i] = 0;\n    return o;\n  }\n\n  /* build tree (used for literals and lengths) */\n  function build_tree(clens, cmap, MAX) {\n    var maxlen = 1,\n      w = 0,\n      i = 0,\n      j = 0,\n      ccode = 0,\n      L = clens.length;\n    var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n    for (i = 0; i < 32; ++i) bl_count[i] = 0;\n    for (i = L; i < MAX; ++i) clens[i] = 0;\n    L = clens.length;\n    var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n    /* build code tree */\n    for (i = 0; i < L; ++i) {\n      bl_count[w = clens[i]]++;\n      if (maxlen < w) maxlen = w;\n      ctree[i] = 0;\n    }\n    bl_count[0] = 0;\n    for (i = 1; i <= maxlen; ++i) bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;\n    for (i = 0; i < L; ++i) {\n      ccode = clens[i];\n      if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;\n    }\n\n    /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n    var cleni = 0;\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n      if (cleni != 0) {\n        ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;\n        for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j) cmap[ccode | j << cleni] = cleni & 15 | i << 4;\n      }\n    }\n    return maxlen;\n  }\n\n  /* Fixed Huffman */\n  var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\n  var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n  if (!use_typed_arrays) {\n    for (var i = 0; i < 512; ++i) fix_lmap[i] = 0;\n    for (i = 0; i < 32; ++i) fix_dmap[i] = 0;\n  }\n  (function () {\n    var dlens = [];\n    var i = 0;\n    for (; i < 32; i++) dlens.push(5);\n    build_tree(dlens, fix_dmap, 32);\n    var clens = [];\n    i = 0;\n    for (; i <= 143; i++) clens.push(8);\n    for (; i <= 255; i++) clens.push(9);\n    for (; i <= 279; i++) clens.push(7);\n    for (; i <= 287; i++) clens.push(8);\n    build_tree(clens, fix_lmap, 288);\n  })();\n  var _deflateRaw = function _deflateRawIIFE() {\n    var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n    var j = 0,\n      k = 0;\n    for (; j < DST_LN.length - 1; ++j) {\n      for (; k < DST_LN[j + 1]; ++k) DST_LN_RE[k] = j;\n    }\n    for (; k < 32768; ++k) DST_LN_RE[k] = 29;\n    var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];\n    for (j = 0, k = 0; j < LEN_LN.length - 1; ++j) {\n      for (; k < LEN_LN[j + 1]; ++k) LEN_LN_RE[k] = j;\n    }\n    function write_stored(data, out) {\n      var boff = 0;\n      while (boff < data.length) {\n        var L = Math.min(0xFFFF, data.length - boff);\n        var h = boff + L == data.length;\n        out.write_shift(1, +h);\n        out.write_shift(2, L);\n        out.write_shift(2, ~L & 0xFFFF);\n        while (L-- > 0) out[out.l++] = data[boff++];\n      }\n      return out.l;\n    }\n\n    /* Fixed Huffman */\n    function write_huff_fixed(data, out) {\n      var bl = 0;\n      var boff = 0;\n      var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n      while (boff < data.length) {\n        var L = /* data.length - boff; */Math.min(0xFFFF, data.length - boff);\n\n        /* write a stored block for short data */\n        if (L < 10) {\n          bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n          if (bl & 7) bl += 8 - (bl & 7);\n          out.l = bl / 8 | 0;\n          out.write_shift(2, L);\n          out.write_shift(2, ~L & 0xFFFF);\n          while (L-- > 0) out[out.l++] = data[boff++];\n          bl = out.l * 8;\n          continue;\n        }\n        bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n        var hash = 0;\n        while (L-- > 0) {\n          var d = data[boff];\n          hash = (hash << 5 ^ d) & 0x7FFF;\n          var match = -1,\n            mlen = 0;\n          if (match = addrs[hash]) {\n            match |= boff & ~0x7FFF;\n            if (match > boff) match -= 0x8000;\n            if (match < boff) while (data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;\n          }\n          if (mlen > 2) {\n            /* Copy Token  */\n            d = LEN_LN_RE[mlen];\n            if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;else {\n              write_bits_8(out, bl, 3);\n              bl += 5;\n              write_bits_8(out, bl, bitswap8[d - 23] >> 5);\n              bl += 3;\n            }\n            var len_eb = d < 8 ? 0 : d - 4 >> 2;\n            if (len_eb > 0) {\n              write_bits_16(out, bl, mlen - LEN_LN[d]);\n              bl += len_eb;\n            }\n            d = DST_LN_RE[boff - match];\n            bl = write_bits_8(out, bl, bitswap8[d] >> 3);\n            bl -= 3;\n            var dst_eb = d < 4 ? 0 : d - 2 >> 1;\n            if (dst_eb > 0) {\n              write_bits_16(out, bl, boff - match - DST_LN[d]);\n              bl += dst_eb;\n            }\n            for (var q = 0; q < mlen; ++q) {\n              addrs[hash] = boff & 0x7FFF;\n              hash = (hash << 5 ^ data[boff]) & 0x7FFF;\n              ++boff;\n            }\n            L -= mlen - 1;\n          } else {\n            /* Literal Token */\n            if (d <= 143) d = d + 48;else bl = write_bits_1(out, bl, 1);\n            bl = write_bits_8(out, bl, bitswap8[d]);\n            addrs[hash] = boff & 0x7FFF;\n            ++boff;\n          }\n        }\n        bl = write_bits_8(out, bl, 0) - 1;\n      }\n      out.l = (bl + 7) / 8 | 0;\n      return out.l;\n    }\n    return function _deflateRaw(data, out) {\n      if (data.length < 8) return write_stored(data, out);\n      return write_huff_fixed(data, out);\n    };\n  }();\n  function _deflate(data) {\n    var buf = new_buf(50 + Math.floor(data.length * 1.1));\n    var off = _deflateRaw(data, buf);\n    return buf.slice(0, off);\n  }\n  /* modified inflate function also moves original read head */\n\n  var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);\n  var dyn_len_1 = 1,\n    dyn_len_2 = 1;\n\n  /* 5.5.3 Expanding Huffman Codes */\n  function dyn(data, boff) {\n    /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n    var _HLIT = read_bits_5(data, boff) + 257;\n    boff += 5;\n    var _HDIST = read_bits_5(data, boff) + 1;\n    boff += 5;\n    var _HCLEN = read_bits_4(data, boff) + 4;\n    boff += 4;\n    var w = 0;\n\n    /* grab and store code lengths */\n    var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n    var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var maxlen = 1;\n    var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var L = clens.length; /* 19 */\n    for (var i = 0; i < _HCLEN; ++i) {\n      clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n      if (maxlen < w) maxlen = w;\n      bl_count[w]++;\n      boff += 3;\n    }\n\n    /* build code tree */\n    var ccode = 0;\n    bl_count[0] = 0;\n    for (i = 1; i <= maxlen; ++i) next_code[i] = ccode = ccode + bl_count[i - 1] << 1;\n    for (i = 0; i < L; ++i) if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n    /* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n    var cleni = 0;\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n      if (cleni != 0) {\n        ccode = bitswap8[ctree[i]] >> 8 - cleni;\n        for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;\n      }\n    }\n\n    /* read literal and dist codes at once */\n    var hcodes = [];\n    maxlen = 1;\n    for (; hcodes.length < _HLIT + _HDIST;) {\n      ccode = dyn_cmap[read_bits_7(data, boff)];\n      boff += ccode & 7;\n      switch (ccode >>>= 3) {\n        case 16:\n          w = 3 + read_bits_2(data, boff);\n          boff += 2;\n          ccode = hcodes[hcodes.length - 1];\n          while (w-- > 0) hcodes.push(ccode);\n          break;\n        case 17:\n          w = 3 + read_bits_3(data, boff);\n          boff += 3;\n          while (w-- > 0) hcodes.push(0);\n          break;\n        case 18:\n          w = 11 + read_bits_7(data, boff);\n          boff += 7;\n          while (w-- > 0) hcodes.push(0);\n          break;\n        default:\n          hcodes.push(ccode);\n          if (maxlen < ccode) maxlen = ccode;\n          break;\n      }\n    }\n\n    /* build literal / length trees */\n    var h1 = hcodes.slice(0, _HLIT),\n      h2 = hcodes.slice(_HLIT);\n    for (i = _HLIT; i < 286; ++i) h1[i] = 0;\n    for (i = _HDIST; i < 30; ++i) h2[i] = 0;\n    dyn_len_1 = build_tree(h1, dyn_lmap, 286);\n    dyn_len_2 = build_tree(h2, dyn_dmap, 30);\n    return boff;\n  }\n\n  /* return [ data, bytesRead ] */\n  function inflate(data, usz) {\n    /* shortcircuit for empty buffer [0x03, 0x00] */\n    if (data[0] == 3 && !(data[1] & 0x3)) {\n      return [new_raw_buf(usz), 2];\n    }\n\n    /* bit offset */\n    var boff = 0;\n\n    /* header includes final bit and type bits */\n    var header = 0;\n    var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);\n    var woff = 0;\n    var OL = outbuf.length >>> 0;\n    var max_len_1 = 0,\n      max_len_2 = 0;\n    while ((header & 1) == 0) {\n      header = read_bits_3(data, boff);\n      boff += 3;\n      if (header >>> 1 == 0) {\n        /* Stored block */\n        if (boff & 7) boff += 8 - (boff & 7);\n        /* 2 bytes sz, 2 bytes bit inverse */\n        var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;\n        boff += 32;\n        /* push sz bytes */\n        if (sz > 0) {\n          if (!usz && OL < woff + sz) {\n            outbuf = realloc(outbuf, woff + sz);\n            OL = outbuf.length;\n          }\n          while (sz-- > 0) {\n            outbuf[woff++] = data[boff >>> 3];\n            boff += 8;\n          }\n        }\n        continue;\n      } else if (header >> 1 == 1) {\n        /* Fixed Huffman */\n        max_len_1 = 9;\n        max_len_2 = 5;\n      } else {\n        /* Dynamic Huffman */\n        boff = dyn(data, boff);\n        max_len_1 = dyn_len_1;\n        max_len_2 = dyn_len_2;\n      }\n      for (;;) {\n        // while(true) is apparently out of vogue in modern JS circles\n        if (!usz && OL < woff + 32767) {\n          outbuf = realloc(outbuf, woff + 32767);\n          OL = outbuf.length;\n        }\n        /* ingest code and move read head */\n        var bits = read_bits_n(data, boff, max_len_1);\n        var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n        boff += code & 15;\n        code >>>= 4;\n        /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n        if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;else if (code == 256) break;else {\n          code -= 257;\n          var len_eb = code < 8 ? 0 : code - 4 >> 2;\n          if (len_eb > 5) len_eb = 0;\n          var tgt = woff + LEN_LN[code];\n          /* length extra bits */\n          if (len_eb > 0) {\n            tgt += read_bits_n(data, boff, len_eb);\n            boff += len_eb;\n          }\n\n          /* dist code */\n          bits = read_bits_n(data, boff, max_len_2);\n          code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n          boff += code & 15;\n          code >>>= 4;\n          var dst_eb = code < 4 ? 0 : code - 2 >> 1;\n          var dst = DST_LN[code];\n          /* dist extra bits */\n          if (dst_eb > 0) {\n            dst += read_bits_n(data, boff, dst_eb);\n            boff += dst_eb;\n          }\n\n          /* in the common case, manual byte copy is faster than TA set / Buffer copy */\n          if (!usz && OL < tgt) {\n            outbuf = realloc(outbuf, tgt + 100);\n            OL = outbuf.length;\n          }\n          while (woff < tgt) {\n            outbuf[woff] = outbuf[woff - dst];\n            ++woff;\n          }\n        }\n      }\n    }\n    if (usz) return [outbuf, boff + 7 >>> 3];\n    return [outbuf.slice(0, woff), boff + 7 >>> 3];\n  }\n  function _inflate(payload, usz) {\n    var data = payload.slice(payload.l || 0);\n    var out = inflate(data, usz);\n    payload.l += out[1];\n    return out[0];\n  }\n  function warn_or_throw(wrn, msg) {\n    if (wrn) {\n      if (typeof console !== 'undefined') console.error(msg);\n    } else throw new Error(msg);\n  }\n  function parse_zip(file, options) {\n    var blob = file;\n    prep_blob(blob, 0);\n    var FileIndex = [],\n      FullPaths = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o, {\n      root: options.root\n    });\n\n    /* find end of central directory, start just after signature */\n    var i = blob.length - 4;\n    while ((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0) --i;\n    blob.l = i + 4;\n\n    /* parse end of central directory */\n    blob.l += 4;\n    var fcnt = blob.read_shift(2);\n    blob.l += 6;\n    var start_cd = blob.read_shift(4);\n\n    /* parse central directory */\n    blob.l = start_cd;\n    for (i = 0; i < fcnt; ++i) {\n      /* trust local file header instead of CD entry */\n      blob.l += 20;\n      var csz = blob.read_shift(4);\n      var usz = blob.read_shift(4);\n      var namelen = blob.read_shift(2);\n      var efsz = blob.read_shift(2);\n      var fcsz = blob.read_shift(2);\n      blob.l += 8;\n      var offset = blob.read_shift(4);\n      var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));\n      blob.l += namelen + efsz + fcsz;\n      var L = blob.l;\n      blob.l = offset + 4;\n      parse_local_file(blob, csz, usz, o, EF);\n      blob.l = L;\n    }\n    return o;\n  }\n\n  /* head starts just after local file header signature */\n  function parse_local_file(blob, csz, usz, o, EF) {\n    /* [local file header] */\n    blob.l += 2;\n    var flags = blob.read_shift(2);\n    var meth = blob.read_shift(2);\n    var date = parse_dos_date(blob);\n    if (flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n    var crc32 = blob.read_shift(4);\n    var _csz = blob.read_shift(4);\n    var _usz = blob.read_shift(4);\n    var namelen = blob.read_shift(2);\n    var efsz = blob.read_shift(2);\n\n    // TODO: flags & (1<<11) // UTF8\n    var name = \"\";\n    for (var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);\n    if (efsz) {\n      var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));\n      if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;\n      if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;\n    }\n    blob.l += efsz;\n\n    /* [encryption header] */\n\n    /* [file data] */\n    var data = blob.slice(blob.l, blob.l + _csz);\n    switch (meth) {\n      case 8:\n        data = _inflateRawSync(blob, _usz);\n        break;\n      case 0:\n        break;\n      // TODO: scan for magic number\n      default:\n        throw new Error(\"Unsupported ZIP Compression method \" + meth);\n    }\n\n    /* [data descriptor] */\n    var wrn = false;\n    if (flags & 8) {\n      crc32 = blob.read_shift(4);\n      if (crc32 == 0x08074b50) {\n        crc32 = blob.read_shift(4);\n        wrn = true;\n      }\n      _csz = blob.read_shift(4);\n      _usz = blob.read_shift(4);\n    }\n    if (_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n    if (_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n    var _crc32 = CRC32.buf(data, 0);\n    if (crc32 >> 0 != _crc32 >> 0) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n    cfb_add(o, name, data, {\n      unsafe: true,\n      mt: date\n    });\n  }\n  function write_zip(cfb, options) {\n    var _opts = options || {};\n    var out = [],\n      cdirs = [];\n    var o = new_buf(1);\n    var method = _opts.compression ? 8 : 0,\n      flags = 0;\n    var desc = false;\n    if (desc) flags |= 8;\n    var i = 0,\n      j = 0;\n    var start_cd = 0,\n      fcnt = 0;\n    var root = cfb.FullPaths[0],\n      fp = root,\n      fi = cfb.FileIndex[0];\n    var crcs = [];\n    var sz_cd = 0;\n    for (i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n      var start = start_cd;\n\n      /* TODO: CP437 filename */\n      var namebuf = new_buf(fp.length);\n      for (j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n      namebuf = namebuf.slice(0, namebuf.l);\n      crcs[fcnt] = CRC32.buf(fi.content, 0);\n      var outbuf = fi.content;\n      if (method == 8) outbuf = _deflateRawSync(outbuf);\n\n      /* local file header */\n      o = new_buf(30);\n      o.write_shift(4, 0x04034b50);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      /* TODO: last mod file time/date */\n      if (fi.mt) write_dos_date(o, fi.mt);else o.write_shift(4, 0);\n      o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);\n      o.write_shift(4, flags & 8 ? 0 : outbuf.length);\n      o.write_shift(4, flags & 8 ? 0 : fi.content.length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      start_cd += o.length;\n      out.push(o);\n      start_cd += namebuf.length;\n      out.push(namebuf);\n\n      /* TODO: extra fields? */\n\n      /* TODO: encryption header ? */\n\n      start_cd += outbuf.length;\n      out.push(outbuf);\n\n      /* data descriptor */\n      if (flags & 8) {\n        o = new_buf(12);\n        o.write_shift(-4, crcs[fcnt]);\n        o.write_shift(4, outbuf.length);\n        o.write_shift(4, fi.content.length);\n        start_cd += o.l;\n        out.push(o);\n      }\n\n      /* central directory */\n      o = new_buf(46);\n      o.write_shift(4, 0x02014b50);\n      o.write_shift(2, 0);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      o.write_shift(4, 0); /* TODO: last mod file time/date */\n      o.write_shift(-4, crcs[fcnt]);\n      o.write_shift(4, outbuf.length);\n      o.write_shift(4, fi.content.length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, start);\n      sz_cd += o.l;\n      cdirs.push(o);\n      sz_cd += namebuf.length;\n      cdirs.push(namebuf);\n      ++fcnt;\n    }\n\n    /* end of central directory */\n    o = new_buf(22);\n    o.write_shift(4, 0x06054b50);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, fcnt);\n    o.write_shift(2, fcnt);\n    o.write_shift(4, sz_cd);\n    o.write_shift(4, start_cd);\n    o.write_shift(2, 0);\n    return bconcat([bconcat(out), bconcat(cdirs), o]);\n  }\n  var ContentTypeMap = {\n    \"htm\": \"text/html\",\n    \"xml\": \"text/xml\",\n    \"gif\": \"image/gif\",\n    \"jpg\": \"image/jpeg\",\n    \"png\": \"image/png\",\n    \"mso\": \"application/x-mso\",\n    \"thmx\": \"application/vnd.ms-officetheme\",\n    \"sh33tj5\": \"application/octet-stream\"\n  };\n  function get_content_type(fi, fp) {\n    if (fi.ctype) return fi.ctype;\n    var ext = fi.name || \"\",\n      m = ext.match(/\\.([^\\.]+)$/);\n    if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n    if (fp) {\n      m = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n      if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n    }\n    return \"application/octet-stream\";\n  }\n\n  /* 76 character chunks TODO: intertwine encoding */\n  function write_base64_76(bstr) {\n    var data = Base64_encode(bstr);\n    var o = [];\n    for (var i = 0; i < data.length; i += 76) o.push(data.slice(i, i + 76));\n    return o.join(\"\\r\\n\") + \"\\r\\n\";\n  }\n\n  /*\n  Rules for QP:\n  \t- escape =## applies for all non-display characters and literal \"=\"\n  \t- space or tab at end of line must be encoded\n  \t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n  \t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n  \n  TODO: Some files from word appear to write line extensions with bare equals:\n  \n  ```\n  <table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n  =\"70%\"\n  ```\n  */\n  function write_quoted_printable(text) {\n    var encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function (c) {\n      var w = c.charCodeAt(0).toString(16).toUpperCase();\n      return \"=\" + (w.length == 1 ? \"0\" + w : w);\n    });\n    encoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n    if (encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n    encoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n    var o = [],\n      split = encoded.split(\"\\r\\n\");\n    for (var si = 0; si < split.length; ++si) {\n      var str = split[si];\n      if (str.length == 0) {\n        o.push(\"\");\n        continue;\n      }\n      for (var i = 0; i < str.length;) {\n        var end = 76;\n        var tmp = str.slice(i, i + end);\n        if (tmp.charAt(end - 1) == \"=\") end--;else if (tmp.charAt(end - 2) == \"=\") end -= 2;else if (tmp.charAt(end - 3) == \"=\") end -= 3;\n        tmp = str.slice(i, i + end);\n        i += end;\n        if (i < str.length) tmp += \"=\";\n        o.push(tmp);\n      }\n    }\n    return o.join(\"\\r\\n\");\n  }\n  function parse_quoted_printable(data) {\n    var o = [];\n\n    /* unify long lines */\n    for (var di = 0; di < data.length; ++di) {\n      var line = data[di];\n      while (di <= data.length && line.charAt(line.length - 1) == \"=\") line = line.slice(0, line.length - 1) + data[++di];\n      o.push(line);\n    }\n\n    /* decode */\n    for (var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function ($$) {\n      return String.fromCharCode(parseInt($$.slice(1), 16));\n    });\n    return s2a(o.join(\"\\r\\n\"));\n  }\n  function parse_mime(cfb, data, root) {\n    var fname = \"\",\n      cte = \"\",\n      ctype = \"\",\n      fdata;\n    var di = 0;\n    for (; di < 10; ++di) {\n      var line = data[di];\n      if (!line || line.match(/^\\s*$/)) break;\n      var m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n      if (m) switch (m[1].toLowerCase()) {\n        case \"content-location\":\n          fname = m[2].trim();\n          break;\n        case \"content-type\":\n          ctype = m[2].trim();\n          break;\n        case \"content-transfer-encoding\":\n          cte = m[2].trim();\n          break;\n      }\n    }\n    ++di;\n    switch (cte.toLowerCase()) {\n      case 'base64':\n        fdata = s2a(Base64_decode(data.slice(di).join(\"\")));\n        break;\n      case 'quoted-printable':\n        fdata = parse_quoted_printable(data.slice(di));\n        break;\n      default:\n        throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n    }\n    var file = cfb_add(cfb, fname.slice(root.length), fdata, {\n      unsafe: true\n    });\n    if (ctype) file.ctype = ctype;\n  }\n  function parse_mad(file, options) {\n    if (a2s(file.slice(0, 13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n    var root = options && options.root || \"\";\n    // $FlowIgnore\n    var data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n    var di = 0,\n      row = \"\";\n\n    /* if root is not specified, scan for the common prefix */\n    for (di = 0; di < data.length; ++di) {\n      row = data[di];\n      if (!/^Content-Location:/i.test(row)) continue;\n      row = row.slice(row.indexOf(\"file\"));\n      if (!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n      if (row.slice(0, root.length) == root) continue;\n      while (root.length > 0) {\n        root = root.slice(0, root.length - 1);\n        root = root.slice(0, root.lastIndexOf(\"/\") + 1);\n        if (row.slice(0, root.length) == root) break;\n      }\n    }\n    var mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n    if (!mboundary) throw new Error(\"MAD cannot find boundary\");\n    var boundary = \"--\" + (mboundary[1] || \"\");\n    var FileIndex = [],\n      FullPaths = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o);\n    var start_di,\n      fcnt = 0;\n    for (di = 0; di < data.length; ++di) {\n      var line = data[di];\n      if (line !== boundary && line !== boundary + \"--\") continue;\n      if (fcnt++) parse_mime(o, data.slice(start_di, di), root);\n      start_di = di;\n    }\n    return o;\n  }\n  function write_mad(cfb, options) {\n    var opts = options || {};\n    var boundary = opts.boundary || \"SheetJS\";\n    boundary = '------=' + boundary;\n    var out = ['MIME-Version: 1.0', 'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"', '', '', ''];\n    var root = cfb.FullPaths[0],\n      fp = root,\n      fi = cfb.FileIndex[0];\n    for (var i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\n      /* Normalize filename */\n      fp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function (c) {\n        return \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n      }).replace(/[\\u0080-\\uFFFF]/g, function (u) {\n        return \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n      });\n\n      /* Extract content as binary string */\n      var ca = fi.content;\n      // $FlowIgnore\n      var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n\n      /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */\n      var dispcnt = 0,\n        L = Math.min(1024, cstr.length),\n        cc = 0;\n      for (var csl = 0; csl <= L; ++csl) if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n      var qp = dispcnt >= L * 4 / 5;\n      out.push(boundary);\n      out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);\n      out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));\n      out.push('Content-Type: ' + get_content_type(fi, fp));\n      out.push('');\n      out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n    }\n    out.push(boundary + '--\\r\\n');\n    return out.join(\"\\r\\n\");\n  }\n  function cfb_new(opts) {\n    var o = {};\n    init_cfb(o, opts);\n    return o;\n  }\n  function cfb_add(cfb, name, content, opts) {\n    var unsafe = opts && opts.unsafe;\n    if (!unsafe) init_cfb(cfb);\n    var file = !unsafe && CFB.find(cfb, name);\n    if (!file) {\n      var fpath = cfb.FullPaths[0];\n      if (name.slice(0, fpath.length) == fpath) fpath = name;else {\n        if (fpath.slice(-1) != \"/\") fpath += \"/\";\n        fpath = (fpath + name).replace(\"//\", \"/\");\n      }\n      file = {\n        name: filename(name),\n        type: 2\n      };\n      cfb.FileIndex.push(file);\n      cfb.FullPaths.push(fpath);\n      if (!unsafe) CFB.utils.cfb_gc(cfb);\n    }\n    file.content = content;\n    file.size = content ? content.length : 0;\n    if (opts) {\n      if (opts.CLSID) file.clsid = opts.CLSID;\n      if (opts.mt) file.mt = opts.mt;\n      if (opts.ct) file.ct = opts.ct;\n    }\n    return file;\n  }\n  function cfb_del(cfb, name) {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {\n      cfb.FileIndex.splice(j, 1);\n      cfb.FullPaths.splice(j, 1);\n      return true;\n    }\n    return false;\n  }\n  function cfb_mov(cfb, old_name, new_name) {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, old_name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) if (cfb.FileIndex[j] == file) {\n      cfb.FileIndex[j].name = filename(new_name);\n      cfb.FullPaths[j] = new_name;\n      return true;\n    }\n    return false;\n  }\n  function cfb_gc(cfb) {\n    rebuild_cfb(cfb, true);\n  }\n  exports.find = find;\n  exports.read = read;\n  exports.parse = parse;\n  exports.write = write;\n  exports.writeFile = write_file;\n  exports.utils = {\n    cfb_new: cfb_new,\n    cfb_add: cfb_add,\n    cfb_del: cfb_del,\n    cfb_mov: cfb_mov,\n    cfb_gc: cfb_gc,\n    ReadShift: ReadShift,\n    CheckField: CheckField,\n    prep_blob: prep_blob,\n    bconcat: bconcat,\n    use_zlib: use_zlib,\n    _deflateRaw: _deflate,\n    _inflateRaw: _inflate,\n    consts: consts\n  };\n  return exports;\n}();\nif (typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') {\n  module.exports = CFB;\n}","map":{"version":3,"names":["Base64_map","Base64_encode","input","o","c1","c2","c3","e1","e2","e3","e4","i","length","charCodeAt","isNaN","charAt","Base64_decode","replace","indexOf","String","fromCharCode","has_buf","Buffer","process","versions","node","Buffer_from","nbfs","from","e","buf","enc","bind","new_raw_buf","len","alloc","b","fill","Uint8Array","Array","new_unsafe_buf","allocUnsafe","s2a","s","split","map","x","chr0","chr1","__toBuffer","bufs","push","apply","___toBuffer","__utf16le","ss","__readUInt16LE","join","___utf16le","__hexlify","l","toString","slice","___hexlify","__bconcat","isArray","concat","maxlen","set","bconcat","isBuffer","__readUInt8","idx","__readInt16LE","u","__readUInt32LE","__readInt32LE","ReadShift","size","t","oI","oS","type","__writeUInt32LE","val","__writeInt32LE","WriteShift","f","parseInt","end","Math","min","cc","CheckField","hexstr","fld","m","Error","prep_blob","blob","pos","read_shift","chk","write_shift","new_buf","sz","CRC32","version","signed_crc_table","c","table","n","Int32Array","T0","slice_by_16_tables","T","v","out","subarray","TT","T1","T2","T3","T4","T5","T6","T7","T8","T9","Ta","Tb","Tc","Td","Te","Tf","crc32_bstr","bstr","seed","C","L","crc32_buf","B","crc32_str","str","d","CFB","_CFB","exports","namecmp","r","R","Z","dirname","p","lastIndexOf","filename","write_dos_date","date","Date","hms","getHours","getMinutes","getSeconds","ymd","getFullYear","getMonth","getDate","parse_dos_date","setMilliseconds","setFullYear","setMonth","setDate","S","M","setHours","setMinutes","setSeconds","parse_extra_field","flags","tgt","mtime","atime","ctime","mt","fs","get_fs","require","parse","file","options","parse_zip","parse_mad","mver","ssz","nmfs","difat_sec_cnt","dir_start","minifat_start","difat_start","fat_addrs","mv","check_get_mver","header","check_shifts","dir_cnt","q","j","sectors","sectorify","sleuth_fat","sector_list","make_sector_list","name","ENDOFCHAIN","files","Paths","FileIndex","FullPaths","read_directory","build_full_paths","shift","raw","HEADER_SIGNATURE","nsectors","ceil","FI","FP","pl","dad","get_mfat_entry","entry","payload","mini","start","MSSZ","cnt","sector","get_sector_list","chkd","buf_chain","modulus","jj","addr","floor","nodes","data","sl","k","seen","minifat_store","namelen","color","clsid","state","ct","read_date","storage","undefined","content","offset","pow","read_file","readFileSync","read","init_cfb","cfb","opts","root","CLSID","seed_cfb","nm","find","rebuild_cfb","gc","_file","pop","now","fullPaths","Object","create","HEADER_CLSID","sort","y","elt","_write","_opts","fileType","write_mad","write_zip","mini_size","fat_size","flen","mini_cnt","mfat_cnt","fat_base","fat_cnt","difat_cnt","HEADER_SIG","chainit","w","consts","DIFSECT","FATSECT","_nm","console","error","copy","path","UCFullPaths","toUpperCase","UCPaths","UCPath","match","MAXREGSECT","FREESECT","HEADER_MINOR_VERSION","MAXREGSID","NOSTREAM","EntryTypes","write_file","writeFileSync","a2s","write","_zlib","use_zlib","zlib","InflateRaw","InflRaw","_processChunk","_finishFlushFlag","bytesRead","message","_inflateRawSync","usz","_inflate","_deflateRawSync","deflateRawSync","_deflate","CLEN_ORDER","LEN_LN","DST_LN","bit_swap_8","use_typed_arrays","bitswap8","bit_swap_n","rev","read_bits_2","bl","h","read_bits_3","read_bits_4","read_bits_5","read_bits_7","read_bits_n","write_bits_3","write_bits_1","write_bits_8","write_bits_16","realloc","a","zero_fill_array","build_tree","clens","cmap","MAX","ccode","bl_count","Uint16Array","ctree","cleni","fix_lmap","fix_dmap","dlens","_deflateRaw","_deflateRawIIFE","DST_LN_RE","LEN_LN_RE","write_stored","boff","write_huff_fixed","addrs","hash","mlen","len_eb","dst_eb","off","dyn_lmap","dyn_dmap","dyn_cmap","dyn_len_1","dyn_len_2","dyn","_HLIT","_HDIST","_HCLEN","next_code","hcodes","h1","h2","inflate","outbuf","woff","OL","max_len_1","max_len_2","bits","code","dst","warn_or_throw","wrn","msg","fcnt","start_cd","csz","efsz","fcsz","EF","parse_local_file","meth","crc32","_csz","_usz","ef","_crc32","cfb_add","unsafe","cdirs","method","compression","desc","fp","fi","crcs","sz_cd","namebuf","ContentTypeMap","get_content_type","ctype","ext","write_base64_76","write_quoted_printable","text","encoded","si","tmp","parse_quoted_printable","di","line","oi","$$","parse_mime","fname","cte","fdata","toLowerCase","trim","row","test","mboundary","boundary","start_di","ca","cstr","dispcnt","csl","qp","cfb_new","fpath","utils","cfb_gc","cfb_del","splice","cfb_mov","old_name","new_name","writeFile","_inflateRaw","module","DO_NOT_EXPORT_CFB"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/cfb/cfb.js"],"sourcesContent":["/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint eqnull:true */\n/*exported CFB */\n/*global module, require:false, process:false, Buffer:false, Uint8Array:false, Uint16Array:false */\n\nvar Base64_map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nfunction Base64_encode(input) {\n\tvar o = \"\";\n\tvar c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;\n\tfor (var i = 0; i < input.length; ) {\n\t\tc1 = input.charCodeAt(i++);\n\t\te1 = (c1 >> 2);\n\t\tc2 = input.charCodeAt(i++);\n\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t\tc3 = input.charCodeAt(i++);\n\t\te3 = ((c2 & 15) << 2) | (c3 >> 6);\n\t\te4 = (c3 & 63);\n\t\tif (isNaN(c2)) e3 = e4 = 64;\n\t\telse if (isNaN(c3)) e4 = 64;\n\t\to += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);\n\t}\n\treturn o;\n}\nfunction Base64_decode(input) {\n\tvar o = \"\";\n\tvar c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;\n\tinput = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n\tfor (var i = 0; i < input.length;) {\n\t\te1 = Base64_map.indexOf(input.charAt(i++));\n\t\te2 = Base64_map.indexOf(input.charAt(i++));\n\t\tc1 = (e1 << 2) | (e2 >> 4);\n\t\to += String.fromCharCode(c1);\n\t\te3 = Base64_map.indexOf(input.charAt(i++));\n\t\tc2 = ((e2 & 15) << 4) | (e3 >> 2);\n\t\tif (e3 !== 64) o += String.fromCharCode(c2);\n\t\te4 = Base64_map.indexOf(input.charAt(i++));\n\t\tc3 = ((e3 & 3) << 6) | e4;\n\t\tif (e4 !== 64) o += String.fromCharCode(c3);\n\t}\n\treturn o;\n}\nvar has_buf = (function() { return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node; })();\n\nvar Buffer_from = (function() {\n\tif(typeof Buffer !== 'undefined') {\n\t\tvar nbfs = !Buffer.from;\n\t\tif(!nbfs) try { Buffer.from(\"foo\", \"utf8\"); } catch(e) { nbfs = true; }\n\t\treturn nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);\n\t}\n\treturn function() {};\n})();\n\n\nfunction new_raw_buf(len) {\n\t/* jshint -W056 */\n\tif(has_buf) {\n\t\tif(Buffer.alloc) return Buffer.alloc(len);\n\t\tvar b = new Buffer(len); b.fill(0); return b;\n\t}\n\treturn typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len) {\n\t/* jshint -W056 */\n\tif(has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);\n\treturn typeof Uint8Array != \"undefined\" ? new Uint8Array(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nvar s2a = function s2a(s) {\n\tif(has_buf) return Buffer_from(s, \"binary\");\n\treturn s.split(\"\").map(function(x){ return x.charCodeAt(0) & 0xff; });\n};\n\nvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/g;\nvar __toBuffer = function(bufs) { var x = []; for(var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]); } return x; };\nvar ___toBuffer = __toBuffer;\nvar __utf16le = function(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(\"\").replace(chr0,''); };\nvar ___utf16le = __utf16le;\nvar __hexlify = function(b,s,l) { var ss=[]; for(var i=s; i<s+l; ++i) ss.push((\"0\" + b[i].toString(16)).slice(-2)); return ss.join(\"\"); };\nvar ___hexlify = __hexlify;\nvar __bconcat = function(bufs) {\n\tif(Array.isArray(bufs[0])) return [].concat.apply([], bufs);\n\tvar maxlen = 0, i = 0;\n\tfor(i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;\n\tvar o = new Uint8Array(maxlen);\n\tfor(i = 0, maxlen = 0; i < bufs.length; maxlen += bufs[i].length, ++i) o.set(bufs[i], maxlen);\n\treturn o;\n};\nvar bconcat = __bconcat;\n\n\nif(has_buf) {\n\t__utf16le = function(b,s,e) {\n\t\tif(!Buffer.isBuffer(b)) return ___utf16le(b,s,e);\n\t\treturn b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/;\n\t};\n\t__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };\n\t__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat((bufs[0])) : ___toBuffer(bufs);};\n\ts2a = function(s) { return Buffer_from(s, \"binary\"); };\n\tbconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : __bconcat(bufs); };\n}\n\n\nvar __readUInt8 = function(b, idx) { return b[idx]; };\nvar __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };\nvar __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };\nvar __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\nvar __readInt32LE = function(b, idx) { return (b[idx+3]<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\n\nfunction ReadShift(size, t) {\n\tvar oI, oS, type = 0;\n\tswitch(size) {\n\t\tcase 1: oI = __readUInt8(this, this.l); break;\n\t\tcase 2: oI = (t !== 'i' ? __readUInt16LE : __readInt16LE)(this, this.l); break;\n\t\tcase 4: oI = __readInt32LE(this, this.l); break;\n\t\tcase 16: type = 2; oS = __hexlify(this, this.l, size);\n\t}\n\tthis.l += size; if(type === 0) return oI; return oS;\n}\n\nvar __writeUInt32LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };\nvar __writeInt32LE  = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };\n\nfunction WriteShift(t, val, f) {\n\tvar size = 0, i = 0;\n\tswitch(f) {\n\t\tcase \"hex\": for(; i < t; ++i) {\nthis[this.l++] = parseInt(val.slice(2*i, 2*i+2), 16)||0;\n\t\t} return this;\n\t\tcase \"utf16le\":\nvar end = this.l + t;\n\t\t\tfor(i = 0; i < Math.min(val.length, t); ++i) {\n\t\t\t\tvar cc = val.charCodeAt(i);\n\t\t\t\tthis[this.l++] = cc & 0xff;\n\t\t\t\tthis[this.l++] = cc >> 8;\n\t\t\t}\n\t\t\twhile(this.l < end) this[this.l++] = 0;\n\t\t\treturn this;\n\t}\nswitch(t) {\n\t\tcase  1: size = 1; this[this.l] = val&0xFF; break;\n\t\tcase  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;\n\t\tcase  4: size = 4; __writeUInt32LE(this, val, this.l); break;\n\t\tcase -4: size = 4; __writeInt32LE(this, val, this.l); break;\n\t}\n\tthis.l += size; return this;\n}\n\nfunction CheckField(hexstr, fld) {\n\tvar m = __hexlify(this,this.l,hexstr.length>>1);\n\tif(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n\tthis.l += hexstr.length>>1;\n}\n\nfunction prep_blob(blob, pos) {\n\tblob.l = pos;\n\tblob.read_shift = ReadShift;\n\tblob.chk = CheckField;\n\tblob.write_shift = WriteShift;\n}\n\nfunction new_buf(sz) {\n\tvar o = (new_raw_buf(sz));\n\tprep_blob(o, 0);\n\treturn o;\n}\n\n/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32 = (function() {\nvar CRC32 = {};\nCRC32.version = '1.2.1';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\nCRC32.bstr = crc32_bstr;\nCRC32.buf = crc32_buf;\nCRC32.str = crc32_str;\nreturn CRC32;\n})();\n/* [MS-CFB] v20171201 */\nvar CFB = (function _CFB(){\nvar exports = {};\nexports.version = '1.2.2';\n/* [MS-CFB] 2.6.4 */\nfunction namecmp(l, r) {\n\tvar L = l.split(\"/\"), R = r.split(\"/\");\n\tfor(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n\t\tif((c = L[i].length - R[i].length)) return c;\n\t\tif(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n\t}\n\treturn L.length - R.length;\n}\nfunction dirname(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return (p.slice(0,-1).indexOf(\"/\") === -1) ? p : dirname(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(0, c+1);\n}\n\nfunction filename(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(c+1);\n}\n/* -------------------------------------------------------------------------- */\n/* DOS Date format:\n   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n   add 1980 to stored year\n   stored second should be doubled\n*/\n\n/* write JS date to buf as a DOS date */\nfunction write_dos_date(buf, date) {\n\tif(typeof date === \"string\") date = new Date(date);\n\tvar hms = date.getHours();\n\thms = hms << 6 | date.getMinutes();\n\thms = hms << 5 | (date.getSeconds()>>>1);\n\tbuf.write_shift(2, hms);\n\tvar ymd = (date.getFullYear() - 1980);\n\tymd = ymd << 4 | (date.getMonth()+1);\n\tymd = ymd << 5 | date.getDate();\n\tbuf.write_shift(2, ymd);\n}\n\n/* read four bytes from buf and interpret as a DOS date */\nfunction parse_dos_date(buf) {\n\tvar hms = buf.read_shift(2) & 0xFFFF;\n\tvar ymd = buf.read_shift(2) & 0xFFFF;\n\tvar val = new Date();\n\tvar d = ymd & 0x1F; ymd >>>= 5;\n\tvar m = ymd & 0x0F; ymd >>>= 4;\n\tval.setMilliseconds(0);\n\tval.setFullYear(ymd + 1980);\n\tval.setMonth(m-1);\n\tval.setDate(d);\n\tvar S = hms & 0x1F; hms >>>= 5;\n\tvar M = hms & 0x3F; hms >>>= 6;\n\tval.setHours(hms);\n\tval.setMinutes(M);\n\tval.setSeconds(S<<1);\n\treturn val;\n}\nfunction parse_extra_field(blob) {\n\tprep_blob(blob, 0);\n\tvar o = {};\n\tvar flags = 0;\n\twhile(blob.l <= blob.length - 4) {\n\t\tvar type = blob.read_shift(2);\n\t\tvar sz = blob.read_shift(2), tgt = blob.l + sz;\n\t\tvar p = {};\n\t\tswitch(type) {\n\t\t\t/* UNIX-style Timestamps */\n\t\t\tcase 0x5455: {\n\t\t\t\tflags = blob.read_shift(1);\n\t\t\t\tif(flags & 1) p.mtime = blob.read_shift(4);\n\t\t\t\t/* for some reason, CD flag corresponds to LFH */\n\t\t\t\tif(sz > 5) {\n\t\t\t\t\tif(flags & 2) p.atime = blob.read_shift(4);\n\t\t\t\t\tif(flags & 4) p.ctime = blob.read_shift(4);\n\t\t\t\t}\n\t\t\t\tif(p.mtime) p.mt = new Date(p.mtime*1000);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tblob.l = tgt;\n\t\to[type] = p;\n\t}\n\treturn o;\n}\nvar fs;\nfunction get_fs() { return fs || (fs = require('fs')); }\nfunction parse(file, options) {\nif(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\nif((file[0] | 0x20) == 0x6d && (file[1]|0x20) == 0x69) return parse_mad(file, options);\nif(file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\nvar mver = 3;\nvar ssz = 512;\nvar nmfs = 0; // number of mini FAT sectors\nvar difat_sec_cnt = 0;\nvar dir_start = 0;\nvar minifat_start = 0;\nvar difat_start = 0;\n\nvar fat_addrs = []; // locations of FAT sectors\n\n/* [MS-CFB] 2.2 Compound File Header */\nvar blob = file.slice(0,512);\nprep_blob(blob, 0);\n\n/* major version */\nvar mv = check_get_mver(blob);\nmver = mv[0];\nswitch(mver) {\n\tcase 3: ssz = 512; break; case 4: ssz = 4096; break;\n\tcase 0: if(mv[1] == 0) return parse_zip(file, options);\n\t/* falls through */\n\tdefault: throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n}\n\n/* reprocess header */\nif(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }\n/* Save header for final object */\nvar header = file.slice(0,ssz);\n\ncheck_shifts(blob, mver);\n\n// Number of Directory Sectors\nvar dir_cnt = blob.read_shift(4, 'i');\nif(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);\n\n// Number of FAT Sectors\nblob.l += 4;\n\n// First Directory Sector Location\ndir_start = blob.read_shift(4, 'i');\n\n// Transaction Signature\nblob.l += 4;\n\n// Mini Stream Cutoff Size\nblob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\n// First Mini FAT Sector Location\nminifat_start = blob.read_shift(4, 'i');\n\n// Number of Mini FAT Sectors\nnmfs = blob.read_shift(4, 'i');\n\n// First DIFAT sector location\ndifat_start = blob.read_shift(4, 'i');\n\n// Number of DIFAT Sectors\ndifat_sec_cnt = blob.read_shift(4, 'i');\n\n// Grab FAT Sector Locations\nfor(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */\n\tq = blob.read_shift(4, 'i');\n\tif(q<0) break;\n\tfat_addrs[j] = q;\n}\n\n/** Break the file up into sectors */\nvar sectors = sectorify(file, ssz);\n\nsleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n\n/** Chains */\nvar sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n\nsector_list[dir_start].name = \"!Directory\";\nif(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\nsector_list[fat_addrs[0]].name = \"!FAT\";\nsector_list.fat_addrs = fat_addrs;\nsector_list.ssz = ssz;\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nvar files = {}, Paths = [], FileIndex = [], FullPaths = [];\nread_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n\nbuild_full_paths(FileIndex, FullPaths, Paths);\nPaths.shift();\n\nvar o = {\n\tFileIndex: FileIndex,\n\tFullPaths: FullPaths\n};\n\n// $FlowIgnore\nif(options && options.raw) o.raw = {header: header, sectors: sectors};\nreturn o;\n} // parse\n\n/* [MS-CFB] 2.2 Compound File Header -- read up to major version */\nfunction check_get_mver(blob) {\n\tif(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];\n\t// header signature 8\n\tblob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\n\t// clsid 16\n\t//blob.chk(HEADER_CLSID, 'CLSID: ');\n\tblob.l += 16;\n\n\t// minor version 2\n\tvar mver = blob.read_shift(2, 'u');\n\n\treturn [blob.read_shift(2,'u'), mver];\n}\nfunction check_shifts(blob, mver) {\n\tvar shift = 0x09;\n\n\t// Byte Order\n\t//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n\tblob.l += 2;\n\n\t// Sector Shift\n\tswitch((shift = blob.read_shift(2))) {\n\t\tcase 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;\n\t\tcase 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;\n\t\tdefault: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n\t}\n\n\t// Mini Sector Shift\n\tblob.chk('0600', 'Mini Sector Shift: ');\n\n\t// Reserved\n\tblob.chk('000000000000', 'Reserved: ');\n}\n\n/** Break the file up into sectors */\nfunction sectorify(file, ssz) {\n\tvar nsectors = Math.ceil(file.length/ssz)-1;\n\tvar sectors = [];\n\tfor(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);\n\tsectors[nsectors-1] = file.slice(nsectors*ssz);\n\treturn sectors;\n}\n\n/* [MS-CFB] 2.6.4 Red-Black Tree */\nfunction build_full_paths(FI, FP, Paths) {\n\tvar i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n\tvar dad = [], q = [];\n\n\tfor(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }\n\n\tfor(; j < q.length; ++j) {\n\t\ti = q[j];\n\t\tL = FI[i].L; R = FI[i].R; C = FI[i].C;\n\t\tif(dad[i] === i) {\n\t\t\tif(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n\t\t\tif(R !== -1 && dad[R] !== R) dad[i] = dad[R];\n\t\t}\n\t\tif(C !== -1 /*NOSTREAM*/) dad[C] = i;\n\t\tif(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }\n\t\tif(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }\n\t}\n\tfor(i=1; i < pl; ++i) if(dad[i] === i) {\n\t\tif(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];\n\t\telse if(L !== -1 && dad[L] !== L) dad[i] = dad[L];\n\t}\n\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type === 0 /* unknown */) continue;\n\t\tj = i;\n\t\tif(j != dad[j]) do {\n\t\t\tj = dad[j];\n\t\t\tFP[i] = FP[j] + \"/\" + FP[i];\n\t\t} while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n\t\tdad[i] = -1;\n\t}\n\n\tFP[0] += \"/\";\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n\t}\n}\n\nfunction get_mfat_entry(entry, payload, mini) {\n\tvar start = entry.start, size = entry.size;\n\t//return (payload.slice(start*MSSZ, start*MSSZ + size));\n\tvar o = [];\n\tvar idx = start;\n\twhile(mini && size > 0 && idx >= 0) {\n\t\to.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n\t\tsize -= MSSZ;\n\t\tidx = __readInt32LE(mini, idx * 4);\n\t}\n\tif(o.length === 0) return (new_buf(0));\n\treturn (bconcat(o).slice(0, entry.size));\n}\n\n/** Chase down the rest of the DIFAT chain to build a comprehensive list\n    DIFAT chains by storing the next sector number as the last 32 bits */\nfunction sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n\tvar q = ENDOFCHAIN;\n\tif(idx === ENDOFCHAIN) {\n\t\tif(cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n\t} else if(idx !== -1 /*FREESECT*/) {\n\t\tvar sector = sectors[idx], m = (ssz>>>2)-1;\n\t\tif(!sector) return;\n\t\tfor(var i = 0; i < m; ++i) {\n\t\t\tif((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;\n\t\t\tfat_addrs.push(q);\n\t\t}\n\t\tif(cnt >= 1) sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);\n\t}\n}\n\n/** Follow the linked list of sectors for a given starting point */\nfunction get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n\tvar buf = [], buf_chain = [];\n\tif(!chkd) chkd = [];\n\tvar modulus = ssz - 1, j = 0, jj = 0;\n\tfor(j=start; j>=0;) {\n\t\tchkd[j] = true;\n\t\tbuf[buf.length] = j;\n\t\tbuf_chain.push(sectors[j]);\n\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\tjj = ((j*4) & modulus);\n\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\tif(!sectors[addr]) break;\n\t\tj = __readInt32LE(sectors[addr], jj);\n\t}\n\treturn {nodes: buf, data:__toBuffer([buf_chain])};\n}\n\n/** Chase down the sector linked lists */\nfunction make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n\tvar sl = sectors.length, sector_list = ([]);\n\tvar chkd = [], buf = [], buf_chain = [];\n\tvar modulus = ssz - 1, i=0, j=0, k=0, jj=0;\n\tfor(i=0; i < sl; ++i) {\n\t\tbuf = ([]);\n\t\tk = (i + dir_start); if(k >= sl) k-=sl;\n\t\tif(chkd[k]) continue;\n\t\tbuf_chain = [];\n\t\tvar seen = [];\n\t\tfor(j=k; j>=0;) {\n\t\t\tseen[j] = true;\n\t\t\tchkd[j] = true;\n\t\t\tbuf[buf.length] = j;\n\t\t\tbuf_chain.push(sectors[j]);\n\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\tjj = ((j*4) & modulus);\n\t\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\t\tif(!sectors[addr]) break;\n\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t\tif(seen[j]) break;\n\t\t}\n\t\tsector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])});\n\t}\n\treturn sector_list;\n}\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nfunction read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {\n\tvar minifat_store = 0, pl = (Paths.length?2:0);\n\tvar sector = sector_list[dir_start].data;\n\tvar i = 0, namelen = 0, name;\n\tfor(; i < sector.length; i+= 128) {\n\t\tvar blob = sector.slice(i, i+128);\n\t\tprep_blob(blob, 64);\n\t\tnamelen = blob.read_shift(2);\n\t\tname = __utf16le(blob,0,namelen-pl);\n\t\tPaths.push(name);\n\t\tvar o = ({\n\t\t\tname:  name,\n\t\t\ttype:  blob.read_shift(1),\n\t\t\tcolor: blob.read_shift(1),\n\t\t\tL:     blob.read_shift(4, 'i'),\n\t\t\tR:     blob.read_shift(4, 'i'),\n\t\t\tC:     blob.read_shift(4, 'i'),\n\t\t\tclsid: blob.read_shift(16),\n\t\t\tstate: blob.read_shift(4, 'i'),\n\t\t\tstart: 0,\n\t\t\tsize: 0\n\t\t});\n\t\tvar ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(ctime !== 0) o.ct = read_date(blob, blob.l-8);\n\t\tvar mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(mtime !== 0) o.mt = read_date(blob, blob.l-8);\n\t\to.start = blob.read_shift(4, 'i');\n\t\to.size = blob.read_shift(4, 'i');\n\t\tif(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = \"\"; }\n\t\tif(o.type === 5) { /* root */\n\t\t\tminifat_store = o.start;\n\t\t\tif(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n\t\t\t/*minifat_size = o.size;*/\n\t\t} else if(o.size >= 4096 /* MSCSZ */) {\n\t\t\to.storage = 'fat';\n\t\t\tif(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n\t\t\tsector_list[o.start].name = o.name;\n\t\t\to.content = (sector_list[o.start].data.slice(0,o.size));\n\t\t} else {\n\t\t\to.storage = 'minifat';\n\t\t\tif(o.size < 0) o.size = 0;\n\t\t\telse if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n\t\t\t\to.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);\n\t\t\t}\n\t\t}\n\t\tif(o.content) prep_blob(o.content, 0);\n\t\tfiles[name] = o;\n\t\tFileIndex.push(o);\n\t}\n}\n\nfunction read_date(blob, offset) {\n\treturn new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);\n}\n\nfunction read_file(filename, options) {\n\tget_fs();\n\treturn parse(fs.readFileSync(filename), options);\n}\n\nfunction read(blob, options) {\n\tvar type = options && options.type;\n\tif(!type) {\n\t\tif(has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n\t}\n\tswitch(type || \"base64\") {\n\t\tcase \"file\": return read_file(blob, options);\n\t\tcase \"base64\": return parse(s2a(Base64_decode(blob)), options);\n\t\tcase \"binary\": return parse(s2a(blob), options);\n\t}\n\treturn parse(blob, options);\n}\n\nfunction init_cfb(cfb, opts) {\n\tvar o = opts || {}, root = o.root || \"Root Entry\";\n\tif(!cfb.FullPaths) cfb.FullPaths = [];\n\tif(!cfb.FileIndex) cfb.FileIndex = [];\n\tif(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n\tif(cfb.FullPaths.length === 0) {\n\t\tcfb.FullPaths[0] = root + \"/\";\n\t\tcfb.FileIndex[0] = ({ name: root, type: 5 });\n\t}\n\tif(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n\tseed_cfb(cfb);\n}\nfunction seed_cfb(cfb) {\n\tvar nm = \"\\u0001Sh33tJ5\";\n\tif(CFB.find(cfb, \"/\" + nm)) return;\n\tvar p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;\n\tcfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }));\n\tcfb.FullPaths.push(cfb.FullPaths[0] + nm);\n\trebuild_cfb(cfb);\n}\nfunction rebuild_cfb(cfb, f) {\n\tinit_cfb(cfb);\n\tvar gc = false, s = false;\n\tfor(var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n\t\tvar _file = cfb.FileIndex[i];\n\t\tswitch(_file.type) {\n\t\t\tcase 0:\n\t\t\t\tif(s) gc = true;\n\t\t\t\telse { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }\n\t\t\t\tbreak;\n\t\t\tcase 1: case 2: case 5:\n\t\t\t\ts = true;\n\t\t\t\tif(isNaN(_file.R * _file.L * _file.C)) gc = true;\n\t\t\t\tif(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n\t\t\t\tbreak;\n\t\t\tdefault: gc = true; break;\n\t\t}\n\t}\n\tif(!gc && !f) return;\n\n\tvar now = new Date(1987, 1, 19), j = 0;\n\t// Track which names exist\n\tvar fullPaths = Object.create ? Object.create(null) : {};\n\tvar data = [];\n\tfor(i = 0; i < cfb.FullPaths.length; ++i) {\n\t\tfullPaths[cfb.FullPaths[i]] = true;\n\t\tif(cfb.FileIndex[i].type === 0) continue;\n\t\tdata.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n\t}\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar dad = dirname(data[i][0]);\n\t\ts = fullPaths[dad];\n\t\twhile(!s) {\n\t\t\twhile(dirname(dad) && !fullPaths[dirname(dad)]) dad = dirname(dad);\n\n\t\t\tdata.push([dad, ({\n\t\t\t\tname: filename(dad).replace(\"/\",\"\"),\n\t\t\t\ttype: 1,\n\t\t\t\tclsid: HEADER_CLSID,\n\t\t\t\tct: now, mt: now,\n\t\t\t\tcontent: null\n\t\t\t})]);\n\n\t\t\t// Add name to set\n\t\t\tfullPaths[dad] = true;\n\n\t\t\tdad = dirname(data[i][0]);\n\t\t\ts = fullPaths[dad];\n\t\t}\n\t}\n\n\tdata.sort(function(x,y) { return namecmp(x[0], y[0]); });\n\tcfb.FullPaths = []; cfb.FileIndex = [];\n\tfor(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar elt = cfb.FileIndex[i];\n\t\tvar nm = cfb.FullPaths[i];\n\n\t\telt.name =  filename(nm).replace(\"/\",\"\");\n\t\telt.L = elt.R = elt.C = -(elt.color = 1);\n\t\telt.size = elt.content ? elt.content.length : 0;\n\t\telt.start = 0;\n\t\telt.clsid = (elt.clsid || HEADER_CLSID);\n\t\tif(i === 0) {\n\t\t\telt.C = data.length > 1 ? 1 : -1;\n\t\t\telt.size = 0;\n\t\t\telt.type = 5;\n\t\t} else if(nm.slice(-1) == \"/\") {\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;\n\t\t\telt.C = j >= data.length ? -1 : j;\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;\n\t\t\telt.R = j >= data.length ? -1 : j;\n\t\t\telt.type = 1;\n\t\t} else {\n\t\t\tif(dirname(cfb.FullPaths[i+1]||\"\") == dirname(nm)) elt.R = i + 1;\n\t\t\telt.type = 2;\n\t\t}\n\t}\n\n}\n\nfunction _write(cfb, options) {\n\tvar _opts = options || {};\n\t/* MAD is order-sensitive, skip rebuild and sort */\n\tif(_opts.fileType == 'mad') return write_mad(cfb, _opts);\n\trebuild_cfb(cfb);\n\tswitch(_opts.fileType) {\n\t\tcase 'zip': return write_zip(cfb, _opts);\n\t\t//case 'mad': return write_mad(cfb, _opts);\n\t}\n\tvar L = (function(cfb){\n\t\tvar mini_size = 0, fat_size = 0;\n\t\tfor(var i = 0; i < cfb.FileIndex.length; ++i) {\n\t\t\tvar file = cfb.FileIndex[i];\n\t\t\tif(!file.content) continue;\n\t\t\tvar flen = file.content.length;\n\t\t\tif(flen > 0){\n\t\t\t\tif(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;\n\t\t\t\telse fat_size += (flen + 0x01FF) >> 9;\n\t\t\t}\n\t\t}\n\t\tvar dir_cnt = (cfb.FullPaths.length +3) >> 2;\n\t\tvar mini_cnt = (mini_size + 7) >> 3;\n\t\tvar mfat_cnt = (mini_size + 0x7F) >> 7;\n\t\tvar fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n\t\tvar fat_cnt = (fat_base + 0x7F) >> 7;\n\t\tvar difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\twhile(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\tvar L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n\t\tcfb.FileIndex[0].size = mini_size << 6;\n\t\tL[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);\n\t\treturn L;\n\t})(cfb);\n\tvar o = new_buf(L[7] << 9);\n\tvar i = 0, T = 0;\n\t{\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(2, 0);\n\t\to.write_shift(2, 0x003E);\n\t\to.write_shift(2, 0x0003);\n\t\to.write_shift(2, 0xFFFE);\n\t\to.write_shift(2, 0x0009);\n\t\to.write_shift(2, 0x0006);\n\t\tfor(i = 0; i < 3; ++i) o.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, L[2]);\n\t\to.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, 1<<12);\n\t\to.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[3]);\n\t\to.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[1]);\n\t\tfor(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t}\n\tif(L[1]) {\n\t\tfor(T = 0; T < L[1]; ++T) {\n\t\t\tfor(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t\t\to.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n\t\t}\n\t}\n\tvar chainit = function(w) {\n\t\tfor(T += w; i<T-1; ++i) o.write_shift(-4, i+1);\n\t\tif(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }\n\t};\n\tT = i = 0;\n\tfor(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);\n\tfor(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);\n\tchainit(L[3]);\n\tchainit(L[4]);\n\tvar j = 0, flen = 0;\n\tvar file = cfb.FileIndex[0];\n\tfor(; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(flen < 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x01FF) >> 9);\n\t}\n\tchainit((L[6] + 7) >> 3);\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tT = i = 0;\n\tfor(j = 0; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(!flen || flen >= 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x3F) >> 6);\n\t}\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tfor(i = 0; i < L[4]<<2; ++i) {\n\t\tvar nm = cfb.FullPaths[i];\n\t\tif(!nm || nm.length === 0) {\n\t\t\tfor(j = 0; j < 17; ++j) o.write_shift(4, 0);\n\t\t\tfor(j = 0; j < 3; ++j) o.write_shift(4, -1);\n\t\t\tfor(j = 0; j < 12; ++j) o.write_shift(4, 0);\n\t\t\tcontinue;\n\t\t}\n\t\tfile = cfb.FileIndex[i];\n\t\tif(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n\t\tvar _nm = (i === 0 && _opts.root) || file.name;\n\t\tif(_nm.length > 32) {\n\t\t\tconsole.error(\"Name \" + _nm + \" will be truncated to \" + _nm.slice(0,32));\n\t\t\t_nm = _nm.slice(0, 32);\n\t\t}\n\t\tflen = 2*(_nm.length+1);\n\t\to.write_shift(64, _nm, \"utf16le\");\n\t\to.write_shift(2, flen);\n\t\to.write_shift(1, file.type);\n\t\to.write_shift(1, file.color);\n\t\to.write_shift(-4, file.L);\n\t\to.write_shift(-4, file.R);\n\t\to.write_shift(-4, file.C);\n\t\tif(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);\n\t\telse o.write_shift(16, file.clsid, \"hex\");\n\t\to.write_shift(4, file.state || 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, file.start);\n\t\to.write_shift(4, file.size); o.write_shift(4, 0);\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size >= 0x1000) {\n\t\t\to.l = (file.start+1) << 9;\n\t\t\tif (has_buf && Buffer.isBuffer(file.content)) {\n\t\t\t\tfile.content.copy(o, o.l, 0, file.size);\n\t\t\t\t// o is a 0-filled Buffer so just set next offset\n\t\t\t\to.l += (file.size + 511) & -512;\n\t\t\t} else {\n\t\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\t\tfor(; j & 0x1FF; ++j) o.write_shift(1, 0);\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size > 0 && file.size < 0x1000) {\n\t\t\tif (has_buf && Buffer.isBuffer(file.content)) {\n\t\t\t\tfile.content.copy(o, o.l, 0, file.size);\n\t\t\t\t// o is a 0-filled Buffer so just set next offset\n\t\t\t\to.l += (file.size + 63) & -64;\n\t\t\t} else {\n\t\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\t\tfor(; j & 0x3F; ++j) o.write_shift(1, 0);\n\t\t\t}\n\t\t}\n\t}\n\tif (has_buf) {\n\t\to.l = o.length;\n\t} else {\n\t\t// When using Buffer, already 0-filled\n\t\twhile(o.l < o.length) o.write_shift(1, 0);\n\t}\n\treturn o;\n}\n/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\nfunction find(cfb, path) {\n\tvar UCFullPaths = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });\n\tvar UCPaths = UCFullPaths.map(function(x) { var y = x.split(\"/\"); return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)]; });\n\tvar k = false;\n\tif(path.charCodeAt(0) === 47 /* \"/\" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }\n\telse k = path.indexOf(\"/\") !== -1;\n\tvar UCPath = path.toUpperCase();\n\tvar w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n\tif(w !== -1) return cfb.FileIndex[w];\n\n\tvar m = !UCPath.match(chr1);\n\tUCPath = UCPath.replace(chr0,'');\n\tif(m) UCPath = UCPath.replace(chr1,'!');\n\tfor(w = 0; w < UCFullPaths.length; ++w) {\n\t\tif((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t\tif((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t}\n\treturn null;\n}\n/** CFB Constants */\nvar MSSZ = 64; /* Mini Sector Size = 1<<6 */\n//var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n/* 2.1 Compound File Sector Numbers and Types */\nvar ENDOFCHAIN = -2;\n/* 2.2 Compound File Header */\nvar HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\nvar HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\nvar HEADER_CLSID = '00000000000000000000000000000000';\nvar consts = {\n\t/* 2.1 Compund File Sector Numbers and Types */\n\tMAXREGSECT: -6,\n\tDIFSECT: -4,\n\tFATSECT: -3,\n\tENDOFCHAIN: ENDOFCHAIN,\n\tFREESECT: -1,\n\t/* 2.2 Compound File Header */\n\tHEADER_SIGNATURE: HEADER_SIGNATURE,\n\tHEADER_MINOR_VERSION: '3e00',\n\tMAXREGSID: -6,\n\tNOSTREAM: -1,\n\tHEADER_CLSID: HEADER_CLSID,\n\t/* 2.6.1 Compound File Directory Entry */\n\tEntryTypes: ['unknown','storage','stream','lockbytes','property','root']\n};\n\nfunction write_file(cfb, filename, options) {\n\tget_fs();\n\tvar o = _write(cfb, options);\nfs.writeFileSync(filename, o);\n}\n\nfunction a2s(o) {\n\tvar out = new Array(o.length);\n\tfor(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);\n\treturn out.join(\"\");\n}\n\nfunction write(cfb, options) {\n\tvar o = _write(cfb, options);\n\tswitch(options && options.type || \"buffer\") {\n\t\tcase \"file\": get_fs(); fs.writeFileSync(options.filename, (o)); return o;\n\t\tcase \"binary\": return typeof o == \"string\" ? o : a2s(o);\n\t\tcase \"base64\": return Base64_encode(typeof o == \"string\" ? o : a2s(o));\n\t\tcase \"buffer\": if(has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n\t\t\t/* falls through */\n\t\tcase \"array\": return typeof o == \"string\" ? s2a(o) : o;\n\t}\n\treturn o;\n}\n/* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\nvar _zlib;\nfunction use_zlib(zlib) { try {\n\tvar InflateRaw = zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tInflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n\tif(InflRaw.bytesRead) _zlib = zlib;\n\telse throw new Error(\"zlib does not expose bytesRead\");\n} catch(e) {console.error(\"cannot use native zlib: \" + (e.message || e)); } }\n\nfunction _inflateRawSync(payload, usz) {\n\tif(!_zlib) return _inflate(payload, usz);\n\tvar InflateRaw = _zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tvar out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n\tpayload.l += InflRaw.bytesRead;\n\treturn out;\n}\n\nfunction _deflateRawSync(payload) {\n\treturn _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n}\nvar CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n/*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\nvar LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];\n\n/*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\nvar DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\nfunction bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }\n\nvar use_typed_arrays = typeof Uint8Array !== 'undefined';\n\nvar bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];\nfor(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);\n\nfunction bit_swap_n(n, b) {\n\tvar rev = bitswap8[n & 0xFF];\n\tif(b <= 8) return rev >>> (8-b);\n\trev = (rev << 8) | bitswap8[(n>>8)&0xFF];\n\tif(b <= 16) return rev >>> (16-b);\n\trev = (rev << 8) | bitswap8[(n>>16)&0xFF];\n\treturn rev >>> (24-b);\n}\n\n/* helpers for unaligned bit reads */\nfunction read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }\nfunction read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }\nfunction read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }\nfunction read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }\nfunction read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }\n\n/* works up to n = 3 * 8 + 1 = 25 */\nfunction read_bits_n(buf, bl, n) {\n\tvar w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);\n\tvar v = buf[h] >>> w;\n\tif(n < 8 - w) return v & f;\n\tv |= buf[h+1]<<(8-w);\n\tif(n < 16 - w) return v & f;\n\tv |= buf[h+2]<<(16-w);\n\tif(n < 24 - w) return v & f;\n\tv |= buf[h+3]<<(24-w);\n\treturn v & f;\n}\n\n/* helpers for unaligned bit writes */\nfunction write_bits_3(buf, bl, v) { var w = bl & 7, h = bl >>> 3;\n\tif(w <= 5) buf[h] |= (v & 7) << w;\n\telse {\n\t\tbuf[h] |= (v << w) & 0xFF;\n\t\tbuf[h+1] = (v&7) >> (8-w);\n\t}\n\treturn bl + 3;\n}\n\nfunction write_bits_1(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv = (v&1) << w;\n\tbuf[h] |= v;\n\treturn bl + 1;\n}\nfunction write_bits_8(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv <<= w;\n\tbuf[h] |=  v & 0xFF; v >>>= 8;\n\tbuf[h+1] = v;\n\treturn bl + 8;\n}\nfunction write_bits_16(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv <<= w;\n\tbuf[h] |=  v & 0xFF; v >>>= 8;\n\tbuf[h+1] = v & 0xFF;\n\tbuf[h+2] = v >>> 8;\n\treturn bl + 16;\n}\n\n/* until ArrayBuffer#realloc is a thing, fake a realloc */\nfunction realloc(b, sz) {\n\tvar L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;\n\tif(L >= sz) return b;\n\tif(has_buf) {\n\t\tvar o = new_unsafe_buf(M);\n\t\t// $FlowIgnore\n\t\tif(b.copy) b.copy(o);\n\t\telse for(; i < b.length; ++i) o[i] = b[i];\n\t\treturn o;\n\t} else if(use_typed_arrays) {\n\t\tvar a = new Uint8Array(M);\n\t\tif(a.set) a.set(b);\n\t\telse for(; i < L; ++i) a[i] = b[i];\n\t\treturn a;\n\t}\n\tb.length = M;\n\treturn b;\n}\n\n/* zero-filled arrays for older browsers */\nfunction zero_fill_array(n) {\n\tvar o = new Array(n);\n\tfor(var i = 0; i < n; ++i) o[i] = 0;\n\treturn o;\n}\n\n/* build tree (used for literals and lengths) */\nfunction build_tree(clens, cmap, MAX) {\n\tvar maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;\n\n\tvar bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\tfor(i = 0; i < 32; ++i) bl_count[i] = 0;\n\n\tfor(i = L; i < MAX; ++i) clens[i] = 0;\n\tL = clens.length;\n\n\tvar ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n\t/* build code tree */\n\tfor(i = 0; i < L; ++i) {\n\t\tbl_count[(w = clens[i])]++;\n\t\tif(maxlen < w) maxlen = w;\n\t\tctree[i] = 0;\n\t}\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);\n\tfor(i = 0; i < L; ++i) {\n\t\tccode = clens[i];\n\t\tif(ccode != 0) ctree[i] = bl_count[ccode+16]++;\n\t}\n\n\t/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);\n\t\t\tfor(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)\n\t\t\t\tcmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);\n\t\t}\n\t}\n\treturn maxlen;\n}\n\n/* Fixed Huffman */\nvar fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\nvar fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);\nif(!use_typed_arrays) {\n\tfor(var i = 0; i < 512; ++i) fix_lmap[i] = 0;\n\tfor(i = 0; i < 32; ++i) fix_dmap[i] = 0;\n}\n(function() {\n\tvar dlens = [];\n\tvar i = 0;\n\tfor(;i<32; i++) dlens.push(5);\n\tbuild_tree(dlens, fix_dmap, 32);\n\n\tvar clens = [];\n\ti = 0;\n\tfor(; i<=143; i++) clens.push(8);\n\tfor(; i<=255; i++) clens.push(9);\n\tfor(; i<=279; i++) clens.push(7);\n\tfor(; i<=287; i++) clens.push(8);\n\tbuild_tree(clens, fix_lmap, 288);\n})();var _deflateRaw = (function _deflateRawIIFE() {\n\tvar DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n\tvar j = 0, k = 0;\n\tfor(; j < DST_LN.length - 1; ++j) {\n\t\tfor(; k < DST_LN[j+1]; ++k) DST_LN_RE[k] = j;\n\t}\n\tfor(;k < 32768; ++k) DST_LN_RE[k] = 29;\n\n\tvar LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];\n\tfor(j = 0, k = 0; j < LEN_LN.length - 1; ++j) {\n\t\tfor(; k < LEN_LN[j+1]; ++k) LEN_LN_RE[k] = j;\n\t}\n\n\tfunction write_stored(data, out) {\n\t\tvar boff = 0;\n\t\twhile(boff < data.length) {\n\t\t\tvar L = Math.min(0xFFFF, data.length - boff);\n\t\t\tvar h = boff + L == data.length;\n\t\t\tout.write_shift(1, +h);\n\t\t\tout.write_shift(2, L);\n\t\t\tout.write_shift(2, (~L) & 0xFFFF);\n\t\t\twhile(L-- > 0) out[out.l++] = data[boff++];\n\t\t}\n\t\treturn out.l;\n\t}\n\n\t/* Fixed Huffman */\n\tfunction write_huff_fixed(data, out) {\n\t\tvar bl = 0;\n\t\tvar boff = 0;\n\t\tvar addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n\t\twhile(boff < data.length) {\n\t\t\tvar L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);\n\n\t\t\t/* write a stored block for short data */\n\t\t\tif(L < 10) {\n\t\t\t\tbl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n\t\t\t\tif(bl & 7) bl += 8 - (bl & 7);\n\t\t\t\tout.l = (bl / 8) | 0;\n\t\t\t\tout.write_shift(2, L);\n\t\t\t\tout.write_shift(2, (~L) & 0xFFFF);\n\t\t\t\twhile(L-- > 0) out[out.l++] = data[boff++];\n\t\t\t\tbl = out.l * 8;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n\t\t\tvar hash = 0;\n\t\t\twhile(L-- > 0) {\n\t\t\t\tvar d = data[boff];\n\t\t\t\thash = ((hash << 5) ^ d) & 0x7FFF;\n\n\t\t\t\tvar match = -1, mlen = 0;\n\n\t\t\t\tif((match = addrs[hash])) {\n\t\t\t\t\tmatch |= boff & ~0x7FFF;\n\t\t\t\t\tif(match > boff) match -= 0x8000;\n\t\t\t\t\tif(match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;\n\t\t\t\t}\n\n\t\t\t\tif(mlen > 2) {\n\t\t\t\t\t/* Copy Token  */\n\t\t\t\t\td = LEN_LN_RE[mlen];\n\t\t\t\t\tif(d <= 22) bl = write_bits_8(out, bl, bitswap8[d+1]>>1) - 1;\n\t\t\t\t\telse {\n\t\t\t\t\t\twrite_bits_8(out, bl, 3);\n\t\t\t\t\t\tbl += 5;\n\t\t\t\t\t\twrite_bits_8(out, bl, bitswap8[d-23]>>5);\n\t\t\t\t\t\tbl += 3;\n\t\t\t\t\t}\n\t\t\t\t\tvar len_eb = (d < 8) ? 0 : ((d - 4)>>2);\n\t\t\t\t\tif(len_eb > 0) {\n\t\t\t\t\t\twrite_bits_16(out, bl, mlen - LEN_LN[d]);\n\t\t\t\t\t\tbl += len_eb;\n\t\t\t\t\t}\n\n\t\t\t\t\td = DST_LN_RE[boff - match];\n\t\t\t\t\tbl = write_bits_8(out, bl, bitswap8[d]>>3);\n\t\t\t\t\tbl -= 3;\n\n\t\t\t\t\tvar dst_eb = d < 4 ? 0 : (d-2)>>1;\n\t\t\t\t\tif(dst_eb > 0) {\n\t\t\t\t\t\twrite_bits_16(out, bl, boff - match - DST_LN[d]);\n\t\t\t\t\t\tbl += dst_eb;\n\t\t\t\t\t}\n\t\t\t\t\tfor(var q = 0; q < mlen; ++q) {\n\t\t\t\t\t\taddrs[hash] = boff & 0x7FFF;\n\t\t\t\t\t\thash = ((hash << 5) ^ data[boff]) & 0x7FFF;\n\t\t\t\t\t\t++boff;\n\t\t\t\t\t}\n\t\t\t\t\tL-= mlen - 1;\n\t\t\t\t} else {\n\t\t\t\t\t/* Literal Token */\n\t\t\t\t\tif(d <= 143) d = d + 48;\n\t\t\t\t\telse bl = write_bits_1(out, bl, 1);\n\t\t\t\t\tbl = write_bits_8(out, bl, bitswap8[d]);\n\t\t\t\t\taddrs[hash] = boff & 0x7FFF;\n\t\t\t\t\t++boff;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbl = write_bits_8(out, bl, 0) - 1;\n\t\t}\n\t\tout.l = ((bl + 7)/8)|0;\n\t\treturn out.l;\n\t}\n\treturn function _deflateRaw(data, out) {\n\t\tif(data.length < 8) return write_stored(data, out);\n\t\treturn write_huff_fixed(data, out);\n\t};\n})();\n\nfunction _deflate(data) {\n\tvar buf = new_buf(50+Math.floor(data.length*1.1));\n\tvar off = _deflateRaw(data, buf);\n\treturn buf.slice(0, off);\n}\n/* modified inflate function also moves original read head */\n\nvar dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);\nvar dyn_len_1 = 1, dyn_len_2 = 1;\n\n/* 5.5.3 Expanding Huffman Codes */\nfunction dyn(data, boff) {\n\t/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n\tvar _HLIT = read_bits_5(data, boff) + 257; boff += 5;\n\tvar _HDIST = read_bits_5(data, boff) + 1; boff += 5;\n\tvar _HCLEN = read_bits_4(data, boff) + 4; boff += 4;\n\tvar w = 0;\n\n\t/* grab and store code lengths */\n\tvar clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n\tvar ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n\tvar maxlen = 1;\n\tvar bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar L = clens.length; /* 19 */\n\tfor(var i = 0; i < _HCLEN; ++i) {\n\t\tclens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n\t\tif(maxlen < w) maxlen = w;\n\t\tbl_count[w]++;\n\t\tboff += 3;\n\t}\n\n\t/* build code tree */\n\tvar ccode = 0;\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;\n\tfor(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n\t/* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bitswap8[ctree[i]]>>(8-cleni);\n\t\t\tfor(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);\n\t\t}\n\t}\n\n\t/* read literal and dist codes at once */\n\tvar hcodes = [];\n\tmaxlen = 1;\n\tfor(; hcodes.length < _HLIT + _HDIST;) {\n\t\tccode = dyn_cmap[read_bits_7(data, boff)];\n\t\tboff += ccode & 7;\n\t\tswitch((ccode >>>= 3)) {\n\t\t\tcase 16:\n\t\t\t\tw = 3 + read_bits_2(data, boff); boff += 2;\n\t\t\t\tccode = hcodes[hcodes.length - 1];\n\t\t\t\twhile(w-- > 0) hcodes.push(ccode);\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tw = 3 + read_bits_3(data, boff); boff += 3;\n\t\t\t\twhile(w-- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\tw = 11 + read_bits_7(data, boff); boff += 7;\n\t\t\t\twhile(w -- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\thcodes.push(ccode);\n\t\t\t\tif(maxlen < ccode) maxlen = ccode;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* build literal / length trees */\n\tvar h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);\n\tfor(i = _HLIT; i < 286; ++i) h1[i] = 0;\n\tfor(i = _HDIST; i < 30; ++i) h2[i] = 0;\n\tdyn_len_1 = build_tree(h1, dyn_lmap, 286);\n\tdyn_len_2 = build_tree(h2, dyn_dmap, 30);\n\treturn boff;\n}\n\n/* return [ data, bytesRead ] */\nfunction inflate(data, usz) {\n\t/* shortcircuit for empty buffer [0x03, 0x00] */\n\tif(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }\n\n\t/* bit offset */\n\tvar boff = 0;\n\n\t/* header includes final bit and type bits */\n\tvar header = 0;\n\n\tvar outbuf = new_unsafe_buf(usz ? usz : (1<<18));\n\tvar woff = 0;\n\tvar OL = outbuf.length>>>0;\n\tvar max_len_1 = 0, max_len_2 = 0;\n\n\twhile((header&1) == 0) {\n\t\theader = read_bits_3(data, boff); boff += 3;\n\t\tif((header >>> 1) == 0) {\n\t\t\t/* Stored block */\n\t\t\tif(boff & 7) boff += 8 - (boff&7);\n\t\t\t/* 2 bytes sz, 2 bytes bit inverse */\n\t\t\tvar sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;\n\t\t\tboff += 32;\n\t\t\t/* push sz bytes */\n\t\t\tif(sz > 0) {\n\t\t\t\tif(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }\n\t\t\t\twhile(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }\n\t\t\t}\n\t\t\tcontinue;\n\t\t} else if((header >> 1) == 1) {\n\t\t\t/* Fixed Huffman */\n\t\t\tmax_len_1 = 9; max_len_2 = 5;\n\t\t} else {\n\t\t\t/* Dynamic Huffman */\n\t\t\tboff = dyn(data, boff);\n\t\t\tmax_len_1 = dyn_len_1; max_len_2 = dyn_len_2;\n\t\t}\n\t\tfor(;;) { // while(true) is apparently out of vogue in modern JS circles\n\t\t\tif(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }\n\t\t\t/* ingest code and move read head */\n\t\t\tvar bits = read_bits_n(data, boff, max_len_1);\n\t\t\tvar code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n\t\t\tif(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;\n\t\t\telse if(code == 256) break;\n\t\t\telse {\n\t\t\t\tcode -= 257;\n\t\t\t\tvar len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;\n\t\t\t\tvar tgt = woff + LEN_LN[code];\n\t\t\t\t/* length extra bits */\n\t\t\t\tif(len_eb > 0) {\n\t\t\t\t\ttgt += read_bits_n(data, boff, len_eb);\n\t\t\t\t\tboff += len_eb;\n\t\t\t\t}\n\n\t\t\t\t/* dist code */\n\t\t\t\tbits = read_bits_n(data, boff, max_len_2);\n\t\t\t\tcode = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n\t\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t\tvar dst_eb = (code < 4 ? 0 : (code-2)>>1);\n\t\t\t\tvar dst = DST_LN[code];\n\t\t\t\t/* dist extra bits */\n\t\t\t\tif(dst_eb > 0) {\n\t\t\t\t\tdst += read_bits_n(data, boff, dst_eb);\n\t\t\t\t\tboff += dst_eb;\n\t\t\t\t}\n\n\t\t\t\t/* in the common case, manual byte copy is faster than TA set / Buffer copy */\n\t\t\t\tif(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt + 100); OL = outbuf.length; }\n\t\t\t\twhile(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }\n\t\t\t}\n\t\t}\n\t}\n\tif(usz) return [outbuf, (boff+7)>>>3];\n\treturn [outbuf.slice(0, woff), (boff+7)>>>3];\n}\n\nfunction _inflate(payload, usz) {\n\tvar data = payload.slice(payload.l||0);\n\tvar out = inflate(data, usz);\n\tpayload.l += out[1];\n\treturn out[0];\n}\n\nfunction warn_or_throw(wrn, msg) {\n\tif(wrn) { if(typeof console !== 'undefined') console.error(msg); }\n\telse throw new Error(msg);\n}\n\nfunction parse_zip(file, options) {\n\tvar blob = file;\n\tprep_blob(blob, 0);\n\n\tvar FileIndex = [], FullPaths = [];\n\tvar o = {\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths\n\t};\n\tinit_cfb(o, { root: options.root });\n\n\t/* find end of central directory, start just after signature */\n\tvar i = blob.length - 4;\n\twhile((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;\n\tblob.l = i + 4;\n\n\t/* parse end of central directory */\n\tblob.l += 4;\n\tvar fcnt = blob.read_shift(2);\n\tblob.l += 6;\n\tvar start_cd = blob.read_shift(4);\n\n\t/* parse central directory */\n\tblob.l = start_cd;\n\n\tfor(i = 0; i < fcnt; ++i) {\n\t\t/* trust local file header instead of CD entry */\n\t\tblob.l += 20;\n\t\tvar csz = blob.read_shift(4);\n\t\tvar usz = blob.read_shift(4);\n\t\tvar namelen = blob.read_shift(2);\n\t\tvar efsz = blob.read_shift(2);\n\t\tvar fcsz = blob.read_shift(2);\n\t\tblob.l += 8;\n\t\tvar offset = blob.read_shift(4);\n\t\tvar EF = parse_extra_field(blob.slice(blob.l+namelen, blob.l+namelen+efsz));\n\t\tblob.l += namelen + efsz + fcsz;\n\n\t\tvar L = blob.l;\n\t\tblob.l = offset + 4;\n\t\tparse_local_file(blob, csz, usz, o, EF);\n\t\tblob.l = L;\n\t}\n\n\treturn o;\n}\n\n\n/* head starts just after local file header signature */\nfunction parse_local_file(blob, csz, usz, o, EF) {\n\t/* [local file header] */\n\tblob.l += 2;\n\tvar flags = blob.read_shift(2);\n\tvar meth = blob.read_shift(2);\n\tvar date = parse_dos_date(blob);\n\n\tif(flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n\tvar crc32 = blob.read_shift(4);\n\tvar _csz = blob.read_shift(4);\n\tvar _usz = blob.read_shift(4);\n\n\tvar namelen = blob.read_shift(2);\n\tvar efsz = blob.read_shift(2);\n\n\t// TODO: flags & (1<<11) // UTF8\n\tvar name = \"\"; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);\n\tif(efsz) {\n\t\tvar ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));\n\t\tif((ef[0x5455]||{}).mt) date = ef[0x5455].mt;\n\t\tif(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;\n\t}\n\tblob.l += efsz;\n\n\t/* [encryption header] */\n\n\t/* [file data] */\n\tvar data = blob.slice(blob.l, blob.l + _csz);\n\tswitch(meth) {\n\t\tcase 8: data = _inflateRawSync(blob, _usz); break;\n\t\tcase 0: break; // TODO: scan for magic number\n\t\tdefault: throw new Error(\"Unsupported ZIP Compression method \" + meth);\n\t}\n\n\t/* [data descriptor] */\n\tvar wrn = false;\n\tif(flags & 8) {\n\t\tcrc32 = blob.read_shift(4);\n\t\tif(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }\n\t\t_csz = blob.read_shift(4);\n\t\t_usz = blob.read_shift(4);\n\t}\n\n\tif(_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n\tif(_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n\tvar _crc32 = CRC32.buf(data, 0);\n\tif((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n\tcfb_add(o, name, data, {unsafe: true, mt: date});\n}\nfunction write_zip(cfb, options) {\n\tvar _opts = options || {};\n\tvar out = [], cdirs = [];\n\tvar o = new_buf(1);\n\tvar method = (_opts.compression ? 8 : 0), flags = 0;\n\tvar desc = false;\n\tif(desc) flags |= 8;\n\tvar i = 0, j = 0;\n\n\tvar start_cd = 0, fcnt = 0;\n\tvar root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n\tvar crcs = [];\n\tvar sz_cd = 0;\n\n\tfor(i = 1; i < cfb.FullPaths.length; ++i) {\n\t\tfp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];\n\t\tif(!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\t\tvar start = start_cd;\n\n\t\t/* TODO: CP437 filename */\n\t\tvar namebuf = new_buf(fp.length);\n\t\tfor(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n\t\tnamebuf = namebuf.slice(0, namebuf.l);\n\t\tcrcs[fcnt] = CRC32.buf(fi.content, 0);\n\n\t\tvar outbuf = fi.content;\n\t\tif(method == 8) outbuf = _deflateRawSync(outbuf);\n\n\t\t/* local file header */\n\t\to = new_buf(30);\n\t\to.write_shift(4, 0x04034b50);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\t/* TODO: last mod file time/date */\n\t\tif(fi.mt) write_dos_date(o, fi.mt);\n\t\telse o.write_shift(4, 0);\n\t\to.write_shift(-4, (flags & 8) ? 0 : crcs[fcnt]);\n\t\to.write_shift(4,  (flags & 8) ? 0 : outbuf.length);\n\t\to.write_shift(4,  (flags & 8) ? 0 : fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\n\t\tstart_cd += o.length;\n\t\tout.push(o);\n\t\tstart_cd += namebuf.length;\n\t\tout.push(namebuf);\n\n\t\t/* TODO: extra fields? */\n\n\t\t/* TODO: encryption header ? */\n\n\t\tstart_cd += outbuf.length;\n\t\tout.push(outbuf);\n\n\t\t/* data descriptor */\n\t\tif(flags & 8) {\n\t\t\to = new_buf(12);\n\t\t\to.write_shift(-4, crcs[fcnt]);\n\t\t\to.write_shift(4, outbuf.length);\n\t\t\to.write_shift(4, fi.content.length);\n\t\t\tstart_cd += o.l;\n\t\t\tout.push(o);\n\t\t}\n\n\t\t/* central directory */\n\t\to = new_buf(46);\n\t\to.write_shift(4, 0x02014b50);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\to.write_shift(4, 0); /* TODO: last mod file time/date */\n\t\to.write_shift(-4, crcs[fcnt]);\n\n\t\to.write_shift(4, outbuf.length);\n\t\to.write_shift(4, fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, start);\n\n\t\tsz_cd += o.l;\n\t\tcdirs.push(o);\n\t\tsz_cd += namebuf.length;\n\t\tcdirs.push(namebuf);\n\t\t++fcnt;\n\t}\n\n\t/* end of central directory */\n\to = new_buf(22);\n\to.write_shift(4, 0x06054b50);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, fcnt);\n\to.write_shift(2, fcnt);\n\to.write_shift(4, sz_cd);\n\to.write_shift(4, start_cd);\n\to.write_shift(2, 0);\n\n\treturn bconcat(([bconcat((out)), bconcat(cdirs), o]));\n}\nvar ContentTypeMap = ({\n\t\"htm\": \"text/html\",\n\t\"xml\": \"text/xml\",\n\n\t\"gif\": \"image/gif\",\n\t\"jpg\": \"image/jpeg\",\n\t\"png\": \"image/png\",\n\n\t\"mso\": \"application/x-mso\",\n\t\"thmx\": \"application/vnd.ms-officetheme\",\n\t\"sh33tj5\": \"application/octet-stream\"\n});\n\nfunction get_content_type(fi, fp) {\n\tif(fi.ctype) return fi.ctype;\n\n\tvar ext = fi.name || \"\", m = ext.match(/\\.([^\\.]+)$/);\n\tif(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\n\tif(fp) {\n\t\tm = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n\t\tif(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\t}\n\n\treturn \"application/octet-stream\";\n}\n\n/* 76 character chunks TODO: intertwine encoding */\nfunction write_base64_76(bstr) {\n\tvar data = Base64_encode(bstr);\n\tvar o = [];\n\tfor(var i = 0; i < data.length; i+= 76) o.push(data.slice(i, i+76));\n\treturn o.join(\"\\r\\n\") + \"\\r\\n\";\n}\n\n/*\nRules for QP:\n\t- escape =## applies for all non-display characters and literal \"=\"\n\t- space or tab at end of line must be encoded\n\t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n\t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n\nTODO: Some files from word appear to write line extensions with bare equals:\n\n```\n<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n=\"70%\"\n```\n*/\nfunction write_quoted_printable(text) {\n\tvar encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function(c) {\n\t\tvar w = c.charCodeAt(0).toString(16).toUpperCase();\n\t\treturn \"=\" + (w.length == 1 ? \"0\" + w : w);\n\t});\n\n\tencoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n\n\tif(encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n\tencoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n\n\tvar o = [], split = encoded.split(\"\\r\\n\");\n\tfor(var si = 0; si < split.length; ++si) {\n\t\tvar str = split[si];\n\t\tif(str.length == 0) { o.push(\"\"); continue; }\n\t\tfor(var i = 0; i < str.length;) {\n\t\t\tvar end = 76;\n\t\t\tvar tmp = str.slice(i, i + end);\n\t\t\tif(tmp.charAt(end - 1) == \"=\") end --;\n\t\t\telse if(tmp.charAt(end - 2) == \"=\") end -= 2;\n\t\t\telse if(tmp.charAt(end - 3) == \"=\") end -= 3;\n\t\t\ttmp = str.slice(i, i + end);\n\t\t\ti += end;\n\t\t\tif(i < str.length) tmp += \"=\";\n\t\t\to.push(tmp);\n\t\t}\n\t}\n\n\treturn o.join(\"\\r\\n\");\n}\nfunction parse_quoted_printable(data) {\n\tvar o = [];\n\n\t/* unify long lines */\n\tfor(var di = 0; di < data.length; ++di) {\n\t\tvar line = data[di];\n\t\twhile(di <= data.length && line.charAt(line.length - 1) == \"=\") line = line.slice(0, line.length - 1) + data[++di];\n\t\to.push(line);\n\t}\n\n\t/* decode */\n\tfor(var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) { return String.fromCharCode(parseInt($$.slice(1), 16)); });\n\treturn s2a(o.join(\"\\r\\n\"));\n}\n\n\nfunction parse_mime(cfb, data, root) {\n\tvar fname = \"\", cte = \"\", ctype = \"\", fdata;\n\tvar di = 0;\n\tfor(;di < 10; ++di) {\n\t\tvar line = data[di];\n\t\tif(!line || line.match(/^\\s*$/)) break;\n\t\tvar m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n\t\tif(m) switch(m[1].toLowerCase()) {\n\t\t\tcase \"content-location\": fname = m[2].trim(); break;\n\t\t\tcase \"content-type\": ctype = m[2].trim(); break;\n\t\t\tcase \"content-transfer-encoding\": cte = m[2].trim(); break;\n\t\t}\n\t}\n\t++di;\n\tswitch(cte.toLowerCase()) {\n\t\tcase 'base64': fdata = s2a(Base64_decode(data.slice(di).join(\"\"))); break;\n\t\tcase 'quoted-printable': fdata = parse_quoted_printable(data.slice(di)); break;\n\t\tdefault: throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n\t}\n\tvar file = cfb_add(cfb, fname.slice(root.length), fdata, {unsafe: true});\n\tif(ctype) file.ctype = ctype;\n}\n\nfunction parse_mad(file, options) {\n\tif(a2s(file.slice(0,13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n\tvar root = (options && options.root || \"\");\n\t// $FlowIgnore\n\tvar data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n\tvar di = 0, row = \"\";\n\n\t/* if root is not specified, scan for the common prefix */\n\tfor(di = 0; di < data.length; ++di) {\n\t\trow = data[di];\n\t\tif(!/^Content-Location:/i.test(row)) continue;\n\t\trow = row.slice(row.indexOf(\"file\"));\n\t\tif(!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n\t\tif(row.slice(0, root.length) == root) continue;\n\t\twhile(root.length > 0) {\n\t\t\troot = root.slice(0, root.length - 1);\n\t\t\troot = root.slice(0, root.lastIndexOf(\"/\") + 1);\n\t\t\tif(row.slice(0,root.length) == root) break;\n\t\t}\n\t}\n\n\tvar mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n\tif(!mboundary) throw new Error(\"MAD cannot find boundary\");\n\tvar boundary = \"--\" + (mboundary[1] || \"\");\n\n\tvar FileIndex = [], FullPaths = [];\n\tvar o = {\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths\n\t};\n\tinit_cfb(o);\n\tvar start_di, fcnt = 0;\n\tfor(di = 0; di < data.length; ++di) {\n\t\tvar line = data[di];\n\t\tif(line !== boundary && line !== boundary + \"--\") continue;\n\t\tif(fcnt++) parse_mime(o, data.slice(start_di, di), root);\n\t\tstart_di = di;\n\t}\n\treturn o;\n}\n\nfunction write_mad(cfb, options) {\n\tvar opts = options || {};\n\tvar boundary = opts.boundary || \"SheetJS\";\n\tboundary = '------=' + boundary;\n\n\tvar out = [\n\t\t'MIME-Version: 1.0',\n\t\t'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"',\n\t\t'',\n\t\t'',\n\t\t''\n\t];\n\n\tvar root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n\tfor(var i = 1; i < cfb.FullPaths.length; ++i) {\n\t\tfp = cfb.FullPaths[i].slice(root.length);\n\t\tfi = cfb.FileIndex[i];\n\t\tif(!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\n\t\t/* Normalize filename */\n\t\tfp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function(c) {\n\t\t\treturn \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n\t\t}).replace(/[\\u0080-\\uFFFF]/g, function(u) {\n\t\t\treturn \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n\t\t});\n\n\t\t/* Extract content as binary string */\n\t\tvar ca = fi.content;\n\t\t// $FlowIgnore\n\t\tvar cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n\n\t\t/* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */\n\t\tvar dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;\n\t\tfor(var csl = 0; csl <= L; ++csl) if((cc=cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n\t\tvar qp = dispcnt >= L * 4 / 5;\n\n\t\tout.push(boundary);\n\t\tout.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);\n\t\tout.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));\n\t\tout.push('Content-Type: ' + get_content_type(fi, fp));\n\t\tout.push('');\n\n\t\tout.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n\t}\n\tout.push(boundary + '--\\r\\n');\n\treturn out.join(\"\\r\\n\");\n}\nfunction cfb_new(opts) {\n\tvar o = ({});\n\tinit_cfb(o, opts);\n\treturn o;\n}\n\nfunction cfb_add(cfb, name, content, opts) {\n\tvar unsafe = opts && opts.unsafe;\n\tif(!unsafe) init_cfb(cfb);\n\tvar file = !unsafe && CFB.find(cfb, name);\n\tif(!file) {\n\t\tvar fpath = cfb.FullPaths[0];\n\t\tif(name.slice(0, fpath.length) == fpath) fpath = name;\n\t\telse {\n\t\t\tif(fpath.slice(-1) != \"/\") fpath += \"/\";\n\t\t\tfpath = (fpath + name).replace(\"//\",\"/\");\n\t\t}\n\t\tfile = ({name: filename(name), type: 2});\n\t\tcfb.FileIndex.push(file);\n\t\tcfb.FullPaths.push(fpath);\n\t\tif(!unsafe) CFB.utils.cfb_gc(cfb);\n\t}\nfile.content = (content);\n\tfile.size = content ? content.length : 0;\n\tif(opts) {\n\t\tif(opts.CLSID) file.clsid = opts.CLSID;\n\t\tif(opts.mt) file.mt = opts.mt;\n\t\tif(opts.ct) file.ct = opts.ct;\n\t}\n\treturn file;\n}\n\nfunction cfb_del(cfb, name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex.splice(j, 1);\n\t\tcfb.FullPaths.splice(j, 1);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_mov(cfb, old_name, new_name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, old_name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex[j].name = filename(new_name);\n\t\tcfb.FullPaths[j] = new_name;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_gc(cfb) { rebuild_cfb(cfb, true); }\n\nexports.find = find;\nexports.read = read;\nexports.parse = parse;\nexports.write = write;\nexports.writeFile = write_file;\nexports.utils = {\n\tcfb_new: cfb_new,\n\tcfb_add: cfb_add,\n\tcfb_del: cfb_del,\n\tcfb_mov: cfb_mov,\n\tcfb_gc: cfb_gc,\n\tReadShift: ReadShift,\n\tCheckField: CheckField,\n\tprep_blob: prep_blob,\n\tbconcat: bconcat,\n\tuse_zlib: use_zlib,\n\t_deflateRaw: _deflate,\n\t_inflateRaw: _inflate,\n\tconsts: consts\n};\n\nreturn exports;\n})();\n\nif(typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}