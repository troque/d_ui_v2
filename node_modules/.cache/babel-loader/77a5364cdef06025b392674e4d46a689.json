{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\Transacciones\\\\EnviaraAlguienDeSecretariaComunAleatorio.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useLocation } from 'react-router-dom';\nimport Spinner from '../../Utils/Spinner';\nimport GenericApi from '../../Api/Services/GenericApi';\nimport { getUser } from '../../Utils/Common';\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EnviaraAlguienDeSecretariaComunAleatorio() {\n  _s();\n  const [getUsuarioSleccionado, setUsuarioSleccionado] = useState(\"\");\n  const [getListaUusariosDependencia, setListaUusariosDependencia] = useState({\n    data: {}\n  });\n  const [getUsuarioNombre, setUsuarioNombre] = useState(\"\");\n  const [getUsuarioApellido, setUsuarioApellido] = useState(\"\");\n  const [getUsuarioName, setUsuarioName] = useState(\"\");\n  const [getUsuarioDependenciaNombre, setUsuarioDependenciaNombre] = useState(\"\");\n  const [getUsuarioGruposTrabajo, setUsuarioGruposTrabajo] = useState([]);\n  const [countTextArea, setCountTextArea] = useState(0);\n  const [getMaximoTextArea, setMaximoTextArea] = useState(0);\n  const [getMinimoTextArea, setMinimoTextArea] = useState(0);\n  const [getModalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [getIdGrupoTrabajo, setIdGrupoTrabajo] = useState('');\n  const [respuestaGrupoTrabajo, setRespuestaGrupoTrabajo] = useState(false);\n  const [respuestaUsuariosGrupoTrabajo, setRespuestaUsuariosGrupoTrabajo] = useState(false);\n  const [listaGruposTrabajo, setListaGruposTrabajo] = useState({\n    data: {}\n  });\n  const [getNombreProceso, setNombreProceso] = useState('');\n  const [respuestaUsuarioAleatorio, setRespuestaUsuarioAleatorio] = useState(false);\n  const [getUsuarioAleatorio, setUsuarioAleatorio] = useState();\n  const [getExisteUsuarioValido, setExisteUsuarioValido] = useState(false);\n  const [getListaSemaforosActivosSecretaria, setListaSemaforosActivosSecretaria] = useState([]);\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n  let numeroLlamadosFinalizar = 0;\n  let numeroTotalLlamadosFinalizar = 1;\n\n  /**\r\n   * Funcion principal\r\n   */\n  useEffect(() => {\n    async function fetchData() {\n      window.showSpinner(true);\n      nombreProceso();\n    }\n    fetchData();\n  }, []);\n\n  // Funcion para validar y detener el spinner\n  const validacionSpinnerFinalizar = () => {\n    numeroLlamadosFinalizar++;\n    if (numeroLlamadosFinalizar >= numeroTotalLlamadosFinalizar) {\n      window.showSpinner(false);\n      const tituloModal = getNombreProceso + \" :: Enviar a alguien de secretaria común dirigidamente\";\n      const mensajeModal = 'El proceso con radicado: ' + from.radicado + ' fue asignado al usuario: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '';\n      setModalState({\n        title: tituloModal.toUpperCase(),\n        message: mensajeModal.toUpperCase(),\n        show: true,\n        redirect: '/MisPendientes',\n        alert: global.Constants.TIPO_ALERTA.EXITO\n      });\n    }\n  };\n  const nombreProceso = () => {\n    GenericApi.getByIdGeneric(\"nombre-proceso\", from.procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setNombreProceso(datos.data.attributes.nombre);\n        obtenerParametros();\n        cargarGruposDeTrabajo();\n        obtenerSemaforosProcesoDisciplinario();\n      }\n    });\n  };\n  const cargarGruposDeTrabajo = () => {\n    GenericApi.getGeneric(\"mas_grupo_trabajo\").then(datos => {\n      if (!datos.error) {\n        setRespuestaGrupoTrabajo(true);\n        setListaGruposTrabajo(datos);\n      }\n      window.showSpinner(false);\n    });\n  };\n  const obtenerSemaforosProcesoDisciplinario = () => {\n    GenericApi.getAllGeneric(\"semaforo/get-semaforo-proceso-disciplinario/\" + global.Constants.SEMAFORO_EVENTOS.EVENTO_SECRETARIA_COMUN + \"/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setListaSemaforosActivosSecretaria(datos);\n      }\n      window.showSpinner(false);\n    });\n  };\n  const selectGrupoTrabajo = () => {\n    if (listaGruposTrabajo.data.length >= 1) {\n      return listaGruposTrabajo.data.map((grupoTrabajo, i) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: grupoTrabajo.id,\n          children: grupoTrabajo.attributes.nombre\n        }, grupoTrabajo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this);\n      });\n    }\n  };\n\n  // Funcion que nos ayuda a ver si existen caracteres especiales en el textarea de -Informacion para su remisión-\n  function containsSpecialChars(str) {\n    const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\n      if (str.includes(specialChar)) {\n        return true;\n      }\n      return false;\n    });\n    return result;\n  }\n  const enviarDatos = valores => {\n    const iduserdependencia = getUser().id_dependencia;\n    window.showSpinner(true);\n    let data;\n    data = {\n      \"data\": {\n        \"type\": \"transacciones\",\n        \"attributes\": {\n          \"id_proceso_disciplinario\": procesoDisciplinarioId,\n          \"id_dependencia_origen\": iduserdependencia,\n          \"usuario_a_remitir\": getUsuarioAleatorio.nombre_funcionario,\n          \"descripcion_a_remitir\": valores.informacion,\n          \"id_etapa\": 3\n        }\n      }\n    };\n\n    //Finalizando semaforo        \n    GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(datosSemaforoFinaliza => {\n      if (datosSemaforoFinaliza.data.length >= 1) {\n        datosSemaforoFinaliza.data.forEach(element => {\n          if (getListaSemaforosActivosSecretaria.some(dato => dato.id == element.id) && element.attributes.id_mas_grupo_trabajo_inicia.id.toString() !== getIdGrupoTrabajo.toString()) {\n            let data = {\n              \"data\": {\n                \"type\": \"semaforo\",\n                \"attributes\": {\n                  \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\n                  \"id_semaforo\": element.id,\n                  \"id_actuacion_finaliza\": null,\n                  \"id_dependencia_finaliza\": null,\n                  \"id_usuario_finaliza\": getUsuarioAleatorio.id_funcionario\n                }\n              }\n            };\n            GenericApi.getByDataGeneric('set-finaliza-semaforo', data);\n          }\n        });\n      }\n    });\n    const tituloModal = getNombreProceso.toUpperCase() + \" :: Enviar a alguien de secretaria común aleatoriamente\";\n    const mensajeModal = 'El proceso con radicado: ' + from.radicado + ' fue asignado al usuario: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '';\n    GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', data).then(datos => {\n      if (!datos.error) {\n        validacionSpinnerFinalizar();\n        GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(datosSemaforo => {\n          numeroTotalLlamadosFinalizar++;\n          validacionSpinnerFinalizar();\n          if (!datosSemaforo.error) {\n            datosSemaforo.data.forEach((element, index) => {\n              if (element.attributes.id_mas_evento_inicio.id == 4) {\n                if (!getListaSemaforosActivosSecretaria.some(objeto => objeto.id.toString() === element.id.toString())) {\n                  if (element.attributes.id_mas_grupo_trabajo_inicia.id.toString() == getIdGrupoTrabajo.toString()) {\n                    let date = new Date();\n                    let datapdxsemaforo = {\n                      \"data\": {\n                        \"type\": \"pdxsemaforo\",\n                        \"attributes\": {\n                          \"id_semaforo\": element.id,\n                          \"id_proceso_disciplinario\": procesoDisciplinarioId,\n                          \"id_actuacion\": \"\",\n                          \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\n                          \"estado\": 1\n                        }\n                      }\n                    };\n                    numeroTotalLlamadosFinalizar++;\n                    GenericApi.getByDataGeneric('pdxsemaforo', datapdxsemaforo).then(datosSemaforo => {\n                      numeroTotalLlamadosFinalizar++;\n                      validacionSpinnerFinalizar();\n                    });\n                  }\n                }\n              }\n            });\n          } else {\n            setModalState({\n              title: tituloModal.toUpperCase(),\n              message: \"HA OCURRIDO UN ERROR CON LA SEMAFORIZACIÓN\",\n              show: true,\n              alert: global.Constants.TIPO_ALERTA.ERROR\n            });\n          }\n        });\n      } else {\n        setModalState({\n          title: tituloModal.toUpperCase(),\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/AntecedentesLista',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n\n    /*GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', data).then(\r\n        datos => {\r\n            if (!datos.error) {\r\n                GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(\r\n                    datosSemaforo => {\r\n                        if (!datosSemaforo.error) {\r\n                            datosSemaforo.data.forEach(element => {\r\n                                if (element.attributes.id_mas_evento_inicio.id == 4) {\r\n                                    if (element.attributes.id_mas_grupo_trabajo_inicia.id == getIdGrupoTrabajo) {\r\n                                        let date = new Date();\r\n                                        let datapdxsemaforo = {\r\n                                            \"data\": {\r\n                                                \"type\": \"pdxsemaforo\",\r\n                                                \"attributes\": {\r\n                                                    \"id_semaforo\": element.id,\r\n                                                    \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                                                    \"id_actuacion\": \"\",\r\n                                                    \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\r\n                                                    \"estado\": 1,\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        GenericApi.addGeneric('pdxsemaforo', datapdxsemaforo)\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            setModalState({ title: tituiloModal.toUpperCase(), message: \"HA OCURRIDO UN ERROR CON LA SEMAFORIZACIÓN\", show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                        }\r\n                    }\r\n                )\r\n                setModalState({ title: tituiloModal.toUpperCase(), message: mensajeModal.toUpperCase(), show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n            }\r\n            else {\r\n                setModalState({ title: tituiloModal.toUpperCase(), message: datos.error.toString(), show: true, redirect: '/AntecedentesLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n            }\r\n            window.showSpinner(false);\r\n        }\r\n    )*/\n  };\n\n  const handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    if (name == \"grupoTrabajo\") {\n      setIdGrupoTrabajo(value);\n      cargarUsuariosPorGrupo(value);\n      cargarUsuarioAleatorio(value);\n    }\n  };\n\n  // consultamos la cantidad maxima de caracteres para el textarea\n  const obtenerParametros = () => {\n    try {\n      const data = {\n        \"data\": {\n          \"type\": 'mas_parametro',\n          \"attributes\": {\n            \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\n          }\n        }\n      };\n      GenericApi.getByDataGeneric('parametro/parametro-nombre', data).then(datos => {\n        if (!datos.error) {\n          if (datos[\"data\"].length > 0) {\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]));\n          }\n        } else {\n          window.showModal(1);\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n  const cargarUsuariosPorGrupo = idGrupo => {\n    window.showSpinner(true);\n    const tituloModal = getNombreProceso + \" :: Enviar a alguien de mi dependencia\";\n    GenericApi.getAllGeneric(\"usuario/get-usuarios-grupotrabajo/\" + idGrupo + \"/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setRespuestaUsuariosGrupoTrabajo(true);\n        setListaUusariosDependencia(datos);\n        window.showSpinner(false);\n      } else {\n        setModalState({\n          title: tituloModal.toUpperCase(),\n          message: datos.error.toString(),\n          show: true,\n          redirect: '/Transacciones',\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const cargarUsuarioAleatorio = idGrupo => {\n    window.showSpinner(true);\n    const tituloModal = \"SINPROC No \" + from.radicado + \" :: Enviar a alguien de secretaria común\";\n    const mensajeModal = \"No existen usuarios que puedan atender este expediente\";\n    GenericApi.getAllGeneric(\"mas_grupo_trabajo/repartoAleatorio/\" + idGrupo + \"/\" + procesoDisciplinarioId).then(datos => {\n      if (datos != \"\") {\n        if (!datos.error) {\n          setRespuestaUsuarioAleatorio(true);\n          setUsuarioAleatorio(datos);\n          GenericApi.getGeneric('usuario/get-usuario-por-name/' + datos.nombre_funcionario).then(datos => {\n            if (!datos.error) {\n              setUsuarioNombre(datos.data[0].attributes.nombre);\n              setUsuarioApellido(datos.data[0].attributes.apellido);\n              setUsuarioName(datos.data[0].attributes.name);\n              setUsuarioDependenciaNombre(datos.data[0].attributes.dependencia.nombre);\n              setUsuarioGruposTrabajo(datos.data[0].attributes.grupo_trabajo_secretaria_comun.split(','));\n              setExisteUsuarioValido(true);\n            }\n          });\n        } else {\n          setModalState({\n            title: tituloModal.toUpperCase(),\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/Transacciones',\n            from: {\n              from\n            },\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n          setExisteUsuarioValido(false);\n        }\n      } else {\n        setUsuarioNombre(\"\");\n        setUsuarioApellido(\"\");\n        setUsuarioName(\"\");\n        setUsuarioDependenciaNombre(\"\");\n        setUsuarioGruposTrabajo([]);\n        setModalState({\n          title: tituloModal.toUpperCase(),\n          message: mensajeModal.toUpperCase(),\n          show: true,\n          from: {\n            from\n          },\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n        setExisteUsuarioValido(false);\n      }\n      window.showSpinner(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: getModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        informacion: '',\n        usuario: ''\n      },\n      enableReinitialize: true,\n      validate: valores => {\n        setCountTextArea(valores.informacion.length);\n        let errores = {};\n        if (!valores.informacion) {\n          errores.informacion = 'Debe ingresar un valor';\n        } else if (valores.informacion.length <= getMinimoTextArea) {\n          errores.informacion = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\n        }\n        if (valores.informacion) {\n          if (containsSpecialChars(valores.informacion)) errores.informacion = 'Tiene caracteres inválidos';\n        }\n        return errores;\n      },\n      onSubmit: (valores, _ref) => {\n        let {\n          resetForm\n        } = _ref;\n        enviarDatos(valores);\n      },\n      children: _ref2 => {\n        let {\n          errors\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w2d_block let\",\n            children: /*#__PURE__*/_jsxDEV(\"nav\", {\n              \"aria-label\": \"breadcrumb\",\n              children: /*#__PURE__*/_jsxDEV(\"ol\", {\n                className: \"breadcrumb breadcrumb-alt push\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: `/MisPendientes`,\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: \"Mis Pendientes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 138\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 406,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: `/RamasProceso/`,\n                    state: {\n                      from: from\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: \"Ramas del proceso\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 161\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 407,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: \"Enviar a alguien de secretaria com\\xFAn aleatoriamente\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 408,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block block-themed\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-header\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"block-title\",\n                children: [getNombreProceso.toUpperCase(), \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" :: ENVIAR A ALGUIEN DE SECRETARIA COM\\xDAN ALEATORIAMENTE\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 94\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: \"grupoTrabajo\",\n                      children: [\"SELECCIONE EL GRUPO DE TRABAJO \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: \"*\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 420,\n                        columnNumber: 106\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 420,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      value: getIdGrupoTrabajo,\n                      onChange: handleInputChange,\n                      as: \"select\",\n                      className: \"form-control\",\n                      id: \"grupoTrabajo\",\n                      name: \"grupoTrabajo\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"\",\n                        children: \"Por favor seleccione\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 422,\n                        columnNumber: 49\n                      }, this), respuestaGrupoTrabajo ? selectGrupoTrabajo() : null]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                      name: \"grupoTrabajo\",\n                      component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: errors.grupoTrabajo\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 425,\n                        columnNumber: 97\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 425,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 37\n                }, this), getExisteUsuarioValido ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"USUARIO A RECIBIR GESTION: \"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 49\n                    }, this), \" \", getUsuarioNombre != \"\" ? \" \" + getUsuarioNombre.toUpperCase() + \" \" + getUsuarioApellido.toUpperCase() + \" (\" + getUsuarioName.toUpperCase() + \") DE LA DEPENDENCIA \" + getUsuarioDependenciaNombre.toUpperCase() : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 430,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 41\n                }, this) : null, getExisteUsuarioValido ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: \"informacion\",\n                      children: [\"OBSERVACIONES \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: \"*\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 437,\n                        columnNumber: 92\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 437,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      as: \"textarea\",\n                      className: \"form-control\",\n                      id: \"informacion\",\n                      name: \"informacion\",\n                      rows: \"6\",\n                      placeholder: \"INFORMACI\\xD3N PARA SU REMISI\\xD3N...\",\n                      maxLength: getMaximoTextArea,\n                      minLength: getMinimoTextArea\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 438,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-right\",\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-primary\",\n                        children: [countTextArea, \" / \", getMaximoTextArea]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 441,\n                        columnNumber: 53\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 440,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                      name: \"informacion\",\n                      component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: errors.informacion\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 443,\n                        columnNumber: 100\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 443,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 435,\n                  columnNumber: 41\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [getExisteUsuarioValido ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: \"REMITIR\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 41\n                }, this) : null, /*#__PURE__*/_jsxDEV(Link, {\n                  to: '/Transacciones',\n                  state: {\n                    from: from\n                  },\n                  className: \"font-size-h5 font-w600\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: \"CANCELAR\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 452,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(EnviaraAlguienDeSecretariaComunAleatorio, \"ZUgFRwtim/sQFOscZD/Jgu8+92o=\", false, function () {\n  return [useLocation];\n});\n_c = EnviaraAlguienDeSecretariaComunAleatorio;\nexport default EnviaraAlguienDeSecretariaComunAleatorio;\nvar _c;\n$RefreshReg$(_c, \"EnviaraAlguienDeSecretariaComunAleatorio\");","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","useLocation","Spinner","GenericApi","getUser","ModalGen","Link","EnviaraAlguienDeSecretariaComunAleatorio","getUsuarioSleccionado","setUsuarioSleccionado","getListaUusariosDependencia","setListaUusariosDependencia","data","getUsuarioNombre","setUsuarioNombre","getUsuarioApellido","setUsuarioApellido","getUsuarioName","setUsuarioName","getUsuarioDependenciaNombre","setUsuarioDependenciaNombre","getUsuarioGruposTrabajo","setUsuarioGruposTrabajo","countTextArea","setCountTextArea","getMaximoTextArea","setMaximoTextArea","getMinimoTextArea","setMinimoTextArea","getModalState","setModalState","title","message","show","getIdGrupoTrabajo","setIdGrupoTrabajo","respuestaGrupoTrabajo","setRespuestaGrupoTrabajo","respuestaUsuariosGrupoTrabajo","setRespuestaUsuariosGrupoTrabajo","listaGruposTrabajo","setListaGruposTrabajo","getNombreProceso","setNombreProceso","respuestaUsuarioAleatorio","setRespuestaUsuarioAleatorio","getUsuarioAleatorio","setUsuarioAleatorio","getExisteUsuarioValido","setExisteUsuarioValido","getListaSemaforosActivosSecretaria","setListaSemaforosActivosSecretaria","location","from","state","procesoDisciplinarioId","numeroLlamadosFinalizar","numeroTotalLlamadosFinalizar","fetchData","window","showSpinner","nombreProceso","validacionSpinnerFinalizar","tituloModal","mensajeModal","radicado","toUpperCase","redirect","alert","global","Constants","TIPO_ALERTA","EXITO","getByIdGeneric","then","datos","error","attributes","nombre","obtenerParametros","cargarGruposDeTrabajo","obtenerSemaforosProcesoDisciplinario","getGeneric","getAllGeneric","SEMAFORO_EVENTOS","EVENTO_SECRETARIA_COMUN","selectGrupoTrabajo","length","map","grupoTrabajo","i","id","containsSpecialChars","str","result","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","includes","enviarDatos","valores","iduserdependencia","id_dependencia","nombre_funcionario","informacion","datosSemaforoFinaliza","forEach","element","dato","id_mas_grupo_trabajo_inicia","toString","id_funcionario","getByDataGeneric","addGeneric","datosSemaforo","index","id_mas_evento_inicio","objeto","date","Date","datapdxsemaforo","toLocaleDateString","ERROR","handleInputChange","event","target","value","type","checked","name","cargarUsuariosPorGrupo","cargarUsuarioAleatorio","filter","filteredName","showModal","idGrupo","apellido","dependencia","grupo_trabajo_secretaria_comun","usuario","errores","resetForm","errors"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/Transacciones/EnviaraAlguienDeSecretariaComunAleatorio.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Spinner from '../../Utils/Spinner';\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport { getUser } from '../../Utils/Common';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EnviaraAlguienDeSecretariaComunAleatorio() {\r\n\r\n    const [getUsuarioSleccionado, setUsuarioSleccionado] = useState(\"\");\r\n    const [getListaUusariosDependencia, setListaUusariosDependencia] = useState({ data: {} });\r\n    const [getUsuarioNombre, setUsuarioNombre] = useState(\"\");\r\n    const [getUsuarioApellido, setUsuarioApellido] = useState(\"\");\r\n    const [getUsuarioName, setUsuarioName] = useState(\"\");\r\n    const [getUsuarioDependenciaNombre, setUsuarioDependenciaNombre] = useState(\"\");\r\n    const [getUsuarioGruposTrabajo, setUsuarioGruposTrabajo] = useState([]);\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [getIdGrupoTrabajo, setIdGrupoTrabajo] = useState('');\r\n    const [respuestaGrupoTrabajo, setRespuestaGrupoTrabajo] = useState(false);\r\n    const [respuestaUsuariosGrupoTrabajo, setRespuestaUsuariosGrupoTrabajo] = useState(false);\r\n    const [listaGruposTrabajo, setListaGruposTrabajo] = useState({ data: {} });\r\n    const [getNombreProceso, setNombreProceso] = useState('');\r\n    const [respuestaUsuarioAleatorio, setRespuestaUsuarioAleatorio] = useState(false);\r\n    const [getUsuarioAleatorio, setUsuarioAleatorio] = useState();\r\n    const [getExisteUsuarioValido, setExisteUsuarioValido] = useState(false);\r\n    const [getListaSemaforosActivosSecretaria, setListaSemaforosActivosSecretaria] = useState([]);\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n    \r\n    let numeroLlamadosFinalizar = 0;\r\n    let numeroTotalLlamadosFinalizar = 1;\r\n\r\n    /**\r\n     * Funcion principal\r\n     */\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            window.showSpinner(true);\r\n            nombreProceso();\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Funcion para validar y detener el spinner\r\n    const validacionSpinnerFinalizar = () => {\r\n        numeroLlamadosFinalizar++\r\n        if(numeroLlamadosFinalizar >= numeroTotalLlamadosFinalizar){\r\n            window.showSpinner(false);\r\n            const tituloModal = getNombreProceso + \" :: Enviar a alguien de secretaria común dirigidamente\";\r\n            const mensajeModal = 'El proceso con radicado: ' + from.radicado + ' fue asignado al usuario: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '';\r\n            setModalState({ title: tituloModal.toUpperCase(), message: mensajeModal.toUpperCase(), show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n        }\r\n    }\r\n\r\n\r\n    const nombreProceso = () => {\r\n        GenericApi.getByIdGeneric(\"nombre-proceso\", from.procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setNombreProceso(datos.data.attributes.nombre);\r\n                    obtenerParametros();\r\n                    cargarGruposDeTrabajo();\r\n                    obtenerSemaforosProcesoDisciplinario()\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const cargarGruposDeTrabajo = () => {\r\n        GenericApi.getGeneric(\"mas_grupo_trabajo\").then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setRespuestaGrupoTrabajo(true);\r\n                    setListaGruposTrabajo(datos);\r\n                }\r\n                window.showSpinner(false);\r\n            }\r\n        )\r\n    }\r\n\r\n    const obtenerSemaforosProcesoDisciplinario = () => {\r\n\r\n        GenericApi.getAllGeneric(\"semaforo/get-semaforo-proceso-disciplinario/\"+global.Constants.SEMAFORO_EVENTOS.EVENTO_SECRETARIA_COMUN+\"/\"+procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setListaSemaforosActivosSecretaria(datos)\r\n                }\r\n                window.showSpinner(false);\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    const selectGrupoTrabajo = () => {\r\n        if (listaGruposTrabajo.data.length >= 1) {\r\n            return (\r\n                listaGruposTrabajo.data.map((grupoTrabajo, i) => {\r\n                    return (\r\n                        <option key={grupoTrabajo.id} value={grupoTrabajo.id}>{grupoTrabajo.attributes.nombre}</option>\r\n                    )\r\n                })\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // Funcion que nos ayuda a ver si existen caracteres especiales en el textarea de -Informacion para su remisión-\r\n    function containsSpecialChars(str) {\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n\r\n\r\n    const enviarDatos = (valores) => {\r\n        const iduserdependencia = getUser().id_dependencia;\r\n        window.showSpinner(true);\r\n        let data;\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"transacciones\",\r\n                \"attributes\": {\r\n\r\n                    \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                    \"id_dependencia_origen\": iduserdependencia,\r\n                    \"usuario_a_remitir\": getUsuarioAleatorio.nombre_funcionario,\r\n                    \"descripcion_a_remitir\": valores.informacion,\r\n                    \"id_etapa\": 3\r\n                }\r\n            }\r\n        }\r\n\r\n        //Finalizando semaforo        \r\n        GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(\r\n            datosSemaforoFinaliza => {\r\n                if (datosSemaforoFinaliza.data.length >= 1) {\r\n                    datosSemaforoFinaliza.data.forEach(element => {\r\n                        if(getListaSemaforosActivosSecretaria.some(dato => dato.id == element.id) && element.attributes.id_mas_grupo_trabajo_inicia.id.toString() !== getIdGrupoTrabajo.toString()){\r\n                            let data = {\r\n                                \"data\": {\r\n                                    \"type\": \"semaforo\",\r\n                                    \"attributes\": {\r\n                                        \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\r\n                                        \"id_semaforo\": element.id,\r\n                                        \"id_actuacion_finaliza\": null,\r\n                                        \"id_dependencia_finaliza\": null,\r\n                                        \"id_usuario_finaliza\": getUsuarioAleatorio.id_funcionario\r\n                                    }\r\n                                }\r\n                            }    \r\n                            GenericApi.getByDataGeneric('set-finaliza-semaforo', data);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        )\r\n\r\n        const tituloModal = getNombreProceso.toUpperCase() + \" :: Enviar a alguien de secretaria común aleatoriamente\";\r\n        const mensajeModal = 'El proceso con radicado: ' + from.radicado + ' fue asignado al usuario: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '';\r\n\r\n        GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', data).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n\r\n                    validacionSpinnerFinalizar()\r\n\r\n                    GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(\r\n                        datosSemaforo => {\r\n\r\n                            numeroTotalLlamadosFinalizar++\r\n                            validacionSpinnerFinalizar()\r\n\r\n                            if (!datosSemaforo.error) {\r\n\r\n                                datosSemaforo.data.forEach((element, index) => {\r\n                                    if (element.attributes.id_mas_evento_inicio.id == 4) {\r\n                                        if (!getListaSemaforosActivosSecretaria.some(objeto => objeto.id.toString() === element.id.toString())) {\r\n                                            if(element.attributes.id_mas_grupo_trabajo_inicia.id.toString() == getIdGrupoTrabajo.toString()){\r\n                                                let date = new Date();\r\n                                                let datapdxsemaforo = {\r\n                                                    \"data\": {\r\n                                                        \"type\": \"pdxsemaforo\",\r\n                                                        \"attributes\": {\r\n                                                            \"id_semaforo\": element.id,\r\n                                                            \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                                                            \"id_actuacion\": \"\",\r\n                                                            \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\r\n                                                            \"estado\": 1,\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                                numeroTotalLlamadosFinalizar++\r\n\r\n                                                GenericApi.getByDataGeneric('pdxsemaforo', datapdxsemaforo).then(\r\n                                                    datosSemaforo => {\r\n                                                        numeroTotalLlamadosFinalizar++\r\n                                                        validacionSpinnerFinalizar()                                                        \r\n                                                    }\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                setModalState({ title: tituloModal.toUpperCase(), message: \"HA OCURRIDO UN ERROR CON LA SEMAFORIZACIÓN\", show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                            }\r\n                        }\r\n                    )\r\n                } else {\r\n                    setModalState({ title: tituloModal.toUpperCase(), message: datos.error.toString(), show: true, redirect: '/AntecedentesLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        )\r\n\r\n        /*GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', data).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    GenericApi.getByIdGeneric('get-semaforo-evento', 4).then(\r\n                        datosSemaforo => {\r\n                            if (!datosSemaforo.error) {\r\n                                datosSemaforo.data.forEach(element => {\r\n                                    if (element.attributes.id_mas_evento_inicio.id == 4) {\r\n                                        if (element.attributes.id_mas_grupo_trabajo_inicia.id == getIdGrupoTrabajo) {\r\n                                            let date = new Date();\r\n                                            let datapdxsemaforo = {\r\n                                                \"data\": {\r\n                                                    \"type\": \"pdxsemaforo\",\r\n                                                    \"attributes\": {\r\n                                                        \"id_semaforo\": element.id,\r\n                                                        \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                                                        \"id_actuacion\": \"\",\r\n                                                        \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\r\n                                                        \"estado\": 1,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            GenericApi.addGeneric('pdxsemaforo', datapdxsemaforo)\r\n                                        }\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                setModalState({ title: tituiloModal.toUpperCase(), message: \"HA OCURRIDO UN ERROR CON LA SEMAFORIZACIÓN\", show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                            }\r\n                        }\r\n                    )\r\n                    setModalState({ title: tituiloModal.toUpperCase(), message: mensajeModal.toUpperCase(), show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                }\r\n                else {\r\n                    setModalState({ title: tituiloModal.toUpperCase(), message: datos.error.toString(), show: true, redirect: '/AntecedentesLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n                window.showSpinner(false);\r\n            }\r\n        )*/\r\n    }\r\n\r\n    const handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        if (name == \"grupoTrabajo\") {\r\n            setIdGrupoTrabajo(value);\r\n            cargarUsuariosPorGrupo(value);\r\n            cargarUsuarioAleatorio(value);\r\n        }\r\n    }\r\n\r\n    // consultamos la cantidad maxima de caracteres para el textarea\r\n    const obtenerParametros = () => {\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n            GenericApi.getByDataGeneric('parametro/parametro-nombre', data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                        }\r\n                    } else {\r\n                        window.showModal(1);\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    const cargarUsuariosPorGrupo = (idGrupo) => {\r\n        window.showSpinner(true);\r\n        const tituloModal = getNombreProceso + \" :: Enviar a alguien de mi dependencia\";\r\n        GenericApi.getAllGeneric(\"usuario/get-usuarios-grupotrabajo/\"+idGrupo+\"/\"+procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setRespuestaUsuariosGrupoTrabajo(true);\r\n                    setListaUusariosDependencia(datos);\r\n                    window.showSpinner(false);\r\n                } else {\r\n                    setModalState({ title: tituloModal.toUpperCase(), message: datos.error.toString(), show: true, redirect: '/Transacciones', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    const cargarUsuarioAleatorio = (idGrupo) => {\r\n        window.showSpinner(true);\r\n        const tituloModal = \"SINPROC No \" + from.radicado + \" :: Enviar a alguien de secretaria común\";\r\n        const mensajeModal = \"No existen usuarios que puedan atender este expediente\";\r\n        GenericApi.getAllGeneric(\"mas_grupo_trabajo/repartoAleatorio/\" + idGrupo + \"/\" + procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (datos != \"\") {\r\n                    if (!datos.error) {\r\n                        setRespuestaUsuarioAleatorio(true);\r\n                        setUsuarioAleatorio(datos);\r\n                        GenericApi.getGeneric('usuario/get-usuario-por-name/' + datos.nombre_funcionario).then(\r\n                            datos => {\r\n                                if (!datos.error) {\r\n                                    setUsuarioNombre(datos.data[0].attributes.nombre);\r\n                                    setUsuarioApellido(datos.data[0].attributes.apellido);\r\n                                    setUsuarioName(datos.data[0].attributes.name);\r\n                                    setUsuarioDependenciaNombre(datos.data[0].attributes.dependencia.nombre);\r\n                                    setUsuarioGruposTrabajo(datos.data[0].attributes.grupo_trabajo_secretaria_comun.split(','))\r\n                                    setExisteUsuarioValido(true);\r\n                                }\r\n                            }\r\n                        )\r\n                    } else {\r\n                        setModalState({ title: tituloModal.toUpperCase(), message: datos.error.toString(), show: true, redirect: '/Transacciones', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                        setExisteUsuarioValido(false);\r\n\r\n                    }\r\n                } else {\r\n                    setUsuarioNombre(\"\");\r\n                    setUsuarioApellido(\"\");\r\n                    setUsuarioName(\"\");\r\n                    setUsuarioDependenciaNombre(\"\");                    \r\n                    setUsuarioGruposTrabajo([]);\r\n                    setModalState({ title: tituloModal.toUpperCase(), message: mensajeModal.toUpperCase(), show: true, from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    setExisteUsuarioValido(false);\r\n                }\r\n                window.showSpinner(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    informacion: '',\r\n                    usuario: ''\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n                    setCountTextArea(valores.informacion.length)\r\n                    let errores = {}\r\n\r\n                    if (!valores.informacion) {\r\n                        errores.informacion = 'Debe ingresar un valor'\r\n                    }\r\n                    else if (valores.informacion.length <= getMinimoTextArea) {\r\n                        errores.informacion = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres'\r\n                    }\r\n                    if (valores.informacion) {\r\n                        if (containsSpecialChars(valores.informacion))\r\n                            errores.informacion = 'Tiene caracteres inválidos'\r\n                    }\r\n\r\n                    return errores\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n                    enviarDatos(valores);\r\n                }}\r\n            >\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"w2d_block let\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/MisPendientes`}><small>Mis Pendientes</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/RamasProceso/`} state={{ from: from }}><small>Ramas del proceso</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <small>Enviar a alguien de secretaria común aleatoriamente</small></li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                        <div className=\"block block-themed\">\r\n                            <div className=\"block-header\">\r\n                                <h3 className=\"block-title\">{getNombreProceso.toUpperCase()} <strong> :: ENVIAR A ALGUIEN DE SECRETARIA COMÚN ALEATORIAMENTE</strong></h3>\r\n                            </div>\r\n                            <div className=\"block-content\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"grupoTrabajo\">SELECCIONE EL GRUPO DE TRABAJO <span className=\"text-danger\">*</span></label>\r\n                                            <Field value={getIdGrupoTrabajo} onChange={handleInputChange} as=\"select\" className=\"form-control\" id=\"grupoTrabajo\" name=\"grupoTrabajo\">\r\n                                                <option value=\"\">Por favor seleccione</option>\r\n                                                {respuestaGrupoTrabajo ? selectGrupoTrabajo() : null}\r\n                                            </Field>\r\n                                            <ErrorMessage name=\"grupoTrabajo\" component={() => (<span className=\"text-danger\">{errors.grupoTrabajo}</span>)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    {getExisteUsuarioValido ?\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label>USUARIO A RECIBIR GESTION: </label> {getUsuarioNombre != \"\" ? \" \" + getUsuarioNombre.toUpperCase() + \" \" + getUsuarioApellido.toUpperCase() + \" (\" + getUsuarioName.toUpperCase() + \") DE LA DEPENDENCIA \" + getUsuarioDependenciaNombre.toUpperCase() : null}\r\n                                            </div>\r\n                                        </div> : null}\r\n                                    {getExisteUsuarioValido ?\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"informacion\">OBSERVACIONES <span className=\"text-danger\">*</span></label>\r\n                                                <Field as=\"textarea\" className=\"form-control\" id=\"informacion\" name=\"informacion\" rows=\"6\" placeholder=\"INFORMACIÓN PARA SU REMISIÓN...\"\r\n                                                    maxLength={getMaximoTextArea} minLength={getMinimoTextArea}></Field>\r\n                                                <div className=\"text-right\">\r\n                                                    <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                                </div>\r\n                                                <ErrorMessage name=\"informacion\" component={() => (<span className=\"text-danger\">{errors.informacion}</span>)} />\r\n                                            </div>\r\n                                        </div> : null}\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    {getExisteUsuarioValido ?\r\n                                        <button type=\"submit\" className=\"btn btn-rounded btn-primary\">REMITIR</button>\r\n                                        : null}\r\n                                    <Link to={'/Transacciones'} state={{ from: from }} className=\"font-size-h5 font-w600\" >\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\">CANCELAR</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EnviaraAlguienDeSecretariaComunAleatorio;"],"mappings":"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"},"metadata":{},"sourceType":"module"}