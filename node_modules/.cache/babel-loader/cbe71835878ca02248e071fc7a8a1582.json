{"ast":null,"code":"import _regeneratorRuntime from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{ErrorMessage,Field,Form,Formik}from'formik';import Spinner from'../Utils/Spinner';import{Link}from\"react-router-dom\";import GenericApi from'../Api/Services/GenericApi';import{useLocation}from'react-router-dom';import'../Utils/Constants';import ModalGen from'../Utils/Modals/ModalGeneric';import InfoErrorApi from'../Utils/InfoErrorApi';import Select from'react-select';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function TipoExpedienteMensajesForm(){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),getMinimoTextArea=_useState2[0],setMinimoTextArea=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),getMaximoTextArea=_useState4[0],setMaximoTextArea=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),errorApi=_useState6[0],setErrorApi=_useState6[1];var _useState7=useState({title:\"\",message:\"\",show:false}),_useState8=_slicedToArray(_useState7,2),getModalState=_useState8[0],setModalState=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),countTextArea=_useState10[0],setCountTextArea=_useState10[1];// Constantes para cargar los valores\nvar _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),getMensajeTipoExpediente=_useState12[0],setMensajeTipoExpediente=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),getValueTipoExpediente=_useState14[0],setArrayTipoExpediente=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),getTipoExpediente=_useState16[0],setTipoExpediente=_useState16[1];// Constantes para los subtipos del expediente\nvar _useState17=useState(null),_useState18=_slicedToArray(_useState17,2),getHabilitarSubTipoExpediente=_useState18[0],setHabilitarSubTipoExpediente=_useState18[1];var _useState19=useState([]),_useState20=_slicedToArray(_useState19,2),getValueSubTipoExpediente=_useState20[0],setArraySubTipoExpediente=_useState20[1];var _useState21=useState([]),_useState22=_slicedToArray(_useState21,2),getSubTipoExpediente=_useState22[0],setSubTipoExpediente=_useState22[1];var _useState23=useState([]),_useState24=_slicedToArray(_useState23,2),getArrayEstados=_useState24[0],setArrayEstados=_useState24[1];var _useState25=useState(\"\"),_useState26=_slicedToArray(_useState25,2),getMensajeErrorTipoExpediente=_useState26[0],setMensajeErrorTipoExpediente=_useState26[1];var _useState27=useState(\"\"),_useState28=_slicedToArray(_useState27,2),getMensajeErrorSubTipoExpediente=_useState28[0],setMensajeErrorSubTipoExpediente=_useState28[1];var _useState29=useState(\"\"),_useState30=_slicedToArray(_useState29,2),getMensajeErrorEstado=_useState30[0],setMensajeErrorEstado=_useState30[1];var getListaEstados=[{value:'1',label:'Activo'},{value:'0',label:'Inactivo'}];var location=useLocation();var from=location.state.from;useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var arrayValidarTipoExpedientes,valorValidar;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Se habilita el cargando\nwindow.showSpinner(true);// Se carga la api de parametros permitidos\nobtenerParametros();if(from!=null){// Se carga el mensaje y la longitud del mensaje\nsetMensajeTipoExpediente(from.attributes.mensaje);setCountTextArea(from.attributes.mensaje.length);// Se carga el tipo de expediente\ncargarTiposExpedientes();setArrayTipoExpediente({label:from.attributes.tipo_expediente.nombre,value:from.attributes.tipo_expediente.id});// Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\narrayValidarTipoExpedientes=[1,3,4];valorValidar=parseInt(from.attributes.tipo_expediente.id);// Se valida que exista dentro del que lleva sub tipo de expediente\nif(arrayValidarTipoExpedientes.includes(valorValidar)){// Se habilita el sub tipo de expediente\nsetHabilitarSubTipoExpediente(true);// Se carga cuando es Derecho de peticion\nif(valorValidar==1){// Se cargan los datos del derecho de peticion\ngetApiTipoDerechoPeticion();// Se carga el sub tipo de expediente\nif(from.attributes.id_sub_tipo_expediente==\"Copias\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:1});}else if(from.attributes.id_sub_tipo_expediente==\"General\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:2});}else if(from.attributes.id_sub_tipo_expediente==\"Alerta control político\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:3});}}// Se carga cuando es Tipo Queja\nelse if(valorValidar==3){// Se cargan los datos de tipo queja\ngetApiTipoQueja();// Se carga el sub tipo de expediente\nif(from.attributes.id_sub_tipo_expediente==\"Externa\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:1});}else if(from.attributes.id_sub_tipo_expediente==\"Interna\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:2});}}// Se carga cuando es Tutela\nelse if(valorValidar==4){// Se cargan los datos de tipo queja\ngetApiTipoTutela();// Se carga el sub tipo de expediente\nif(from.attributes.id_sub_tipo_expediente==\"días\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:1});}else if(from.attributes.id_sub_tipo_expediente==\"horas\"){setArraySubTipoExpediente({label:from.attributes.id_sub_tipo_expediente,value:2});}}}// Se carga el estado\nif(from.attributes.estado==1){setArrayEstados({label:'Activo',value:from.attributes.estado});}else{setArrayEstados({label:'Inactivo',value:from.attributes.estado});}// Se deshabilita el cargando\nwindow.showSpinner(false);}else{// Se carga los tipos de expediente por mensajes\ncargarTipoExpedienteMensajes();}case 3:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);var cargarTiposExpedientes=function cargarTiposExpedientes(){// Se inicializa el trycatch en caso de error de la api\ntry{// Se inicializa el array general\nvar arrayGeneral=[];// Buscamos los valores del array de los tipos de expedientes\nGenericApi.getGeneric(\"mas-tipo-expediente\").then(function(datos){// Se valida que no haya ningun error\nif(!datos.error){// Se valida que el array tenga mas de 0 elementos\nif(datos[\"data\"].length>0){// Se recorre el array de los tipo de expediente\nfor(var index=0;index<datos.data.length;index++){// Se captura el valor por posicion\nvar element=datos.data[index];// Se añade al array general\narrayGeneral.push({label:element.attributes.nombre,value:element.id});}// Se añade el array general al array de los tipos de expedientes\nsetTipoExpediente(arrayGeneral);}}else{setModalState({title:\"Tipo expedientes\",message:datos.error.toString(),show:true,redirect:'/TipoExpedientesMensajes',alert:global.Constants.TIPO_ALERTA.ERROR});}});}catch(error){// console.log(error);\n}};// Metodo encargado de traer los tipos de derecho de peticion\nvar getApiTipoDerechoPeticion=function getApiTipoDerechoPeticion(){GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\"+1).then(function(datos){// Se valida que no haya error en la API\nif(!datos.error){// Se inicializa las variables\nvar arrayGeneral=[];var datosArray=datos.data;// Se recorre el array de los sub tipo de expediente derecho de peticion\nfor(var index=0;index<datosArray.length;index++){// Se captura el valor por posicion\nvar element=datosArray[index];// Se añade al array general\narrayGeneral.push({label:element.attributes.nombre,value:element.id});}// Se añade el array general al array de los tipos de expedientes\nsetSubTipoExpediente(arrayGeneral);}else{setModalState({title:\"Tipo Mensajes Expediente :: \",message:datos.error.toString(),show:true,redirect:'/TipoExpedienteMensajes',from:{from:from},alert:global.Constants.TIPO_ALERTA.ERROR});window.showSpinner(false);}});};// Metodo encargado de traer los tipos de queja\nvar getApiTipoQueja=function getApiTipoQueja(){GenericApi.getGeneric(\"lista-tipo-queja\").then(function(datos){// Se valida que no haya error\nif(!datos.error){// Se inicializa las variables\nvar arrayGeneral=[];var datosArray=datos.data;// Se recorre el array de los sub tipo de expediente derecho de peticion\nfor(var index=0;index<datosArray.length;index++){// Se captura el valor por posicion\nvar element=datosArray[index];// Se añade al array general\narrayGeneral.push({label:element.attributes.nombre,value:element.id});}// Se añade el array general al array de los tipos de expedientes\nsetSubTipoExpediente(arrayGeneral);}else{setModalState({title:\"Clasificación del radicado :: \",message:datos.error.toString(),show:true,redirect:'/ClasificacionRadicadoLista',from:{from:from},alert:global.Constants.TIPO_ALERTA.ERROR});window.showSpinner(false);}});};// Metodo encargado de traer los tipos de tutela\nvar getApiTipoTutela=function getApiTipoTutela(){GenericApi.getGeneric(\"lista-terminos-respuesta/\"+1).then(function(datos){// Se valida que no haya error\nif(!datos.error){// Se inicializa las variables\nvar arrayGeneral=[];var datosArray=datos.data;// Se recorre el array de los sub tipo de expediente derecho de peticion\nfor(var index=0;index<datosArray.length;index++){// Se captura el valor por posicion\nvar element=datosArray[index];// Se añade al array general\narrayGeneral.push({label:element.attributes.nombre,value:element.id});}// Se añade el array general al array de los tipos de expedientes\nsetSubTipoExpediente(arrayGeneral);}else{setModalState({title:\"Clasificación del radicado :: \",message:datos.error.toString(),show:true,redirect:'/ClasificacionRadicadoLista',from:{from:from},alert:global.Constants.TIPO_ALERTA.ERROR});window.showSpinner(false);}});};var cargarTipoExpedienteMensajes=function cargarTipoExpedienteMensajes(){// Se deshabilita el cargando\nwindow.showSpinner(false);// Se carga el metodo para cargar los tipos de expediente\ncargarTiposExpedientes();};var obtenerParametros=function obtenerParametros(){try{var data={\"data\":{\"type\":'mas_parametro',\"attributes\":{\"nombre\":\"minimo_caracteres_textarea|maximo_caracteres_textarea\"}}};// Buscamos el parametro\nGenericApi.getByDataGeneric(\"parametro/parametro-nombre\",data).then(function(datos){if(!datos.error){if(datos[\"data\"].length>0){datos[\"data\"].filter(function(data){return data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea');}).map(function(filteredName){return setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]);});datos[\"data\"].filter(function(data){return data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea');}).map(function(filteredName){return setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]);});}}else{setModalState({title:\"Antecedentes\",message:datos.error.toString(),show:true,redirect:'/AntecedentesForm',alert:global.Constants.TIPO_ALERTA.ERROR});}});}catch(error){// console.log(error);\n}};var enviarDatos=function enviarDatos(valores){// Se inicializa el array\nvar data;// Se valida que se haya seleccionado un tipo de expediente\nif(!getValueTipoExpediente.value){// Se redeclara el mensaje\nsetMensajeErrorTipoExpediente(\"Debe seleccionar un tipo de expediente\");return false;}else if(getValueTipoExpediente.value){// Se redeclara el mensaje en null\nsetMensajeErrorTipoExpediente(null);// Se inicializa el array\nvar arrayTiposExpedienteValidos=[1,3,4];var numeroValidar=parseInt(getValueTipoExpediente.value);// Se valida que este dentro de los que llevan sub tipo de expediente\nif(arrayTiposExpedienteValidos.includes(numeroValidar)){// Se valida que se haya seleccionado un sub tipo de expediente\nif(getValueSubTipoExpediente.value){// Se redeclara el mensaje\nsetMensajeErrorSubTipoExpediente(null);// Se valida que se haya seleccionado el estado\nif(getArrayEstados.value){// Se redeclara el mensaje\nsetMensajeErrorEstado(null);// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"mas_tipo_expediente_mensajes\",\"attributes\":{\"mensaje\":valores.mensaje,\"id_tipo_expediente\":getValueTipoExpediente.value,\"id_sub_tipo_expediente\":getValueSubTipoExpediente.value,\"estado\":getArrayEstados.value}}};}else{// Se redeclara el mensaje\nsetMensajeErrorEstado(\"Debe seleccionar un tipo de estado\");return false;}}else{// Se redeclara el mensaje del sub tipo de expediente\nsetMensajeErrorSubTipoExpediente(\"Debe seleccionar un sub tipo de expediente\");return false;}}else{// Se valida que se haya seleccionado el estado\nif(getArrayEstados.value){// Se redeclara el mensaje\nsetMensajeErrorEstado(null);// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"mas_tipo_expediente_mensajes\",\"attributes\":{\"mensaje\":valores.mensaje,\"id_tipo_expediente\":getValueTipoExpediente.value,\"estado\":getArrayEstados.value}}};}else{// Se redeclara el mensaje\nsetMensajeErrorEstado(\"Debe seleccionar un tipo de estado\");return false;}}}// Se utiliza el cargando\nwindow.showSpinner(true);// Se inicializa la API\nGenericApi.addGeneric('mas_tipo_expediente_mensajes',data).then(function(datos){// Se utiliza el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"Mensaje Tipo Expediente :: Creación\",message:'Creado con éxito ',show:true,redirect:'/TipoExpedienteMensajes',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"Mensaje Tipo Expediente :: Error de creación\",message:datos.error.toString(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};var actualizarDatos=function actualizarDatos(valores){// Se inicializa el valor del id\nvar id=from.id;// Se inicializa el array\nvar data;// Se inicializa el array a enviar por post\ndata={\"data\":{\"type\":\"mas_tipo_expediente_mensajes\",\"attributes\":{\"mensaje\":getMensajeTipoExpediente,\"id_tipo_expediente\":getValueTipoExpediente.value,\"id_sub_tipo_expediente\":getValueSubTipoExpediente.value,\"estado\":getArrayEstados.value}}};// Se utiliza el cargando\nwindow.showSpinner(true);GenericApi.updateGeneric('mas_tipo_expediente_mensajes',id,data).then(function(datos){// Se deshabilita el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){setModalState({title:\"Mensaje Tipo Expediente :: Actualización con éxito\",message:'Actualizado con éxito ',show:true,redirect:'/TipoExpedienteMensajes',alert:global.Constants.TIPO_ALERTA.EXITO});}else{setModalState({title:\"Mensaje Tipo Expediente :: Error de actualización\",message:datos.error.toString(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};var changeMensajeTipoExpediente=function changeMensajeTipoExpediente(e){setMensajeTipoExpediente(e.target.value);setCountTextArea(e.target.value.length);};var selectChangeTipoExpediente=function selectChangeTipoExpediente(v){// Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\nif(from==null){// Se carga el tipo de expediente en el array del select\nsetArrayTipoExpediente(v);// Se carga el sub tipo de expediente dependendiendo del tipo de expediente\nif(v.value==\"1\"){// Derecho de peticion\n// Se cargan los datos del derecho de peticion\ngetApiTipoDerechoPeticion();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}else if(v.value==\"2\"){// Poder referente\n// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(null);}else if(v.value==\"3\"){// Queja\n// Se cargan los datos del tipo de queja\ngetApiTipoQueja();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}else if(v.value==\"4\"){// Tutela\n// Se cargan los datos del tipo de tutela\ngetApiTipoTutela();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}}else if(v!=null){// Se carga el tipo de expediente en el array del select\nsetArrayTipoExpediente(v);// Se carga el sub tipo de expediente dependendiendo del tipo de expediente\nif(v.value==\"1\"){// Derecho de peticion\n// Se cargan los datos del derecho de peticion\ngetApiTipoDerechoPeticion();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}else if(v.value==\"2\"){// Poder referente\n// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(null);}else if(v.value==\"3\"){// Queja\n// Se cargan los datos del tipo de queja\ngetApiTipoQueja();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}else if(v.value==\"4\"){// Tutela\n// Se cargan los datos del tipo de tutela\ngetApiTipoTutela();// Se habilita que se muestre el select del subtipo\nsetHabilitarSubTipoExpediente(true);}}else{// setErrorEtapa('Campo requerido');\n}};var selectChangeSubTipoExpediente=function selectChangeSubTipoExpediente(v){// Se carga el tipo de expediente en el array del select\nsetArraySubTipoExpediente(v);};var selectChangeEstados=function selectChangeEstados(v){// Se carga el tipo de estado en el array del select\nsetArrayEstados(v);};// Metodo encargado de validar que no se ingresen caracteres invalidos\nfunction containsSpecialChars(str){var result=global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(function(specialChar){if(str.includes(specialChar)){return true;}return false;});return result;}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{}),/*#__PURE__*/_jsx(InfoErrorApi,{error:errorApi}),/*#__PURE__*/_jsx(ModalGen,{data:getModalState}),/*#__PURE__*/_jsx(Formik,{initialValues:{mensaje:''},enableReinitialize:true,validate:function validate(valores){// Se inicializa el array\nvar errores={};if(from!=null){// Se valida que tenga valores\nif(!getMensajeTipoExpediente){errores.mensaje='Debe ingresar un valor';}// Se valida que tenga el minimo de caracteres ingresados\nelse if(getMensajeTipoExpediente.length<=getMinimoTextArea){errores.mensaje='La descripción debe tener almenos '+getMinimoTextArea+' caracteres';}// Se valida que exista\nif(getMensajeTipoExpediente){// Se valida que contenga caracteres invalidos\nif(containsSpecialChars(getMensajeTipoExpediente)){errores.mensaje='Tiene caracteres inválidos';}}}else{// Se setea el valor de la cantidad de letras escritas dentro del text\nsetCountTextArea(valores.mensaje.length);// Se valida que tenga valores\nif(!valores.mensaje){errores.mensaje='Debe ingresar un valor';}// Se valida que tenga el minimo de caracteres ingresados\nelse if(valores.mensaje.length<=getMinimoTextArea){errores.mensaje='La descripción debe tener almenos '+getMinimoTextArea+' caracteres';}// Se valida que exista\nif(valores.mensaje){// Se valida que contenga caracteres invalidos\nif(containsSpecialChars(valores.mensaje)){errores.mensaje='Tiene caracteres inválidos';}}}// Se retorna los errores\nreturn errores;},onSubmit:function onSubmit(valores,_ref){var resetForm=_ref.resetForm;if(from!=null){actualizarDatos(valores);}else{enviarDatos(valores);}},children:function children(_ref2){var errors=_ref2.errors;return/*#__PURE__*/_jsx(Form,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"block block-rounded block-bordered\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"block block-themed\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsx(\"div\",{className:\"block-content\",children:/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb breadcrumb-alt push\",children:[/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Administraci\\xF3n\"})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Maestras\"})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsxs(Link,{underline:\"hover\",className:\"text-dark\",to:\"/TipoExpedienteMensajes\",children:[\" \",/*#__PURE__*/_jsx(\"small\",{children:\"Lista mensajes por tipo de expediente\"})]})]}),/*#__PURE__*/_jsxs(\"li\",{class:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsxs(\"small\",{children:[from!=null?'Actualizar':'Crear',\" mensaje por tipo de expediente\"]})]})]})})})}),/*#__PURE__*/_jsx(\"div\",{className:\"block-header\",children:/*#__PURE__*/_jsx(\"h3\",{className:\"block-title\",children:\"Datos b\\xE1sicos\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"block-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"mensaje\",children:\"Mensaje\"}),/*#__PURE__*/_jsx(Field,{as:\"textarea\",className:\"form-control mt-2\",id:\"mensaje\",name:\"mensaje\",rows:\"6\",placeholder:\"Informaci\\xF3n para su solicitud....\",maxLength:getMaximoTextArea,minLength:getMinimoTextArea,value:getMensajeTipoExpediente,onChange:changeMensajeTipoExpediente}),/*#__PURE__*/_jsx(\"div\",{className:\"text-right\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"text-primary\",children:[countTextArea,\" / \",getMaximoTextArea]})}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"mensaje\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.mensaje});}})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"tipo_expediente\",children:[\"Tipo expediente \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getValueTipoExpediente?/*#__PURE__*/_jsx(Select,{id:\"tipo_expediente\",name:\"tipo_expediente\",isMulti:false,value:getValueTipoExpediente,placeholder:\"Selecciona\",noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getTipoExpediente.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeTipoExpediente(e);}}):null,getMensajeErrorTipoExpediente?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorTipoExpediente}):null]})}),getHabilitarSubTipoExpediente!=null?/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"sub_tipo_expediente\",children:[\"Sub tipo de expediente \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getValueSubTipoExpediente?/*#__PURE__*/_jsx(Select,{id:\"sub_tipo_expediente\",name:\"sub_tipo_expediente\",isMulti:false,value:getValueSubTipoExpediente,placeholder:\"Selecciona\",noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getSubTipoExpediente.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeSubTipoExpediente(e);}}):null,getMensajeErrorSubTipoExpediente?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorSubTipoExpediente}):null]})}):null,/*#__PURE__*/_jsx(\"div\",{className:\"col-md-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"estado\",children:[\"Estado \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),getArrayEstados?/*#__PURE__*/_jsx(Select,{id:\"estado\",name:\"estado\",isMulti:false,value:getArrayEstados,placeholder:\"Selecciona\",noOptionsMessage:function noOptionsMessage(){return\"Sin datos\";},options:getListaEstados.map(function(e){return{label:e.label,value:e.value};}),onChange:function onChange(e){return selectChangeEstados(e);}}):null,getMensajeErrorEstado?/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:getMensajeErrorEstado}):null]})})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content block-content-full text-right bg-light\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-rounded btn-primary\",children:from!=null?\"Actualizar\":\"Crear\"}),/*#__PURE__*/_jsx(Link,{to:'/TipoExpedienteMensajes',className:\"font-size-h5 font-w600\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-rounded btn-outline-primary\",children:\"Cancelar\"})})]})]})});}})]});};","map":{"version":3,"names":["React","useEffect","useState","ErrorMessage","Field","Form","Formik","Spinner","Link","GenericApi","useLocation","ModalGen","InfoErrorApi","Select","TipoExpedienteMensajesForm","getMinimoTextArea","setMinimoTextArea","getMaximoTextArea","setMaximoTextArea","errorApi","setErrorApi","title","message","show","getModalState","setModalState","countTextArea","setCountTextArea","getMensajeTipoExpediente","setMensajeTipoExpediente","getValueTipoExpediente","setArrayTipoExpediente","getTipoExpediente","setTipoExpediente","getHabilitarSubTipoExpediente","setHabilitarSubTipoExpediente","getValueSubTipoExpediente","setArraySubTipoExpediente","getSubTipoExpediente","setSubTipoExpediente","getArrayEstados","setArrayEstados","getMensajeErrorTipoExpediente","setMensajeErrorTipoExpediente","getMensajeErrorSubTipoExpediente","setMensajeErrorSubTipoExpediente","getMensajeErrorEstado","setMensajeErrorEstado","getListaEstados","value","label","location","from","state","fetchData","window","showSpinner","obtenerParametros","attributes","mensaje","length","cargarTiposExpedientes","tipo_expediente","nombre","id","arrayValidarTipoExpedientes","valorValidar","parseInt","includes","getApiTipoDerechoPeticion","id_sub_tipo_expediente","getApiTipoQueja","getApiTipoTutela","estado","cargarTipoExpedienteMensajes","arrayGeneral","getGeneric","then","datos","error","index","data","element","push","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","datosArray","getByDataGeneric","filter","map","filteredName","enviarDatos","valores","arrayTiposExpedienteValidos","numeroValidar","addGeneric","EXITO","actualizarDatos","updateGeneric","changeMensajeTipoExpediente","e","target","selectChangeTipoExpediente","v","selectChangeSubTipoExpediente","selectChangeEstados","containsSpecialChars","str","result","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","errores","resetForm","errors"],"sources":["C:/w2d/personeria/personeria-ui/src/components/Maestras/TipoExpedienteMensajesForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport Spinner from '../Utils/Spinner';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport '../Utils/Constants';\r\nimport ModalGen from '../Utils/Modals/ModalGeneric';\r\nimport InfoErrorApi from '../Utils/InfoErrorApi';\r\nimport Select from 'react-select';\r\n\r\nexport default function TipoExpedienteMensajesForm() {\r\n\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n\r\n    // Constantes para cargar los valores\r\n    const [getMensajeTipoExpediente, setMensajeTipoExpediente] = useState(\"\");\r\n    const [getValueTipoExpediente, setArrayTipoExpediente] = useState([]);\r\n    const [getTipoExpediente, setTipoExpediente] = useState([]);\r\n\r\n    // Constantes para los subtipos del expediente\r\n    const [getHabilitarSubTipoExpediente, setHabilitarSubTipoExpediente] = useState(null);\r\n\r\n    const [getValueSubTipoExpediente, setArraySubTipoExpediente] = useState([]);\r\n    const [getSubTipoExpediente, setSubTipoExpediente] = useState([]);\r\n    const [getArrayEstados, setArrayEstados] = useState([]);\r\n\r\n    const [getMensajeErrorTipoExpediente, setMensajeErrorTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorSubTipoExpediente, setMensajeErrorSubTipoExpediente] = useState(\"\");\r\n    const [getMensajeErrorEstado, setMensajeErrorEstado] = useState(\"\");\r\n\r\n    const getListaEstados =\r\n        [\r\n            { value: '1', label: 'Activo' },\r\n            { value: '0', label: 'Inactivo' }\r\n        ];\r\n\r\n    const location = useLocation();\r\n    const { from } = location.state;\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n\r\n            // Se habilita el cargando\r\n            window.showSpinner(true);\r\n\r\n            // Se carga la api de parametros permitidos\r\n            obtenerParametros();\r\n\r\n            if (from != null) {\r\n\r\n                // Se carga el mensaje y la longitud del mensaje\r\n                setMensajeTipoExpediente(from.attributes.mensaje);\r\n                setCountTextArea(from.attributes.mensaje.length);\r\n\r\n                // Se carga el tipo de expediente\r\n                cargarTiposExpedientes();\r\n                setArrayTipoExpediente({ label: from.attributes.tipo_expediente.nombre, value: from.attributes.tipo_expediente.id });\r\n\r\n                // Se valida que el tipo de expediente este dentro de los que llevan sub tipo de expediente\r\n                const arrayValidarTipoExpedientes = [1, 3, 4];\r\n                const valorValidar = parseInt(from.attributes.tipo_expediente.id);\r\n\r\n                // Se valida que exista dentro del que lleva sub tipo de expediente\r\n                if (arrayValidarTipoExpedientes.includes(valorValidar)) {\r\n\r\n                    // Se habilita el sub tipo de expediente\r\n                    setHabilitarSubTipoExpediente(true);\r\n\r\n                    // Se carga cuando es Derecho de peticion\r\n                    if (valorValidar == 1) {\r\n\r\n                        // Se cargan los datos del derecho de peticion\r\n                        getApiTipoDerechoPeticion();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Copias\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"General\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Alerta control político\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 3 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tipo Queja\r\n                    else if (valorValidar == 3) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoQueja();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"Externa\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"Interna\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n\r\n                    // Se carga cuando es Tutela\r\n                    else if (valorValidar == 4) {\r\n\r\n                        // Se cargan los datos de tipo queja\r\n                        getApiTipoTutela();\r\n\r\n                        // Se carga el sub tipo de expediente\r\n                        if (from.attributes.id_sub_tipo_expediente == \"días\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 1 })\r\n                        } else if (from.attributes.id_sub_tipo_expediente == \"horas\") {\r\n                            setArraySubTipoExpediente({ label: from.attributes.id_sub_tipo_expediente, value: 2 })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Se carga el estado\r\n                if (from.attributes.estado == 1) {\r\n                    setArrayEstados({ label: 'Activo', value: from.attributes.estado });\r\n                } else {\r\n                    setArrayEstados({ label: 'Inactivo', value: from.attributes.estado });\r\n                }\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n            } else {\r\n\r\n                // Se carga los tipos de expediente por mensajes\r\n                cargarTipoExpedienteMensajes();\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const cargarTiposExpedientes = () => {\r\n\r\n        // Se inicializa el trycatch en caso de error de la api\r\n        try {\r\n\r\n            // Se inicializa el array general\r\n            var arrayGeneral = [];\r\n\r\n            // Buscamos los valores del array de los tipos de expedientes\r\n            GenericApi.getGeneric(\"mas-tipo-expediente\").then(\r\n                datos => {\r\n\r\n                    // Se valida que no haya ningun error\r\n                    if (!datos.error) {\r\n\r\n                        // Se valida que el array tenga mas de 0 elementos\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            // Se recorre el array de los tipo de expediente\r\n                            for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                                // Se captura el valor por posicion\r\n                                const element = datos.data[index];\r\n\r\n                                // Se añade al array general\r\n                                arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                            }\r\n\r\n                            // Se añade el array general al array de los tipos de expedientes\r\n                            setTipoExpediente(arrayGeneral);\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"Tipo expedientes\", message: datos.error.toString(), show: true, redirect: '/TipoExpedientesMensajes', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de derecho de peticion\r\n    const getApiTipoDerechoPeticion = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-derecho-peticion/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error en la API\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n\r\n                } else {\r\n                    setModalState({ title: \"Tipo Mensajes Expediente :: \", message: datos.error.toString(), show: true, redirect: '/TipoExpedienteMensajes', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de queja\r\n    const getApiTipoQueja = () => {\r\n        GenericApi.getGeneric(\"lista-tipo-queja\").then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"Clasificación del radicado :: \", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de traer los tipos de tutela\r\n    const getApiTipoTutela = () => {\r\n        GenericApi.getGeneric(\"lista-terminos-respuesta/\" + 1).then(\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializa las variables\r\n                    let arrayGeneral = [];\r\n                    let datosArray = datos.data;\r\n\r\n                    // Se recorre el array de los sub tipo de expediente derecho de peticion\r\n                    for (let index = 0; index < datosArray.length; index++) {\r\n\r\n                        // Se captura el valor por posicion\r\n                        const element = datosArray[index];\r\n\r\n                        // Se añade al array general\r\n                        arrayGeneral.push({ label: element.attributes.nombre, value: element.id })\r\n                    }\r\n\r\n                    // Se añade el array general al array de los tipos de expedientes\r\n                    setSubTipoExpediente(arrayGeneral);\r\n                }\r\n                else {\r\n                    setModalState({ title: \"Clasificación del radicado :: \", message: datos.error.toString(), show: true, redirect: '/ClasificacionRadicadoLista', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    window.showSpinner(false);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const cargarTipoExpedienteMensajes = () => {\r\n\r\n        // Se deshabilita el cargando\r\n        window.showSpinner(false);\r\n\r\n        // Se carga el metodo para cargar los tipos de expediente\r\n        cargarTiposExpedientes();\r\n    }\r\n\r\n    const obtenerParametros = () => {\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"Antecedentes\", message: datos.error.toString(), show: true, redirect: '/AntecedentesForm', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se valida que se haya seleccionado un tipo de expediente\r\n        if (!getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje\r\n            setMensajeErrorTipoExpediente(\"Debe seleccionar un tipo de expediente\");\r\n            return false;\r\n        } else if (getValueTipoExpediente.value) {\r\n\r\n            // Se redeclara el mensaje en null\r\n            setMensajeErrorTipoExpediente(null);\r\n\r\n            // Se inicializa el array\r\n            const arrayTiposExpedienteValidos = [1, 3, 4];\r\n            const numeroValidar = parseInt(getValueTipoExpediente.value);\r\n\r\n            // Se valida que este dentro de los que llevan sub tipo de expediente\r\n            if (arrayTiposExpedienteValidos.includes(numeroValidar)) {\r\n\r\n                // Se valida que se haya seleccionado un sub tipo de expediente\r\n                if (getValueSubTipoExpediente.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorSubTipoExpediente(null);\r\n\r\n                    // Se valida que se haya seleccionado el estado\r\n                    if (getArrayEstados.value) {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(null);\r\n\r\n                        // Se inicializa el array a enviar por post\r\n                        data = {\r\n                            \"data\": {\r\n                                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                                \"attributes\": {\r\n                                    \"mensaje\": valores.mensaje,\r\n                                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                                    \"estado\": getArrayEstados.value\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se redeclara el mensaje\r\n                        setMensajeErrorEstado(\"Debe seleccionar un tipo de estado\");\r\n                        return false;\r\n                    }\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje del sub tipo de expediente\r\n                    setMensajeErrorSubTipoExpediente(\"Debe seleccionar un sub tipo de expediente\");\r\n                    return false;\r\n                }\r\n            } else {\r\n\r\n                // Se valida que se haya seleccionado el estado\r\n                if (getArrayEstados.value) {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(null);\r\n\r\n                    // Se inicializa el array a enviar por post\r\n                    data = {\r\n                        \"data\": {\r\n                            \"type\": \"mas_tipo_expediente_mensajes\",\r\n                            \"attributes\": {\r\n                                \"mensaje\": valores.mensaje,\r\n                                \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                                \"estado\": getArrayEstados.value\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Se redeclara el mensaje\r\n                    setMensajeErrorEstado(\"Debe seleccionar un tipo de estado\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.addGeneric('mas_tipo_expediente_mensajes', data).then(\r\n            datos => {\r\n\r\n                // Se utiliza el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"Mensaje Tipo Expediente :: Creación\", message: 'Creado con éxito ', show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                } else {\r\n                    setModalState({ title: \"Mensaje Tipo Expediente :: Error de creación\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const actualizarDatos = (valores) => {\r\n\r\n        // Se inicializa el valor del id\r\n        const id = from.id;\r\n\r\n        // Se inicializa el array\r\n        let data;\r\n\r\n        // Se inicializa el array a enviar por post\r\n        data = {\r\n            \"data\": {\r\n                \"type\": \"mas_tipo_expediente_mensajes\",\r\n                \"attributes\": {\r\n                    \"mensaje\": getMensajeTipoExpediente,\r\n                    \"id_tipo_expediente\": getValueTipoExpediente.value,\r\n                    \"id_sub_tipo_expediente\": getValueSubTipoExpediente.value,\r\n                    \"estado\": getArrayEstados.value\r\n                }\r\n            }\r\n        };\r\n\r\n        // Se utiliza el cargando\r\n        window.showSpinner(true);\r\n\r\n        GenericApi.updateGeneric('mas_tipo_expediente_mensajes', id, data).then(\r\n            datos => {\r\n\r\n                // Se deshabilita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n                    setModalState({ title: \"Mensaje Tipo Expediente :: Actualización con éxito\", message: 'Actualizado con éxito ', show: true, redirect: '/TipoExpedienteMensajes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                }\r\n                else {\r\n                    setModalState({ title: \"Mensaje Tipo Expediente :: Error de actualización\", message: datos.error.toString(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const changeMensajeTipoExpediente = (e) => {\r\n        setMensajeTipoExpediente(e.target.value);\r\n        setCountTextArea(e.target.value.length);\r\n    }\r\n\r\n    const selectChangeTipoExpediente = (v) => {\r\n\r\n        // Se valida en accion deberia tomar en caso que tenga from y solo se actualize o no tenga y se tenga que crear\r\n        if (from == null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n        } else if (v != null) {\r\n\r\n            // Se carga el tipo de expediente en el array del select\r\n            setArrayTipoExpediente(v);\r\n\r\n            // Se carga el sub tipo de expediente dependendiendo del tipo de expediente\r\n            if (v.value == \"1\") { // Derecho de peticion\r\n\r\n                // Se cargan los datos del derecho de peticion\r\n                getApiTipoDerechoPeticion();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"2\") { // Poder referente\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(null);\r\n            } else if (v.value == \"3\") { // Queja\r\n\r\n                // Se cargan los datos del tipo de queja\r\n                getApiTipoQueja();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            } else if (v.value == \"4\") { // Tutela\r\n\r\n                // Se cargan los datos del tipo de tutela\r\n                getApiTipoTutela();\r\n\r\n                // Se habilita que se muestre el select del subtipo\r\n                setHabilitarSubTipoExpediente(true);\r\n            }\r\n        } else {\r\n            // setErrorEtapa('Campo requerido');\r\n        }\r\n    }\r\n\r\n    const selectChangeSubTipoExpediente = (v) => {\r\n\r\n        // Se carga el tipo de expediente en el array del select\r\n        setArraySubTipoExpediente(v);\r\n    }\r\n\r\n    const selectChangeEstados = (v) => {\r\n\r\n        // Se carga el tipo de estado en el array del select\r\n        setArrayEstados(v);\r\n    }\r\n\r\n    // Metodo encargado de validar que no se ingresen caracteres invalidos\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<InfoErrorApi error={errorApi} />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    mensaje: '',\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                    // Se inicializa el array\r\n                    let errores = {};\r\n\r\n                    if (from != null) {\r\n\r\n                        // Se valida que tenga valores\r\n                        if (!getMensajeTipoExpediente) {\r\n                            errores.mensaje = 'Debe ingresar un valor';\r\n                        }\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        else if (getMensajeTipoExpediente.length <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (getMensajeTipoExpediente) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(getMensajeTipoExpediente)) {\r\n                                errores.mensaje = 'Tiene caracteres inválidos';\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se setea el valor de la cantidad de letras escritas dentro del text\r\n                        setCountTextArea(valores.mensaje.length);\r\n\r\n                        // Se valida que tenga valores\r\n                        if (!valores.mensaje) {\r\n                            errores.mensaje = 'Debe ingresar un valor';\r\n                        }\r\n\r\n                        // Se valida que tenga el minimo de caracteres ingresados\r\n                        else if (valores.mensaje.length <= getMinimoTextArea) {\r\n                            errores.mensaje = 'La descripción debe tener almenos ' + getMinimoTextArea + ' caracteres';\r\n                        }\r\n\r\n                        // Se valida que exista\r\n                        if (valores.mensaje) {\r\n\r\n                            // Se valida que contenga caracteres invalidos\r\n                            if (containsSpecialChars(valores.mensaje)) {\r\n                                errores.mensaje = 'Tiene caracteres inválidos';\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Se retorna los errores\r\n                    return errores;\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n\r\n                    if (from != null) {\r\n                        actualizarDatos(valores);\r\n                    } else {\r\n                        enviarDatos(valores);\r\n                    }\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"block block-rounded block-bordered\">\r\n                            <div className=\"block block-themed\">\r\n                                <div className=\"col-md-12\">\r\n                                    <div className=\"block-content\">\r\n                                        <nav aria-label=\"breadcrumb\">\r\n                                            <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                                <li class=\"breadcrumb-item\"> <small>Administración</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>Maestras</small></li>\r\n                                                <li class=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/TipoExpedienteMensajes`}> <small>Lista mensajes por tipo de expediente</small></Link></li>\r\n                                                <li class=\"breadcrumb-item\"> <small>{from != null ? 'Actualizar' : 'Crear'} mensaje por tipo de expediente</small></li>\r\n                                            </ol>\r\n                                        </nav>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-header\">\r\n                                    <h3 className=\"block-title\">Datos básicos</h3>\r\n                                </div>\r\n                                <div className=\"block-content\">\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group\">\r\n                                                {/* <i className=\"fa fa-check text-success fa-2x mr-3\"></i> */}\r\n                                                <label htmlFor=\"mensaje\">Mensaje</label>\r\n                                                <Field as=\"textarea\"\r\n                                                    className=\"form-control mt-2\"\r\n                                                    id=\"mensaje\"\r\n                                                    name=\"mensaje\"\r\n                                                    rows=\"6\"\r\n                                                    placeholder=\"Información para su solicitud....\"\r\n                                                    maxLength={getMaximoTextArea}\r\n                                                    minLength={getMinimoTextArea}\r\n                                                    value={getMensajeTipoExpediente}\r\n                                                    onChange={changeMensajeTipoExpediente}\r\n                                                ></Field>\r\n                                                <div className=\"text-right\">\r\n                                                    <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                                </div>\r\n                                                <ErrorMessage name=\"mensaje\" component={() => (<span className=\"text-danger\">{errors.mensaje}</span>)} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"col-md-6\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"tipo_expediente\">Tipo expediente <span className=\"text-danger\">*</span></label>\r\n                                                {(getValueTipoExpediente) ?\r\n                                                    <Select\r\n                                                        id='tipo_expediente'\r\n                                                        name='tipo_expediente'\r\n                                                        isMulti={false}\r\n                                                        value={getValueTipoExpediente}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getTipoExpediente.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeTipoExpediente(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorTipoExpediente ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorTipoExpediente}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        {getHabilitarSubTipoExpediente != null\r\n                                            ?\r\n                                            <div className=\"col-md-3\">\r\n                                                <div className=\"form-group\">\r\n                                                    <label htmlFor=\"sub_tipo_expediente\">Sub tipo de expediente <span className=\"text-danger\">*</span></label>\r\n                                                    {(getValueSubTipoExpediente) ?\r\n                                                        <Select\r\n                                                            id='sub_tipo_expediente'\r\n                                                            name='sub_tipo_expediente'\r\n                                                            isMulti={false}\r\n                                                            value={getValueSubTipoExpediente}\r\n                                                            placeholder=\"Selecciona\"\r\n                                                            noOptionsMessage={() => \"Sin datos\"}\r\n                                                            options={getSubTipoExpediente.map(e =>\r\n                                                                ({ label: e.label, value: e.value })\r\n                                                            )}\r\n                                                            onChange={(e) => selectChangeSubTipoExpediente(e)}\r\n                                                        />\r\n                                                        : null}\r\n                                                    {getMensajeErrorSubTipoExpediente ?\r\n                                                        <span className=\"text-danger\">{getMensajeErrorSubTipoExpediente}</span>\r\n                                                        : null}\r\n                                                </div>\r\n                                            </div>\r\n                                            : null}\r\n\r\n                                        <div className=\"col-md-3\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"estado\">Estado <span className=\"text-danger\">*</span></label>\r\n                                                {(getArrayEstados) ?\r\n                                                    <Select\r\n                                                        id='estado'\r\n                                                        name='estado'\r\n                                                        isMulti={false}\r\n                                                        value={getArrayEstados}\r\n                                                        placeholder=\"Selecciona\"\r\n                                                        noOptionsMessage={() => \"Sin datos\"}\r\n                                                        options={getListaEstados.map(e =>\r\n                                                            ({ label: e.label, value: e.value })\r\n                                                        )}\r\n                                                        onChange={(e) => selectChangeEstados(e)}\r\n                                                    />\r\n                                                    : null}\r\n                                                {getMensajeErrorEstado ?\r\n                                                    <span className=\"text-danger\">{getMensajeErrorEstado}</span>\r\n                                                    : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"block-content block-content-full text-right bg-light\">\r\n                                <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >\r\n                                    {from != null ? \"Actualizar\" : \"Crear\"}\r\n                                </button>\r\n                                <Link to={'/TipoExpedienteMensajes'} className=\"font-size-h5 font-w600\" >\r\n                                    <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >Cancelar</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\n"],"mappings":"+WAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,YAAY,CAAEC,KAAK,CAAEC,IAAI,CAAEC,MAAM,KAAQ,QAAQ,CAC1D,MAAOC,QAAO,KAAM,kBAAkB,CACtC,OAASC,IAAI,KAAQ,kBAAkB,CACvC,MAAOC,WAAU,KAAM,4BAA4B,CACnD,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,oBAAoB,CAC3B,MAAOC,SAAQ,KAAM,8BAA8B,CACnD,MAAOC,aAAY,KAAM,uBAAuB,CAChD,MAAOC,OAAM,KAAM,cAAc,CAAC,6IAElC,cAAe,SAASC,2BAA0B,EAAG,CAEjD,cAA+CZ,QAAQ,CAAC,CAAC,CAAC,wCAAnDa,iBAAiB,eAAEC,iBAAiB,eAC3C,eAA+Cd,QAAQ,CAAC,CAAC,CAAC,yCAAnDe,iBAAiB,eAAEC,iBAAiB,eAC3C,eAAgChB,QAAQ,CAAC,EAAE,CAAC,yCAArCiB,QAAQ,eAAEC,WAAW,eAC5B,eAAuClB,QAAQ,CAAC,CAAEmB,KAAK,CAAE,EAAE,CAAEC,OAAO,CAAE,EAAE,CAAEC,IAAI,CAAE,KAAM,CAAC,CAAC,yCAAjFC,aAAa,eAAEC,aAAa,eACnC,eAA0CvB,QAAQ,CAAC,CAAC,CAAC,0CAA9CwB,aAAa,gBAAEC,gBAAgB,gBAEtC;AACA,gBAA6DzB,QAAQ,CAAC,EAAE,CAAC,2CAAlE0B,wBAAwB,gBAAEC,wBAAwB,gBACzD,gBAAyD3B,QAAQ,CAAC,EAAE,CAAC,2CAA9D4B,sBAAsB,gBAAEC,sBAAsB,gBACrD,gBAA+C7B,QAAQ,CAAC,EAAE,CAAC,2CAApD8B,iBAAiB,gBAAEC,iBAAiB,gBAE3C;AACA,gBAAuE/B,QAAQ,CAAC,IAAI,CAAC,2CAA9EgC,6BAA6B,gBAAEC,6BAA6B,gBAEnE,gBAA+DjC,QAAQ,CAAC,EAAE,CAAC,2CAApEkC,yBAAyB,gBAAEC,yBAAyB,gBAC3D,gBAAqDnC,QAAQ,CAAC,EAAE,CAAC,2CAA1DoC,oBAAoB,gBAAEC,oBAAoB,gBACjD,gBAA2CrC,QAAQ,CAAC,EAAE,CAAC,2CAAhDsC,eAAe,gBAAEC,eAAe,gBAEvC,gBAAuEvC,QAAQ,CAAC,EAAE,CAAC,2CAA5EwC,6BAA6B,gBAAEC,6BAA6B,gBACnE,gBAA6EzC,QAAQ,CAAC,EAAE,CAAC,2CAAlF0C,gCAAgC,gBAAEC,gCAAgC,gBACzE,gBAAuD3C,QAAQ,CAAC,EAAE,CAAC,2CAA5D4C,qBAAqB,gBAAEC,qBAAqB,gBAEnD,GAAMC,gBAAe,CACjB,CACI,CAAEC,KAAK,CAAE,GAAG,CAAEC,KAAK,CAAE,QAAS,CAAC,CAC/B,CAAED,KAAK,CAAE,GAAG,CAAEC,KAAK,CAAE,UAAW,CAAC,CACpC,CAEL,GAAMC,SAAQ,CAAGzC,WAAW,EAAE,CAC9B,GAAQ0C,KAAI,CAAKD,QAAQ,CAACE,KAAK,CAAvBD,IAAI,CAEZnD,SAAS,CAAC,UAAM,SACGqD,UAAS,uIAAxB,kLAEI;AACAC,MAAM,CAACC,WAAW,CAAC,IAAI,CAAC,CAExB;AACAC,iBAAiB,EAAE,CAEnB,GAAIL,IAAI,EAAI,IAAI,CAAE,CAEd;AACAvB,wBAAwB,CAACuB,IAAI,CAACM,UAAU,CAACC,OAAO,CAAC,CACjDhC,gBAAgB,CAACyB,IAAI,CAACM,UAAU,CAACC,OAAO,CAACC,MAAM,CAAC,CAEhD;AACAC,sBAAsB,EAAE,CACxB9B,sBAAsB,CAAC,CAAEmB,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACI,eAAe,CAACC,MAAM,CAAEd,KAAK,CAAEG,IAAI,CAACM,UAAU,CAACI,eAAe,CAACE,EAAG,CAAC,CAAC,CAEpH;AACMC,2BAA2B,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACvCC,YAAY,CAAGC,QAAQ,CAACf,IAAI,CAACM,UAAU,CAACI,eAAe,CAACE,EAAE,CAAC,CAEjE;AACA,GAAIC,2BAA2B,CAACG,QAAQ,CAACF,YAAY,CAAC,CAAE,CAEpD;AACA/B,6BAA6B,CAAC,IAAI,CAAC,CAEnC;AACA,GAAI+B,YAAY,EAAI,CAAC,CAAE,CAEnB;AACAG,yBAAyB,EAAE,CAE3B;AACA,GAAIjB,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,QAAQ,CAAE,CACpDjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CAAC,IAAM,IAAIG,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,SAAS,CAAE,CAC5DjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CAAC,IAAM,IAAIG,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,yBAAyB,CAAE,CAC5EjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CACJ,CAEA;AAAA,IACK,IAAIiB,YAAY,EAAI,CAAC,CAAE,CAExB;AACAK,eAAe,EAAE,CAEjB;AACA,GAAInB,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,SAAS,CAAE,CACrDjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CAAC,IAAM,IAAIG,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,SAAS,CAAE,CAC5DjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CACJ,CAEA;AAAA,IACK,IAAIiB,YAAY,EAAI,CAAC,CAAE,CAExB;AACAM,gBAAgB,EAAE,CAElB;AACA,GAAIpB,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,MAAM,CAAE,CAClDjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CAAC,IAAM,IAAIG,IAAI,CAACM,UAAU,CAACY,sBAAsB,EAAI,OAAO,CAAE,CAC1DjC,yBAAyB,CAAC,CAAEa,KAAK,CAAEE,IAAI,CAACM,UAAU,CAACY,sBAAsB,CAAErB,KAAK,CAAE,CAAE,CAAC,CAAC,CAC1F,CACJ,CACJ,CAEA;AACA,GAAIG,IAAI,CAACM,UAAU,CAACe,MAAM,EAAI,CAAC,CAAE,CAC7BhC,eAAe,CAAC,CAAES,KAAK,CAAE,QAAQ,CAAED,KAAK,CAAEG,IAAI,CAACM,UAAU,CAACe,MAAO,CAAC,CAAC,CACvE,CAAC,IAAM,CACHhC,eAAe,CAAC,CAAES,KAAK,CAAE,UAAU,CAAED,KAAK,CAAEG,IAAI,CAACM,UAAU,CAACe,MAAO,CAAC,CAAC,CACzE,CAEA;AACAlB,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAC7B,CAAC,IAAM,CAEH;AACAkB,4BAA4B,EAAE,CAClC,CAAC,sDACJ,4CACDpB,SAAS,EAAE,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,GAAMO,uBAAsB,CAAG,QAAzBA,uBAAsB,EAAS,CAEjC;AACA,GAAI,CAEA;AACA,GAAIc,aAAY,CAAG,EAAE,CAErB;AACAlE,UAAU,CAACmE,UAAU,CAAC,qBAAqB,CAAC,CAACC,IAAI,CAC7C,SAAAC,KAAK,CAAI,CAEL;AACA,GAAI,CAACA,KAAK,CAACC,KAAK,CAAE,CAEd;AACA,GAAID,KAAK,CAAC,MAAM,CAAC,CAAClB,MAAM,CAAG,CAAC,CAAE,CAE1B;AACA,IAAK,GAAIoB,MAAK,CAAG,CAAC,CAAEA,KAAK,CAAGF,KAAK,CAACG,IAAI,CAACrB,MAAM,CAAEoB,KAAK,EAAE,CAAE,CAEpD;AACA,GAAME,QAAO,CAAGJ,KAAK,CAACG,IAAI,CAACD,KAAK,CAAC,CAEjC;AACAL,YAAY,CAACQ,IAAI,CAAC,CAAEjC,KAAK,CAAEgC,OAAO,CAACxB,UAAU,CAACK,MAAM,CAAEd,KAAK,CAAEiC,OAAO,CAAClB,EAAG,CAAC,CAAC,CAC9E,CAEA;AACA/B,iBAAiB,CAAC0C,YAAY,CAAC,CACnC,CACJ,CAAC,IAAM,CACHlD,aAAa,CAAC,CAAEJ,KAAK,CAAE,kBAAkB,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,0BAA0B,CAAEC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CAC9K,CACJ,CAAC,CACJ,CACL,CAAE,MAAOX,KAAK,CAAE,CACZ;AAAA,CAER,CAAC,CAED;AACA,GAAMV,0BAAyB,CAAG,QAA5BA,0BAAyB,EAAS,CACpC5D,UAAU,CAACmE,UAAU,CAAC,8BAA8B,CAAG,CAAC,CAAC,CAACC,IAAI,CAC1D,SAAAC,KAAK,CAAI,CAEL;AACA,GAAI,CAACA,KAAK,CAACC,KAAK,CAAE,CAEd;AACA,GAAIJ,aAAY,CAAG,EAAE,CACrB,GAAIgB,WAAU,CAAGb,KAAK,CAACG,IAAI,CAE3B;AACA,IAAK,GAAID,MAAK,CAAG,CAAC,CAAEA,KAAK,CAAGW,UAAU,CAAC/B,MAAM,CAAEoB,KAAK,EAAE,CAAE,CAEpD;AACA,GAAME,QAAO,CAAGS,UAAU,CAACX,KAAK,CAAC,CAEjC;AACAL,YAAY,CAACQ,IAAI,CAAC,CAAEjC,KAAK,CAAEgC,OAAO,CAACxB,UAAU,CAACK,MAAM,CAAEd,KAAK,CAAEiC,OAAO,CAAClB,EAAG,CAAC,CAAC,CAC9E,CAEA;AACAzB,oBAAoB,CAACoC,YAAY,CAAC,CAEtC,CAAC,IAAM,CACHlD,aAAa,CAAC,CAAEJ,KAAK,CAAE,8BAA8B,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,yBAAyB,CAAEjC,IAAI,CAAE,CAAEA,IAAI,CAAJA,IAAK,CAAC,CAAEkC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CACrMnC,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAC7B,CACJ,CAAC,CACJ,CACL,CAAC,CAED;AACA,GAAMe,gBAAe,CAAG,QAAlBA,gBAAe,EAAS,CAC1B9D,UAAU,CAACmE,UAAU,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAC1C,SAAAC,KAAK,CAAI,CAEL;AACA,GAAI,CAACA,KAAK,CAACC,KAAK,CAAE,CAEd;AACA,GAAIJ,aAAY,CAAG,EAAE,CACrB,GAAIgB,WAAU,CAAGb,KAAK,CAACG,IAAI,CAE3B;AACA,IAAK,GAAID,MAAK,CAAG,CAAC,CAAEA,KAAK,CAAGW,UAAU,CAAC/B,MAAM,CAAEoB,KAAK,EAAE,CAAE,CAEpD;AACA,GAAME,QAAO,CAAGS,UAAU,CAACX,KAAK,CAAC,CAEjC;AACAL,YAAY,CAACQ,IAAI,CAAC,CAAEjC,KAAK,CAAEgC,OAAO,CAACxB,UAAU,CAACK,MAAM,CAAEd,KAAK,CAAEiC,OAAO,CAAClB,EAAG,CAAC,CAAC,CAC9E,CAEA;AACAzB,oBAAoB,CAACoC,YAAY,CAAC,CACtC,CAAC,IACI,CACDlD,aAAa,CAAC,CAAEJ,KAAK,CAAE,gCAAgC,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,6BAA6B,CAAEjC,IAAI,CAAE,CAAEA,IAAI,CAAJA,IAAK,CAAC,CAAEkC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CAC3MnC,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAC7B,CACJ,CAAC,CACJ,CACL,CAAC,CAED;AACA,GAAMgB,iBAAgB,CAAG,QAAnBA,iBAAgB,EAAS,CAC3B/D,UAAU,CAACmE,UAAU,CAAC,2BAA2B,CAAG,CAAC,CAAC,CAACC,IAAI,CACvD,SAAAC,KAAK,CAAI,CAEL;AACA,GAAI,CAACA,KAAK,CAACC,KAAK,CAAE,CAEd;AACA,GAAIJ,aAAY,CAAG,EAAE,CACrB,GAAIgB,WAAU,CAAGb,KAAK,CAACG,IAAI,CAE3B;AACA,IAAK,GAAID,MAAK,CAAG,CAAC,CAAEA,KAAK,CAAGW,UAAU,CAAC/B,MAAM,CAAEoB,KAAK,EAAE,CAAE,CAEpD;AACA,GAAME,QAAO,CAAGS,UAAU,CAACX,KAAK,CAAC,CAEjC;AACAL,YAAY,CAACQ,IAAI,CAAC,CAAEjC,KAAK,CAAEgC,OAAO,CAACxB,UAAU,CAACK,MAAM,CAAEd,KAAK,CAAEiC,OAAO,CAAClB,EAAG,CAAC,CAAC,CAC9E,CAEA;AACAzB,oBAAoB,CAACoC,YAAY,CAAC,CACtC,CAAC,IACI,CACDlD,aAAa,CAAC,CAAEJ,KAAK,CAAE,gCAAgC,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,6BAA6B,CAAEjC,IAAI,CAAE,CAAEA,IAAI,CAAJA,IAAK,CAAC,CAAEkC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CAC3MnC,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAC7B,CACJ,CAAC,CACJ,CACL,CAAC,CAED,GAAMkB,6BAA4B,CAAG,QAA/BA,6BAA4B,EAAS,CAEvC;AACAnB,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAEzB;AACAK,sBAAsB,EAAE,CAC5B,CAAC,CAED,GAAMJ,kBAAiB,CAAG,QAApBA,kBAAiB,EAAS,CAC5B,GAAI,CACA,GAAMwB,KAAI,CAAG,CACT,MAAM,CAAE,CACJ,MAAM,CAAE,eAAe,CACvB,YAAY,CAAE,CACV,QAAQ,CAAE,uDACd,CACJ,CACJ,CAAC,CAED;AACAxE,UAAU,CAACmF,gBAAgB,CAAC,4BAA4B,CAAEX,IAAI,CAAC,CAACJ,IAAI,CAChE,SAAAC,KAAK,CAAI,CACL,GAAI,CAACA,KAAK,CAACC,KAAK,CAAE,CACd,GAAID,KAAK,CAAC,MAAM,CAAC,CAAClB,MAAM,CAAG,CAAC,CAAE,CAC1BkB,KAAK,CAAC,MAAM,CAAC,CAACe,MAAM,CAAC,SAAAZ,IAAI,QAAIA,KAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAACb,QAAQ,CAAC,4BAA4B,CAAC,GAAC,CAAC0B,GAAG,CAAC,SAAAC,YAAY,QAC9G/E,kBAAiB,CAAC+E,YAAY,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,EACzD,CAAC,CACFjB,KAAK,CAAC,MAAM,CAAC,CAACe,MAAM,CAAC,SAAAZ,IAAI,QAAIA,KAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAACb,QAAQ,CAAC,4BAA4B,CAAC,GAAC,CAAC0B,GAAG,CAAC,SAAAC,YAAY,QAC9G7E,kBAAiB,CAAC6E,YAAY,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,EACzD,CAAC,CAEN,CACJ,CAAC,IAAM,CACHtE,aAAa,CAAC,CAAEJ,KAAK,CAAE,cAAc,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,mBAAmB,CAAEC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CACnK,CACJ,CAAC,CACJ,CACL,CAAE,MAAOX,KAAK,CAAE,CACZ;AAAA,CAER,CAAC,CAED,GAAMiB,YAAW,CAAG,QAAdA,YAAW,CAAIC,OAAO,CAAK,CAE7B;AACA,GAAIhB,KAAI,CAER;AACA,GAAI,CAACnD,sBAAsB,CAACmB,KAAK,CAAE,CAE/B;AACAN,6BAA6B,CAAC,wCAAwC,CAAC,CACvE,MAAO,MAAK,CAChB,CAAC,IAAM,IAAIb,sBAAsB,CAACmB,KAAK,CAAE,CAErC;AACAN,6BAA6B,CAAC,IAAI,CAAC,CAEnC;AACA,GAAMuD,4BAA2B,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAC7C,GAAMC,cAAa,CAAGhC,QAAQ,CAACrC,sBAAsB,CAACmB,KAAK,CAAC,CAE5D;AACA,GAAIiD,2BAA2B,CAAC9B,QAAQ,CAAC+B,aAAa,CAAC,CAAE,CAErD;AACA,GAAI/D,yBAAyB,CAACa,KAAK,CAAE,CAEjC;AACAJ,gCAAgC,CAAC,IAAI,CAAC,CAEtC;AACA,GAAIL,eAAe,CAACS,KAAK,CAAE,CAEvB;AACAF,qBAAqB,CAAC,IAAI,CAAC,CAE3B;AACAkC,IAAI,CAAG,CACH,MAAM,CAAE,CACJ,MAAM,CAAE,8BAA8B,CACtC,YAAY,CAAE,CACV,SAAS,CAAEgB,OAAO,CAACtC,OAAO,CAC1B,oBAAoB,CAAE7B,sBAAsB,CAACmB,KAAK,CAClD,wBAAwB,CAAEb,yBAAyB,CAACa,KAAK,CACzD,QAAQ,CAAET,eAAe,CAACS,KAC9B,CACJ,CACJ,CAAC,CAEL,CAAC,IAAM,CAEH;AACAF,qBAAqB,CAAC,oCAAoC,CAAC,CAC3D,MAAO,MAAK,CAChB,CACJ,CAAC,IAAM,CAEH;AACAF,gCAAgC,CAAC,4CAA4C,CAAC,CAC9E,MAAO,MAAK,CAChB,CACJ,CAAC,IAAM,CAEH;AACA,GAAIL,eAAe,CAACS,KAAK,CAAE,CAEvB;AACAF,qBAAqB,CAAC,IAAI,CAAC,CAE3B;AACAkC,IAAI,CAAG,CACH,MAAM,CAAE,CACJ,MAAM,CAAE,8BAA8B,CACtC,YAAY,CAAE,CACV,SAAS,CAAEgB,OAAO,CAACtC,OAAO,CAC1B,oBAAoB,CAAE7B,sBAAsB,CAACmB,KAAK,CAClD,QAAQ,CAAET,eAAe,CAACS,KAC9B,CACJ,CACJ,CAAC,CAEL,CAAC,IAAM,CAEH;AACAF,qBAAqB,CAAC,oCAAoC,CAAC,CAC3D,MAAO,MAAK,CAChB,CACJ,CACJ,CAEA;AACAQ,MAAM,CAACC,WAAW,CAAC,IAAI,CAAC,CAExB;AACA/C,UAAU,CAAC2F,UAAU,CAAC,8BAA8B,CAAEnB,IAAI,CAAC,CAACJ,IAAI,CAC5D,SAAAC,KAAK,CAAI,CAEL;AACAvB,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAEzB;AACA,GAAI,CAACsB,KAAK,CAACC,KAAK,CAAE,CACdtD,aAAa,CAAC,CAAEJ,KAAK,CAAE,qCAAqC,CAAEC,OAAO,CAAE,mBAAmB,CAAEC,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,yBAAyB,CAAEC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACY,KAAM,CAAC,CAAC,CAC7L,CAAC,IAAM,CACH5E,aAAa,CAAC,CAAEJ,KAAK,CAAE,8CAA8C,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE+D,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CACpK,CAEJ,CAAC,CACJ,CACL,CAAC,CAED,GAAMY,gBAAe,CAAG,QAAlBA,gBAAe,CAAIL,OAAO,CAAK,CAEjC;AACA,GAAMjC,GAAE,CAAGZ,IAAI,CAACY,EAAE,CAElB;AACA,GAAIiB,KAAI,CAER;AACAA,IAAI,CAAG,CACH,MAAM,CAAE,CACJ,MAAM,CAAE,8BAA8B,CACtC,YAAY,CAAE,CACV,SAAS,CAAErD,wBAAwB,CACnC,oBAAoB,CAAEE,sBAAsB,CAACmB,KAAK,CAClD,wBAAwB,CAAEb,yBAAyB,CAACa,KAAK,CACzD,QAAQ,CAAET,eAAe,CAACS,KAC9B,CACJ,CACJ,CAAC,CAED;AACAM,MAAM,CAACC,WAAW,CAAC,IAAI,CAAC,CAExB/C,UAAU,CAAC8F,aAAa,CAAC,8BAA8B,CAAEvC,EAAE,CAAEiB,IAAI,CAAC,CAACJ,IAAI,CACnE,SAAAC,KAAK,CAAI,CAEL;AACAvB,MAAM,CAACC,WAAW,CAAC,KAAK,CAAC,CAEzB;AACA,GAAI,CAACsB,KAAK,CAACC,KAAK,CAAE,CACdtD,aAAa,CAAC,CAAEJ,KAAK,CAAE,oDAAoD,CAAEC,OAAO,CAAE,wBAAwB,CAAEC,IAAI,CAAE,IAAI,CAAE8D,QAAQ,CAAE,yBAAyB,CAAEC,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACY,KAAM,CAAC,CAAC,CACjN,CAAC,IACI,CACD5E,aAAa,CAAC,CAAEJ,KAAK,CAAE,mDAAmD,CAAEC,OAAO,CAAEwD,KAAK,CAACC,KAAK,CAACK,QAAQ,EAAE,CAAE7D,IAAI,CAAE,IAAI,CAAE+D,KAAK,CAAEC,MAAM,CAACC,SAAS,CAACC,WAAW,CAACC,KAAM,CAAC,CAAC,CACzK,CAEJ,CAAC,CACJ,CACL,CAAC,CAED,GAAMc,4BAA2B,CAAG,QAA9BA,4BAA2B,CAAIC,CAAC,CAAK,CACvC5E,wBAAwB,CAAC4E,CAAC,CAACC,MAAM,CAACzD,KAAK,CAAC,CACxCtB,gBAAgB,CAAC8E,CAAC,CAACC,MAAM,CAACzD,KAAK,CAACW,MAAM,CAAC,CAC3C,CAAC,CAED,GAAM+C,2BAA0B,CAAG,QAA7BA,2BAA0B,CAAIC,CAAC,CAAK,CAEtC;AACA,GAAIxD,IAAI,EAAI,IAAI,CAAE,CAEd;AACArB,sBAAsB,CAAC6E,CAAC,CAAC,CAEzB;AACA,GAAIA,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAElB;AACAoB,yBAAyB,EAAE,CAE3B;AACAlC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAd,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAsB,eAAe,EAAE,CAEjB;AACApC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAuB,gBAAgB,EAAE,CAElB;AACArC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CACJ,CAAC,IAAM,IAAIyE,CAAC,EAAI,IAAI,CAAE,CAElB;AACA7E,sBAAsB,CAAC6E,CAAC,CAAC,CAEzB;AACA,GAAIA,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAElB;AACAoB,yBAAyB,EAAE,CAE3B;AACAlC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAd,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAsB,eAAe,EAAE,CAEjB;AACApC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CAAC,IAAM,IAAIyE,CAAC,CAAC3D,KAAK,EAAI,GAAG,CAAE,CAAE;AAEzB;AACAuB,gBAAgB,EAAE,CAElB;AACArC,6BAA6B,CAAC,IAAI,CAAC,CACvC,CACJ,CAAC,IAAM,CACH;AAAA,CAER,CAAC,CAED,GAAM0E,8BAA6B,CAAG,QAAhCA,8BAA6B,CAAID,CAAC,CAAK,CAEzC;AACAvE,yBAAyB,CAACuE,CAAC,CAAC,CAChC,CAAC,CAED,GAAME,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAIF,CAAC,CAAK,CAE/B;AACAnE,eAAe,CAACmE,CAAC,CAAC,CACtB,CAAC,CAED;AACA,QAASG,qBAAoB,CAACC,GAAG,CAAE,CAE/B,GAAMC,OAAM,CAAG1B,MAAM,CAACC,SAAS,CAAC0B,SAAS,CAACC,qBAAqB,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,SAAAC,WAAW,CAAI,CAC1F,GAAIN,GAAG,CAAC5C,QAAQ,CAACkD,WAAW,CAAC,CAAE,CAC3B,MAAO,KAAI,CACf,CAEA,MAAO,MAAK,CAChB,CAAC,CAAC,CAEF,MAAOL,OAAM,CACjB,CAEA,mBACI,wCACK,KAAC,OAAO,IAAG,cACX,KAAC,YAAY,EAAC,KAAK,CAAE9F,QAAS,EAAG,cACjC,KAAC,QAAQ,EAAC,IAAI,CAAEK,aAAc,EAAG,cAClC,KAAC,MAAM,EACH,aAAa,CAAE,CACXmC,OAAO,CAAE,EACb,CAAE,CACF,kBAAkB,MAClB,QAAQ,CAAE,kBAACsC,OAAO,CAAK,CAEnB;AACA,GAAIsB,QAAO,CAAG,CAAC,CAAC,CAEhB,GAAInE,IAAI,EAAI,IAAI,CAAE,CAEd;AACA,GAAI,CAACxB,wBAAwB,CAAE,CAC3B2F,OAAO,CAAC5D,OAAO,CAAG,wBAAwB,CAC9C,CAEA;AAAA,IACK,IAAI/B,wBAAwB,CAACgC,MAAM,EAAI7C,iBAAiB,CAAE,CAC3DwG,OAAO,CAAC5D,OAAO,CAAG,oCAAoC,CAAG5C,iBAAiB,CAAG,aAAa,CAC9F,CAEA;AACA,GAAIa,wBAAwB,CAAE,CAE1B;AACA,GAAImF,oBAAoB,CAACnF,wBAAwB,CAAC,CAAE,CAChD2F,OAAO,CAAC5D,OAAO,CAAG,4BAA4B,CAClD,CACJ,CAEJ,CAAC,IAAM,CAEH;AACAhC,gBAAgB,CAACsE,OAAO,CAACtC,OAAO,CAACC,MAAM,CAAC,CAExC;AACA,GAAI,CAACqC,OAAO,CAACtC,OAAO,CAAE,CAClB4D,OAAO,CAAC5D,OAAO,CAAG,wBAAwB,CAC9C,CAEA;AAAA,IACK,IAAIsC,OAAO,CAACtC,OAAO,CAACC,MAAM,EAAI7C,iBAAiB,CAAE,CAClDwG,OAAO,CAAC5D,OAAO,CAAG,oCAAoC,CAAG5C,iBAAiB,CAAG,aAAa,CAC9F,CAEA;AACA,GAAIkF,OAAO,CAACtC,OAAO,CAAE,CAEjB;AACA,GAAIoD,oBAAoB,CAACd,OAAO,CAACtC,OAAO,CAAC,CAAE,CACvC4D,OAAO,CAAC5D,OAAO,CAAG,4BAA4B,CAClD,CACJ,CACJ,CAEA;AACA,MAAO4D,QAAO,CAClB,CAAE,CACF,QAAQ,CAAE,kBAACtB,OAAO,MAAoB,IAAhBuB,UAAS,MAATA,SAAS,CAE3B,GAAIpE,IAAI,EAAI,IAAI,CAAE,CACdkD,eAAe,CAACL,OAAO,CAAC,CAC5B,CAAC,IAAM,CACHD,WAAW,CAACC,OAAO,CAAC,CACxB,CACJ,CAAE,UAGD,4BAAGwB,OAAM,OAANA,MAAM,oBACN,KAAC,IAAI,wBACD,aAAK,SAAS,CAAC,oCAAoC,wBAC/C,aAAK,SAAS,CAAC,oBAAoB,wBAC/B,YAAK,SAAS,CAAC,WAAW,uBACtB,YAAK,SAAS,CAAC,eAAe,uBAC1B,YAAK,aAAW,YAAY,uBACxB,YAAI,SAAS,CAAC,gCAAgC,wBAC1C,YAAI,KAAK,CAAC,iBAAiB,4BAAE,4CAA6B,GAAK,cAC/D,YAAI,KAAK,CAAC,iBAAiB,4BAAE,mCAAuB,GAAK,cACzD,YAAI,KAAK,CAAC,iBAAiB,4BAAE,MAAC,IAAI,EAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,0BAA4B,4BAAE,gEAAoD,GAAO,GAAK,cAC3K,YAAI,KAAK,CAAC,iBAAiB,4BAAE,yBAAQrE,IAAI,EAAI,IAAI,CAAG,YAAY,CAAG,OAAO,qCAAwC,GAAK,GACtH,EACH,EACJ,EACJ,cACN,YAAK,SAAS,CAAC,cAAc,uBACzB,WAAI,SAAS,CAAC,aAAa,8BAAmB,EAC5C,cACN,YAAK,SAAS,CAAC,eAAe,uBAC1B,aAAK,SAAS,CAAC,KAAK,wBAEhB,YAAK,SAAS,CAAC,WAAW,uBACtB,aAAK,SAAS,CAAC,YAAY,wBAEvB,cAAO,OAAO,CAAC,SAAS,qBAAgB,cACxC,KAAC,KAAK,EAAC,EAAE,CAAC,UAAU,CAChB,SAAS,CAAC,mBAAmB,CAC7B,EAAE,CAAC,SAAS,CACZ,IAAI,CAAC,SAAS,CACd,IAAI,CAAC,GAAG,CACR,WAAW,CAAC,sCAAmC,CAC/C,SAAS,CAAEnC,iBAAkB,CAC7B,SAAS,CAAEF,iBAAkB,CAC7B,KAAK,CAAEa,wBAAyB,CAChC,QAAQ,CAAE4E,2BAA4B,EACjC,cACT,YAAK,SAAS,CAAC,YAAY,uBACvB,cAAM,SAAS,CAAC,cAAc,WAAE9E,aAAa,OAAKT,iBAAiB,GAAQ,EACzE,cACN,KAAC,YAAY,EAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAE,wCAAO,aAAM,SAAS,CAAC,aAAa,UAAEwG,MAAM,CAAC9D,OAAO,EAAQ,EAAE,EAAG,GACvG,EACJ,cAEN,YAAK,SAAS,CAAC,UAAU,uBACrB,aAAK,SAAS,CAAC,YAAY,wBACvB,eAAO,OAAO,CAAC,iBAAiB,2CAAiB,aAAM,SAAS,CAAC,aAAa,eAAS,GAAQ,CAC7F7B,sBAAsB,cACpB,KAAC,MAAM,EACH,EAAE,CAAC,iBAAiB,CACpB,IAAI,CAAC,iBAAiB,CACtB,OAAO,CAAE,KAAM,CACf,KAAK,CAAEA,sBAAuB,CAC9B,WAAW,CAAC,YAAY,CACxB,gBAAgB,CAAE,kCAAM,WAAW,EAAC,CACpC,OAAO,CAAEE,iBAAiB,CAAC8D,GAAG,CAAC,SAAAW,CAAC,QAC3B,CAAEvD,KAAK,CAAEuD,CAAC,CAACvD,KAAK,CAAED,KAAK,CAAEwD,CAAC,CAACxD,KAAM,CAAC,EAAC,CACtC,CACF,QAAQ,CAAE,kBAACwD,CAAC,QAAKE,2BAA0B,CAACF,CAAC,CAAC,EAAC,EACjD,CACA,IAAI,CACT/D,6BAA6B,cAC1B,aAAM,SAAS,CAAC,aAAa,UAAEA,6BAA6B,EAAQ,CAClE,IAAI,GACR,EACJ,CAELR,6BAA6B,EAAI,IAAI,cAElC,YAAK,SAAS,CAAC,UAAU,uBACrB,aAAK,SAAS,CAAC,YAAY,wBACvB,eAAO,OAAO,CAAC,qBAAqB,kDAAwB,aAAM,SAAS,CAAC,aAAa,eAAS,GAAQ,CACxGE,yBAAyB,cACvB,KAAC,MAAM,EACH,EAAE,CAAC,qBAAqB,CACxB,IAAI,CAAC,qBAAqB,CAC1B,OAAO,CAAE,KAAM,CACf,KAAK,CAAEA,yBAA0B,CACjC,WAAW,CAAC,YAAY,CACxB,gBAAgB,CAAE,kCAAM,WAAW,EAAC,CACpC,OAAO,CAAEE,oBAAoB,CAACwD,GAAG,CAAC,SAAAW,CAAC,QAC9B,CAAEvD,KAAK,CAAEuD,CAAC,CAACvD,KAAK,CAAED,KAAK,CAAEwD,CAAC,CAACxD,KAAM,CAAC,EAAC,CACtC,CACF,QAAQ,CAAE,kBAACwD,CAAC,QAAKI,8BAA6B,CAACJ,CAAC,CAAC,EAAC,EACpD,CACA,IAAI,CACT7D,gCAAgC,cAC7B,aAAM,SAAS,CAAC,aAAa,UAAEA,gCAAgC,EAAQ,CACrE,IAAI,GACR,EACJ,CACJ,IAAI,cAEV,YAAK,SAAS,CAAC,UAAU,uBACrB,aAAK,SAAS,CAAC,YAAY,wBACvB,eAAO,OAAO,CAAC,QAAQ,kCAAQ,aAAM,SAAS,CAAC,aAAa,eAAS,GAAQ,CAC3EJ,eAAe,cACb,KAAC,MAAM,EACH,EAAE,CAAC,QAAQ,CACX,IAAI,CAAC,QAAQ,CACb,OAAO,CAAE,KAAM,CACf,KAAK,CAAEA,eAAgB,CACvB,WAAW,CAAC,YAAY,CACxB,gBAAgB,CAAE,kCAAM,WAAW,EAAC,CACpC,OAAO,CAAEQ,eAAe,CAAC8C,GAAG,CAAC,SAAAW,CAAC,QACzB,CAAEvD,KAAK,CAAEuD,CAAC,CAACvD,KAAK,CAAED,KAAK,CAAEwD,CAAC,CAACxD,KAAM,CAAC,EAAC,CACtC,CACF,QAAQ,CAAE,kBAACwD,CAAC,QAAKK,oBAAmB,CAACL,CAAC,CAAC,EAAC,EAC1C,CACA,IAAI,CACT3D,qBAAqB,cAClB,aAAM,SAAS,CAAC,aAAa,UAAEA,qBAAqB,EAAQ,CAC1D,IAAI,GACR,EACJ,GACJ,EACJ,GACJ,cAEN,aAAK,SAAS,CAAC,sDAAsD,wBACjE,eAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,6BAA6B,UACxDM,IAAI,EAAI,IAAI,CAAG,YAAY,CAAG,OAAO,EACjC,cACT,KAAC,IAAI,EAAC,EAAE,CAAE,yBAA0B,CAAC,SAAS,CAAC,wBAAwB,uBACnE,eAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,qCAAqC,sBAAmB,EACrF,GACL,GACJ,EACH,EACV,EACI,GACV,CAEX,CAAC"},"metadata":{},"sourceType":"module"}