{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\Herramientas\\\\ActuacionParametrosPlantillaForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport DataTable from 'react-data-table-component';\nimport GenericApi from '../../Api/Services/GenericApi';\nimport ParametrosMasApi from \"../../Api/Services/ParametrosMasApi\";\nimport Spinner from '../../Utils/Spinner';\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\nimport '../../Utils/Constants';\nimport { getUser } from '../../Utils/Common';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ActuacionParametrosPlantillaForm(props) {\n  _s();\n  const location = useLocation();\n  const {\n    from\n  } = location.state;\n  let radicado = from.radicado;\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n  let id_etapa = from.idEtapa;\n  const fechaRegistro = from.fechaRegistro;\n  const fechaIngreso = from.fechaIngreso;\n  const dependencia = getUser().nombre_dependencia ? getUser().nombre_dependencia.nombre : \"\";\n  const registradoPor = from.registradoPor;\n  const vigencia = from.vigencia;\n  const generadoPor = getUser().nombre_completo ? getUser().nombre_completo : \"\";\n  const [modalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [getListaParametros, setListaParametros] = useState();\n  const [getListaCamposPorParametroTemporal, setListaCamposPorParametroTemporal] = useState({\n    data: []\n  });\n  const [getListaCamposPorCamposTemporal, setListaCamposPorCamposTemporal] = useState({\n    data: []\n  });\n  //const [getListaCamposPorParametroDefinitiva, setListaCamposPorParametroDefinitiva] = useState({ data: [] });\n  const [getAntecedentesLista, setAntecedentesLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getInteresadosLista, setInteresadosLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getEntidadesInvestigadoLista, setEntidadesInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getCargosInvestigadoLista, setCargosInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getEntidadInvestigadoLista, setEntidadInvestigadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getParametrosCampos, setParametrosCampos] = useState();\n  const [getListaParametrosBaseDatos, setListaParametrosBaseDatos] = useState({\n    data: []\n  });\n  const [getPrueba, setPrueba] = useState(true);\n  const [getExistenDatosResultados, setExistenDatosResultados] = useState(true);\n  const [getCamposAdicionales, setCamposAdicionales] = useState([]);\n  const [getMaxDate, setMaxDate] = useState();\n  const [value, setValue] = useState(moment().format('YYYY-MM-DD'));\n  const [getIsLoading, setIsLoading] = useState(true);\n  let numeroLlamados = 0;\n  let numeroTotalLlamados = 3;\n  const [getTablaParametrosData, setTablaParametrosData] = useState([{\n    grupo: \"\",\n    datos: [],\n    titulo: []\n  }]);\n\n  // Metodo encargado de cargar la informacion general del formulario\n  useEffect(() => {\n    // Se setea el maximo de fecha\n    setMaxDate(new Date().toISOString().split(\"T\")[0]);\n\n    // Se inicializa la funcion asyncrona\n    async function fetchData() {\n      // Metodo encargado de cargar los parametros de la plantilla\n      cargarTablaParametrosActuaciones();\n    }\n\n    // Se llama el metodo\n    fetchData();\n  }, [props.id_mas_actuacion]);\n\n  // Metodo encargado de cargar los parametros generales de la plantilla de la BD\n  const cargarTablaParametrosActuaciones = () => {\n    // Se inicializa el array\n    var array = [];\n\n    // Se inicializa la API\n    GenericApi.getGeneric('parametro-campos').then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n      setCamposAdicionales([]);\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se recorre el array para insertar los valores necesarios\n        for (let index = 0; index < datos.data.length; index++) {\n          // Se captura los datos por posicion\n          const element = datos.data[index].attributes;\n          const title = element.nombre_campo;\n          const estado = element.estado == \"1\" ? true : false;\n          const type = element.type;\n          const value = validarValueParametros(type, estado);\n\n          // Se añade el dato al array general\n          array.push({\n            title: title,\n            value: value,\n            type: type,\n            check: estado\n          });\n        }\n\n        // Se setea la respuesta en la constante\n        setListaParametrosBaseDatos(array);\n\n        // Se generan la lista de parametros del documento\n        cargarParametros(array);\n      }\n    });\n  };\n\n  // Metodo encargado de retorna el valor por el elemento\n  const validarValueParametros = (element, estado) => {\n    // Se inicializa la variable\n    let valor;\n\n    // Se valida por el elemento\n    if ((element == \"Sinproc\" || element == \"Número de radicado\" || element == \"Radicación\" || element == \"Radicado\") && estado) {\n      valor = radicado;\n    } else if (element == \"Usuario\" && estado) {\n      valor = registradoPor;\n    } else if ((element == \"Dependencia Origen\" || element == \"Dependencia\") && estado) {\n      valor = dependencia;\n    } else if (element == \"Vigencia\" && estado) {\n      valor = vigencia;\n    } else if (element == \"Fecha de Registro\" && estado) {\n      valor = fechaRegistro;\n    } else if (element == \"Fecha de Ingreso\" && estado) {\n      valor = fechaIngreso;\n    } else if (element == \"Generado\" && estado) {\n      valor = generadoPor;\n    } else if ((element == \"Número de auto (generado despues de aprobación)\" || element == \"Auto\") && estado) {\n      valor = \"${numero_de_auto}\";\n    }\n\n    // Se retorna el valor\n    return valor;\n  };\n  const handleChangeInteresados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getInteresadosLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setInteresadosLista(valorId);\n    let val = getInteresadosLista.map(p => {\n      if (p.checked == true) {\n        var primerApellido = p.attributes.primer_apellido != null ? p.attributes.primer_apellido : \"\";\n        var segundoApellido = p.attributes.segundo_apellido != null ? p.attributes.segundo_apellido : \"\";\n        var primerNombre = p.attributes.primer_nombre != null ? p.attributes.primer_nombre : \"\";\n        var segundoNombre = p.attributes.segundo_nombre != null ? p.attributes.segundo_nombre : \"\";\n        var sujetoProcesalNombre = p.attributes.sujeto_procesal_nombre != \"\" ? p.attributes.sujeto_procesal_nombre : \"\";\n        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n        var nombre = nombreCompleto;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  function checkeoAutomaticoInteresados(parametro, id_campo) {\n    setInteresadosLista(getInteresadosLista);\n    var primerApellido = getInteresadosLista[0].attributes.primer_apellido != null ? getInteresadosLista[0].attributes.primer_apellido : \"\";\n    var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != null ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\n    var primerNombre = getInteresadosLista[0].attributes.primer_nombre != null ? getInteresadosLista[0].attributes.primer_nombre : \"\";\n    var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != null ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\n    var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != null ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\n    var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\n    var nombre = nombreCompleto;\n\n    // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoAntecedentes(parametro, id_campo) {\n    setAntecedentesLista(getAntecedentesLista);\n    var nombre = `${getAntecedentesLista[0].attributes.descripcion}`;\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosNombre(parametro, id_campo) {\n    setEntidadInvestigadoLista(getEntidadesInvestigadoLista);\n    var nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosCargo(parametro, id_campo) {\n    setCargosInvestigadoLista(getCargosInvestigadoLista);\n    var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoInvestigadosEntidad(parametro, id_campo) {\n    setEntidadesInvestigadoLista(getEntidadInvestigadoLista);\n    var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  function checkeoAutomaticoFechaAntecedentes(parametro, id_campo) {\n    setAntecedentesLista(getAntecedentesLista);\n    var nombre = `${getAntecedentesLista[0].attributes.fecha_creado}`;\n    if (nombre == \"null\") {\n      nombre = \"NO_APLICA\";\n    }\n    selectChangeListaCampos(parametro, id_campo, nombre);\n  }\n  const handleChangeAntecedentes = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getAntecedentesLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setAntecedentesLista(valorId);\n    let val = getAntecedentesLista.map(p => {\n      if (p.checked == true) {\n        var nombre = `${p.attributes.descripcion}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeFechaAntecedentes = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getAntecedentesLista.map(item => {\n      if (value == item.id) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setAntecedentesLista(valorId);\n    let val = getAntecedentesLista.map(p => {\n      if (p.checked == true) {\n        var nombre = `${p.attributes.fecha_creado}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getEntidadesInvestigadoLista.map(item => {\n      if (value == item.attributes.nombre_investigado) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setEntidadesInvestigadoLista(valorId);\n    let val = getEntidadesInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.nombre_investigado}`;\n        var nombre = `${p.attributes.nombre_investigado}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeCargosInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getCargosInvestigadoLista.map(item => {\n      if (value == item.attributes.cargo) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setCargosInvestigadoLista(valorId);\n    let val = getCargosInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.cargo}`;\n        var nombre = `${p.attributes.cargo}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const handleChangeEntidadesInvestigados = (e, parametro, id_campo) => {\n    const {\n      value,\n      checked\n    } = e.target;\n    let valorId = getEntidadInvestigadoLista.map(item => {\n      if (value == item.attributes.nombre_entidad) {\n        item.checked = checked;\n      }\n      return item;\n    });\n    setCargosInvestigadoLista(valorId);\n    let val = getEntidadInvestigadoLista.map(p => {\n      if (p.checked == true) {\n        var value = `${p.attributes.nombre_entidad}`;\n        var nombre = `${p.attributes.nombre_entidad}`;\n        return nombre;\n      }\n    }).filter(x => x != undefined);\n    selectChangeListaCampos(parametro, id_campo, val.toString());\n  };\n  const onChangeValue = (value, dato, parametro, grupo, principal, pos) => {\n    const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\n    if (value) {\n      nuevosResultados.resultados[parametro][pos].seleccionar = true;\n    } else {\n      nuevosResultados.resultados[parametro][pos].seleccionar = false;\n    }\n    if (principal) {\n      const inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\n      // Deshabilitar los inputs seleccionados\n      inputs.forEach(input => {\n        input.disabled = !value;\n        let datosEnvio = input.id.split('$$$');\n        nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\n      });\n    }\n    setListaParametros(nuevosResultados);\n    modificarListaCampos(value, dato ? dato : 'SIN DATOS', parametro, pos);\n    removerInpuntsLista();\n    establecerTabla(nuevosResultados, []);\n  };\n  const modificarListaCampos = (value, dato, parametro, pos) => {\n    let index = getListaCamposPorParametroTemporal.data.findIndex(data => data.param === parametro);\n    if (index > -1) {\n      if (getListaCamposPorParametroTemporal.data[index].value) {\n        let listaSplit = getListaCamposPorParametroTemporal.data[index].value.replace(/\\s/g, '').split('$$$');\n        let listaSplitIndex = getListaCamposPorParametroTemporal.data[index].orden.toString().split('$$$');\n        let listaSplitConEspacios = getListaCamposPorParametroTemporal.data[index].value.split('$$$');\n        let auxDato = dato.replace(/\\s/g, '');\n        if (value) {\n          getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + dato;\n          getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + pos;\n        } else {\n          getListaCamposPorParametroTemporal.data[index].value = null;\n          getListaCamposPorParametroTemporal.data[index].orden = null;\n          //listaSplit.forEach((element, indexElement) => {\n          listaSplitIndex.forEach((element, indexElement) => {\n            //if(auxDato !== element){\n            if (element !== pos + \"\") {\n              if (getListaCamposPorParametroTemporal.data[index].value === null) {\n                getListaCamposPorParametroTemporal.data[index].value = listaSplitConEspacios[indexElement];\n                getListaCamposPorParametroTemporal.data[index].orden = listaSplitIndex[indexElement];\n              } else {\n                getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + listaSplitConEspacios[indexElement];\n                getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + listaSplitIndex[indexElement];\n              }\n            }\n          });\n        }\n      } else {\n        if (value) {\n          getListaCamposPorParametroTemporal.data[index].value = dato;\n          getListaCamposPorParametroTemporal.data[index].orden = pos;\n        }\n      }\n      setListaCamposPorParametroTemporal(getListaCamposPorParametroTemporal);\n    } else {\n      if (value) {\n        const nuevoElemento = {\n          'param': parametro,\n          'value': dato,\n          'orden': pos\n        };\n\n        // Crear una copia del estado actual y agregar el nuevo elemento\n        const nuevaLista = [...getListaCamposPorParametroTemporal.data, nuevoElemento];\n\n        // Actualizar el estado con la nueva lista que contiene el nuevo elemento\n        setListaCamposPorParametroTemporal({\n          ...getListaCamposPorParametroTemporal,\n          data: nuevaLista\n        });\n      }\n    }\n  };\n  const removerInpuntsLista = () => {\n    if (getListaParametros && getListaParametros.params && getListaParametros.resultados) {\n      let grupos = [];\n      getListaParametros.params.forEach(parametro => {\n        if (getListaParametros.resultados[parametro] && Array.isArray(getListaParametros.resultados[parametro])) {\n          getListaParametros.resultados[parametro].forEach(resultado => {\n            grupos.push(resultado.grupo);\n          });\n        }\n        grupos = [...new Set(grupos)];\n      });\n      grupos.forEach(grupo => {\n        let inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\n        inputs.forEach(input => {\n          if (input.disabled) {\n            let datosEnvio = input.id.split('$$$');\n            modificarListaCampos(false, datosEnvio[0], datosEnvio[1], datosEnvio[2]);\n          }\n        });\n      });\n    }\n  };\n  const establecerTabla = function (datos) {\n    let grupoGeneral = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (grupoGeneral.length <= 0) {\n      datos.params.forEach(element => {\n        if (Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0) {\n          if (datos.resultados[element][0]['crear_tabla'] && grupoGeneral.filter(dato => dato === datos.resultados[element][0]['grupo_general']) == 0) {\n            grupoGeneral.push(datos.resultados[element][0]['grupo_general']);\n          }\n        }\n      });\n    }\n    let filas = [];\n    let fila = [];\n    let titulo = [];\n    const nuevoGrupo = [];\n    grupoGeneral.forEach((grupo, index) => {\n      datos.params.forEach(parametro => {\n        var _datos$resultados$par, _datos$resultados$par2;\n        if (((_datos$resultados$par = datos.resultados[parametro]) === null || _datos$resultados$par === void 0 ? void 0 : (_datos$resultados$par2 = _datos$resultados$par[0]) === null || _datos$resultados$par2 === void 0 ? void 0 : _datos$resultados$par2['grupo_general']) == grupo) {\n          titulo.push(datos.resultados[parametro][0]['parametro']);\n          datos.resultados[parametro].forEach(resultado => {\n            fila.push(resultado);\n          });\n          filas.push(fila);\n          fila = [];\n        }\n      });\n      nuevoGrupo.push({\n        grupo: grupo,\n        datos: filas,\n        titulo: titulo\n      });\n      titulo = [];\n      filas = [];\n      fila = [];\n    });\n    setTablaParametrosData(nuevoGrupo);\n  };\n  const componentInputCheckBox = recorrido => {\n    if (recorrido) {\n      return recorrido.map((dato, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: dato.dato + \"$$$\" + dato.parametro + \"$$$\" + index,\n              name: dato.principal ? dato.grupo + \"_\" + dato.principal : dato.grupo,\n              type: \"checkbox\",\n              checked: dato.seleccionar,\n              onChange: e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 32\n            }, this), \" \", dato.dato ? dato.dato : 'SIN DATOS']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this);\n      });\n    }\n  };\n  const cargarValoresDeParametro = parametro => {\n    var _getListaParametros$r;\n    if (getListaParametros !== null && getListaParametros !== void 0 && (_getListaParametros$r = getListaParametros.resultados) !== null && _getListaParametros$r !== void 0 && _getListaParametros$r[parametro]) {\n      var _getListaParametros$r2;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: componentInputCheckBox(getListaParametros === null || getListaParametros === void 0 ? void 0 : (_getListaParametros$r2 = getListaParametros.resultados) === null || _getListaParametros$r2 === void 0 ? void 0 : _getListaParametros$r2[parametro])\n      }, void 0, false);\n    }\n  };\n  const selectChangeListaCampos = (parametro, id_campo, value) => {\n    var newParams = getListaCamposPorParametroTemporal.data.map(item => {\n      if (item.parametro == parametro) {\n        item.id_campo = id_campo;\n        var itemCampo = getListaParametrosBaseDatos[id_campo];\n        item.valor = itemCampo.value != null ? itemCampo.value : value;\n        item.valorTemporal = itemCampo.value != null ? itemCampo.value : value;\n      }\n      return item;\n    });\n\n    //setListaCamposPorParametroDefinitiva({ data: newParams });\n  };\n\n  // Metodo encargado de generar las columnas de los parametros de la plantilla\n  const columnsCampos = [{\n    name: 'CAMPO',\n    cell: campo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: campo.nombreCampo ? campo.nombreCampo : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 17\n    }, this),\n    sortable: true,\n    width: \"15%\"\n  }, {\n    name: 'ITEMS',\n    width: \"50%\",\n    cell: campo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: cargarValoresCampos(campo)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 17\n    }, this)\n  }];\n\n  // Metodo encargado de setear el valor al mismo input\n  const changeTextInput = (e, arrayDatos) => {\n    // Se setea temporalmente\n    let elementoHtml = document.getElementById(e.target.name);\n    let nombreElemento = e.target.name;\n\n    // Se captura el valor escrito\n    let valor = e.target.value;\n\n    // El elemento existe\n    if (elementoHtml) {\n      // Se setea el nuevo valor\n      elementoHtml.title = valor;\n\n      // Se asigna el item dentro del array para enviarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n\n        // Se valida que la key sea igual al elemento modificado\n        if (key == nombreElemento) {\n          // Se añade el item\n          e.items = [valor];\n        }\n      });\n    }\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cambiar el valor de la fecha\n  const changeDateInput = e => {\n    // Se formatea\n    const newDate = moment(e.target.value).format('DD/MM/YYYY');\n\n    // Se captura el nombre del elemento\n    let nombreElemento = e.target.name;\n\n    // Se setea los valores\n    setValue(newDate);\n\n    // Se asigna el item dentro del array para enviarlo\n    getCamposAdicionales.forEach(e => {\n      // Se captura la key\n      let key = e.nombreCampo;\n\n      // Se valida que la key sea igual al elemento modificado\n      if (key == nombreElemento) {\n        // Se añade el item\n        e.items = [newDate];\n      }\n    });\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cambiar el valor del input\n  const changeCheckInput = (e, value) => {\n    // Se captura el elemento html\n    let nombreElemento = value;\n\n    // Se captura el elemento del check true o false\n    let checkeado = e.target.checked;\n\n    // Se captura el valor chequeado html\n    let valorCheck = e.target.value;\n\n    // Se valida cuando esta chequeado\n    if (checkeado == true) {\n      // Se asigna el item dentro del array para enviarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n\n        // Se valida que la key sea igual al elemento modificado\n        if (key == nombreElemento) {\n          // Se valida la primera vez\n          if (!e.itemsSeleccionado) {\n            // Se añade el item\n            e.itemsSeleccionado = [valorCheck];\n          } else {\n            // Se añade el item al array\n            e.itemsSeleccionado.push(valorCheck);\n          }\n        }\n      });\n    } else if (checkeado == false) {\n      // Se asigna el item dentro del array para quitarlo\n      getCamposAdicionales.forEach(e => {\n        // Se captura la key\n        let key = e.nombreCampo;\n        let items = e.itemsSeleccionado ? e.itemsSeleccionado : [];\n\n        // Continua el proceso para quitarlo del array\n        if (items.length > 0 && key == nombreElemento) {\n          // Se busca la posicion del elemento\n          var index = items.indexOf(valorCheck);\n\n          // Se quita el elemento\n          items.splice(index, 1);\n        }\n      });\n    }\n\n    // Se setea en el from cada que vez que finaliza la acción\n    from.getCamposAdicionales = getCamposAdicionales;\n  };\n\n  // Metodo encargado de cargar los valores de los campos\n  const cargarValoresCampos = campo => {\n    // Se inicializa la variable de campos\n    const campoParametro = campo;\n\n    // Se capturan la informacion del campo\n    const tipoCampo = campoParametro.tipoCampo;\n    const nombreCampo = campoParametro.nombreCampo;\n    const itemCampo = tipoCampo == 2 ? campoParametro.items : \"\";\n\n    // Se valida cuando el tipo campo es un listado\n    if (tipoCampo == 2) {\n      // Se retorna el mapeo\n      return (\n        // Se recorre el elemento\n        itemCampo.map((item, i) => {\n          // Se retorna el HTML\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-1 ml-2 mb-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"form-check-input\",\n              id: item,\n              name: item,\n              value: item,\n              onChange: e => changeCheckInput(e, nombreCampo),\n              defaultChecked: item.checked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 29\n            }, this), \" \", item]\n          }, item, true, {\n            fileName: _jsxFileName,\n            lineNumber: 693,\n            columnNumber: 25\n          }, this);\n        })\n      );\n    } else if (tipoCampo == 1) {\n      // Se retorna el html del tipo fecha \n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-control custom-switch custom-control-lg mt-2 mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          className: \"form-control\",\n          id: nombreCampo,\n          name: nombreCampo,\n          onChange: changeDateInput,\n          max: getMaxDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 17\n      }, this);\n    } else if (tipoCampo == 0) {\n      // Se retorna el html del tipo texto\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-control custom-switch custom-control-lg mt-2 mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: nombreCampo,\n          name: nombreCampo,\n          placeholder: nombreCampo,\n          onChange: e => changeTextInput(e, campo)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  // Metodo encargado de retorna los items separados\n  const validarItems = item => {\n    // Se valida que exista y tenga un elemento\n    if (item && item.length == 0) {\n      // Se retorna el primer elemento\n      return item;\n    } else if (item && item.length > 0) {\n      // Se retorna por comas\n      return item.join(\", \");\n    }\n  };\n\n  // Metodo encargado de validar el tipo del campo\n  const validarTipoCampo = tipo => {\n    // Se inicializa la variable\n    let nombreRetornado;\n\n    // Se valida el tipo\n    if (tipo == 0) {\n      // Se redeclara la variable\n      nombreRetornado = \"Texto\";\n    } else if (tipo == 1) {\n      // Se redeclara la variable\n      nombreRetornado = \"Fecha\";\n    } else if (tipo == 2) {\n      // Se redeclara la variable\n      nombreRetornado = \"Lista\";\n    }\n\n    // Se retorna el valor\n    return nombreRetornado;\n  };\n\n  // Metodo encargado de cargar los parametros de la base de datos\n  const cargarParametros = listaParametrosBaseDatos => {\n    // Se setean los valores en null y vacios para que no salga el limitante de las hooks\n    setListaParametros(null);\n    setAntecedentesLista({\n      data: []\n    });\n    setInteresadosLista({\n      data: []\n    });\n    setEntidadesInvestigadoLista({\n      data: []\n    });\n    setCargosInvestigadoLista({\n      data: []\n    });\n    setEntidadInvestigadoLista({\n      data: []\n    });\n    setListaCamposPorParametroTemporal({\n      data: []\n    });\n    setListaParametros({\n      data: []\n    });\n\n    // Se inicializa el array\n    const data = {\n      \"data\": {\n        \"type\": 'mas_actuaciones',\n        \"attributes\": {\n          \"id\": props.id_mas_actuacion,\n          \"id_proceso_disciplinario\": from.procesoDisciplinarioId\n        }\n      }\n    };\n\n    // Se inicializa la API\n    GenericApi.getByDataGeneric('mas_actuaciones/parametros-plantilla/' + props.id_mas_actuacion + '/' + from.procesoDisciplinarioId, data).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se setean los valores a la lista general de parametros\n        setListaParametros(datos);\n        let existenDatos = false;\n        let grupoGeneral = [];\n        datos.params.forEach(element => {\n          if (Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0) {\n            existenDatos = true;\n            if (datos.resultados[element][0]['crear_tabla'] && grupoGeneral.filter(dato => dato === datos.resultados[element][0]['grupo_general']) == 0) {\n              grupoGeneral.push(datos.resultados[element][0]['grupo_general']);\n            }\n          }\n        });\n        establecerTabla(datos, grupoGeneral);\n        setExistenDatosResultados(existenDatos);\n        if (existenDatos && datos && datos.params && datos.resultados) {\n          const nuevoElemento = [];\n          datos.params.forEach(parametro => {\n            if (datos.resultados[parametro] && Array.isArray(datos.resultados[parametro])) {\n              datos.resultados[parametro].forEach((element, posicion) => {\n                //if (datos.resultados[parametro].length === 1 || (element && element.principal)) {\n                let index = nuevoElemento.findIndex(data => data.param === parametro);\n                if (index > -1) {\n                  nuevoElemento[index].value += \"$$$\" + (element.dato ? element.dato : 'SIN DATOS');\n                  nuevoElemento[index].orden += \"$$$\" + posicion;\n                } else {\n                  nuevoElemento.push({\n                    'param': parametro,\n                    'value': element.dato ? element.dato : 'SIN DATOS',\n                    'orden': posicion\n                  });\n                }\n                //}\n              });\n            }\n          });\n\n          setListaCamposPorParametroTemporal({\n            ...getListaCamposPorParametroTemporal,\n            data: nuevoElemento\n          });\n        }\n        window.showSpinner(false);\n      }\n    });\n\n    // Se inicializa la API\n    GenericApi.getGeneric('mas_actuaciones/' + props.id_mas_actuacion).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      validacionSpinner();\n\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se valida que hayan campos adicionales\n        if (datos.data.attributes.campos.length > 0) {\n          // Se setean los valores a la lista\n          setCamposAdicionales(datos.data.attributes.campos);\n\n          // Se setean los campos en el from\n          from.campos = datos.data.attributes.campos;\n        } else if (from.campos) {\n          // Se setean los campos en el from\n          delete from.campos;\n        }\n      }\n    });\n\n    // Se quita el cargando\n    window.showSpinner(false);\n  };\n  const descargarArchivo = () => {\n    try {\n      window.showSpinner(true);\n      const data = {\n        \"data\": {\n          \"type\": \"mas_actuaciones\",\n          \"attributes\": {\n            \"params\": getListaCamposPorParametroTemporal.data\n          }\n        }\n      };\n      GenericApi.getByDataGeneric('mas_actuaciones/plantilla-diligenciada/' + props.id_mas_actuacion, data).then(datos => {\n        if (!datos.error) {\n          downloadBase64File(datos.content_type, datos.base_64, datos.file_name, global.Constants.TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES.DOCX);\n          window.showSpinner(false);\n        } else {\n          setModalState({\n            title: \"SINPROC No \" + radicado + \" :: \",\n            message: datos.error.toString(),\n            show: true,\n            redirect: null,\n            from: {\n              from\n            },\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  function downloadBase64File(contentType, base64Data, fileName, extension) {\n    const linkSource = `data:${contentType};base64,${base64Data}`;\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.href = linkSource;\n    downloadLink.download = fileName;\n    downloadLink.click();\n  }\n  const validacionSpinner = () => {\n    numeroLlamados++;\n    if (numeroLlamados >= numeroTotalLlamados) {\n      setIsLoading(false);\n    }\n  };\n  const cargarInfoParametrosFila = () => {\n    return getListaParametros.params.map((parametro, i) => {\n      var _getListaParametros$r3, _getListaParametros$r4;\n      if (i == 0) {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"${\" + parametro + \"}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 941,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: getListaParametros.numero_de_auto\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 29\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 25\n        }, this);\n      } else if ((getListaParametros === null || getListaParametros === void 0 ? void 0 : (_getListaParametros$r3 = getListaParametros.resultados[parametro]) === null || _getListaParametros$r3 === void 0 ? void 0 : (_getListaParametros$r4 = _getListaParametros$r3[0]) === null || _getListaParametros$r4 === void 0 ? void 0 : _getListaParametros$r4.crear_tabla) === false) {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"${\" + parametro + \"}\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: getListaParametros === null || getListaParametros === void 0 ? void 0 : getListaParametros.resultados[parametro].map((dato, index) => {\n              return /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: dato.dato + \"$$$\" + dato.parametro + \"$$$\" + index,\n                  name: dato.principal ? dato.grupo + \"_\" + dato.principal : dato.grupo,\n                  type: \"checkbox\",\n                  checked: dato.seleccionar,\n                  onChange: e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 960,\n                  columnNumber: 52\n                }, this), \" \", dato.dato ? dato.dato : 'SIN DATOS']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 960,\n                columnNumber: 45\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 29\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 25\n        }, this);\n      }\n    });\n  };\n  const cargarInfoParametrosTabla = () => {\n    return getTablaParametrosData.map((parametros, indexGeneral) => {\n      var _parametros$datos, _parametros$datos2;\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: 2,\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-bordered table-striped table-vcenter js-dataTable-full\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: parametros.titulo.map((titulo, indexTitulo) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: /*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"${\" + titulo + \"}\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 982,\n                    columnNumber: 67\n                  }, this)\n                }, indexTitulo, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 982,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: ((_parametros$datos = parametros.datos) === null || _parametros$datos === void 0 ? void 0 : _parametros$datos.length) > 0 ? (_parametros$datos2 = parametros.datos) === null || _parametros$datos2 === void 0 ? void 0 : _parametros$datos2[0].map((datos, indexDatos) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: parametros.datos.map((dato, indexDato) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      id: dato[indexDatos].dato + \"$$$\" + dato[indexDatos].parametro + \"$$$\" + dato[indexDatos].index,\n                      name: dato[indexDatos].principal ? dato[indexDatos].grupo + \"_\" + dato[indexDatos].principal : dato[indexDatos].grupo,\n                      type: \"checkbox\",\n                      checked: dato[indexDatos].seleccionar,\n                      onChange: e => onChangeValue(e.target.checked, dato[indexDatos].dato, dato[indexDatos].parametro, dato[indexDatos].grupo, dato[indexDatos].principal, dato[indexDatos].index)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 999,\n                      columnNumber: 77\n                    }, this), \" \", dato[indexDatos].dato ? dato[indexDatos].dato : 'SIN DATOS']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 998,\n                    columnNumber: 73\n                  }, this)\n                }, indexDato, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 996,\n                  columnNumber: 65\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 993,\n                columnNumber: 53\n              }, this)) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 987,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 17\n      }, this);\n    });\n    // return (\n    //     {\n    //         getTablaParametrosData.map((parametros, index) => (\n    //             <tr>\n    //                 <td colSpan={2}>\n    //                     <div>\n    //                         <table width={'100%'}>\n    //                             <thead>\n    //                                 <tr>\n    //                                     {\n    //                                         getTablaParametrosColumna?.map((column, columnIndex) => (\n    //                                             <th key={columnIndex}>{column}</th>\n    //                                         ))\n    //                                     }\n    //                                 </tr>\n    //                             </thead>\n    //                             <tbody>\n    //                                 {\n    //                                     getTablaParametrosData[0].map((_, rowIndex) => (\n    //                                         <tr key={rowIndex}>\n    //                                             {getTablaParametrosData.map((columna, index) => (\n    //                                             <td key={index}>\n    //                                                 {\n    //                                                     <label>\n    //                                                         <input\n    //                                                             id={columna[rowIndex].dato + \"$$$\" + columna[rowIndex].parametro + \"$$$\" + columna[rowIndex].index}\n    //                                                             name={columna[rowIndex].principal ? columna[rowIndex].grupo + \"_\" + columna[rowIndex].principal : columna[rowIndex].grupo}\n    //                                                             type=\"checkbox\"\n    //                                                             checked={columna[rowIndex].seleccionar}\n    //                                                             onChange={(e) =>\n    //                                                                 onChangeValue(\n    //                                                                 e.target.checked,\n    //                                                                 columna[rowIndex].dato,\n    //                                                                 columna[rowIndex].parametro,\n    //                                                                 columna[rowIndex].grupo,\n    //                                                                 columna[rowIndex].principal,\n    //                                                                 columna[rowIndex].index\n    //                                                                 )\n    //                                                             }\n    //                                                         />{\" \"}\n    //                                                         {columna[rowIndex].dato ? columna[rowIndex].dato : 'SIN DATOS'}\n    //                                                     </label>\n    //                                                 }\n    //                                             </td>\n    //                                             ))}\n    //                                         </tr>\n    //                                     ))\n    //                                 }\n    //                             </tbody>\n    //                         </table>\n    //                     </div>\n    //                 </td>\n    //             </tr>\n    //         )\n    //     }\n    // )\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1093,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: modalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1094,\n      columnNumber: 13\n    }, this), getIsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"CARGANDO...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1100,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: getListaParametros != null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: getExistenDatosResultados == false ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content alert-warning text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"LA PLANTILLA NO CUENTA CON PARAMETROS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1116,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1115,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1114,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1119,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"PAR\\xC1METROS DE LA PLANTILLA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1124,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1123,\n            columnNumber: 49\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-2 mb-2\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-bordered table-striped table-vcenter js-dataTable-full\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"PAR\\xC1METRO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1130,\n                      columnNumber: 69\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1130,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: /*#__PURE__*/_jsxDEV(\"b\", {\n                      children: \"VALOR\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1131,\n                      columnNumber: 69\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1131,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1129,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1128,\n                columnNumber: 57\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: [getListaParametros !== null && getListaParametros !== void 0 && getListaParametros.resultados ? cargarInfoParametrosFila() : null, getListaParametros !== null && getListaParametros !== void 0 && getListaParametros.resultados ? cargarInfoParametrosTabla() : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1134,\n                columnNumber: 57\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1127,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1126,\n            columnNumber: 49\n          }, this), getCamposAdicionales && getCamposAdicionales.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              style: {\n                marginTop: '50px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"CAMPOS ADICIONALES\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1144,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1143,\n              columnNumber: 57\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12 mt-2 mb-2\",\n              children: /*#__PURE__*/_jsxDEV(DataTable, {\n                className: \"table table-bordered table-striped table-vcenter js-dataTable-full text-uppercase\",\n                columns: columnsCampos,\n                data: getCamposAdicionales,\n                noDataComponent: global.Constants.DATA_TABLE.SIN_DATOS_TABLE,\n                striped: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1147,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1146,\n              columnNumber: 57\n            }, this)]\n          }, void 0, true) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12 mt-4 mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"mr-2\",\n              htmlFor: \"documento_ruta\",\n              children: \"DESCARGAR DOCUMENTO PRE-DILIGENCIADO CON LOS VALORES SELECCIONADOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1158,\n              columnNumber: 53\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              title: \"Descargar documento diligenciado\",\n              onClick: () => descargarArchivo(),\n              className: \"btn btn-rounded btn-primary\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fas fa-file-word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1159,\n                columnNumber: 192\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1159,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1157,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-12 mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"CARGANDO PAR\\xC1METROS DE LA PLANTILLA...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 33\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n}\n_s(ActuacionParametrosPlantillaForm, \"JRZCjEP0CDOgQtkWIevpSORQHcw=\", false, function () {\n  return [useLocation];\n});\n_c = ActuacionParametrosPlantillaForm;\nexport default ActuacionParametrosPlantillaForm;\nvar _c;\n$RefreshReg$(_c, \"ActuacionParametrosPlantillaForm\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","DataTable","GenericApi","ParametrosMasApi","Spinner","ModalGen","getUser","DatePicker","registerLocale","moment","ActuacionParametrosPlantillaForm","props","location","from","state","radicado","procesoDisciplinarioId","id_etapa","idEtapa","fechaRegistro","fechaIngreso","dependencia","nombre_dependencia","nombre","registradoPor","vigencia","generadoPor","nombre_completo","modalState","setModalState","title","message","show","getListaParametros","setListaParametros","getListaCamposPorParametroTemporal","setListaCamposPorParametroTemporal","data","getListaCamposPorCamposTemporal","setListaCamposPorCamposTemporal","getAntecedentesLista","setAntecedentesLista","links","meta","getInteresadosLista","setInteresadosLista","getEntidadesInvestigadoLista","setEntidadesInvestigadoLista","getCargosInvestigadoLista","setCargosInvestigadoLista","getEntidadInvestigadoLista","setEntidadInvestigadoLista","getParametrosCampos","setParametrosCampos","getListaParametrosBaseDatos","setListaParametrosBaseDatos","getPrueba","setPrueba","getExistenDatosResultados","setExistenDatosResultados","getCamposAdicionales","setCamposAdicionales","getMaxDate","setMaxDate","value","setValue","format","getIsLoading","setIsLoading","numeroLlamados","numeroTotalLlamados","getTablaParametrosData","setTablaParametrosData","grupo","datos","titulo","Date","toISOString","split","fetchData","cargarTablaParametrosActuaciones","id_mas_actuacion","array","getGeneric","then","validacionSpinner","error","index","length","element","attributes","nombre_campo","estado","type","validarValueParametros","push","check","cargarParametros","valor","handleChangeInteresados","e","parametro","id_campo","checked","target","valorId","map","item","id","val","p","primerApellido","primer_apellido","segundoApellido","segundo_apellido","primerNombre","primer_nombre","segundoNombre","segundo_nombre","sujetoProcesalNombre","sujeto_procesal_nombre","nombreCompleto","filter","x","undefined","selectChangeListaCampos","toString","checkeoAutomaticoInteresados","checkeoAutomaticoAntecedentes","descripcion","checkeoAutomaticoInvestigadosNombre","nombre_investigado","checkeoAutomaticoInvestigadosCargo","cargo","checkeoAutomaticoInvestigadosEntidad","nombre_entidad","checkeoAutomaticoFechaAntecedentes","fecha_creado","handleChangeAntecedentes","handleChangeFechaAntecedentes","handleChangeInvestigados","handleChangeCargosInvestigados","handleChangeEntidadesInvestigados","onChangeValue","dato","principal","pos","nuevosResultados","JSON","parse","stringify","resultados","seleccionar","inputs","document","querySelectorAll","forEach","input","disabled","datosEnvio","modificarListaCampos","removerInpuntsLista","establecerTabla","findIndex","param","listaSplit","replace","listaSplitIndex","orden","listaSplitConEspacios","auxDato","indexElement","nuevoElemento","nuevaLista","params","grupos","Array","isArray","resultado","Set","grupoGeneral","filas","fila","nuevoGrupo","componentInputCheckBox","recorrido","cargarValoresDeParametro","newParams","itemCampo","valorTemporal","columnsCampos","name","cell","campo","nombreCampo","sortable","width","cargarValoresCampos","changeTextInput","arrayDatos","elementoHtml","getElementById","nombreElemento","key","items","changeDateInput","newDate","changeCheckInput","checkeado","valorCheck","itemsSeleccionado","indexOf","splice","campoParametro","tipoCampo","i","validarItems","join","validarTipoCampo","tipo","nombreRetornado","listaParametrosBaseDatos","getByDataGeneric","existenDatos","posicion","window","showSpinner","campos","descargarArchivo","downloadBase64File","content_type","base_64","file_name","global","Constants","TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES","DOCX","redirect","alert","TIPO_ALERTA","ERROR","console","contentType","base64Data","fileName","extension","linkSource","downloadLink","createElement","href","download","click","cargarInfoParametrosFila","numero_de_auto","crear_tabla","cargarInfoParametrosTabla","parametros","indexGeneral","indexTitulo","indexDatos","indexDato","marginTop","DATA_TABLE","SIN_DATOS_TABLE"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/Herramientas/ActuacionParametrosPlantillaForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\nimport DataTable from 'react-data-table-component';\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport ParametrosMasApi from \"../../Api/Services/ParametrosMasApi\";\r\nimport Spinner from '../../Utils/Spinner';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport '../../Utils/Constants';\r\nimport { getUser } from '../../Utils/Common';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport DatePicker, { registerLocale } from \"react-datepicker\";\r\nimport moment from 'moment';\r\n\r\nfunction ActuacionParametrosPlantillaForm(props) {\r\n    const location = useLocation()\r\n    const { from } = location.state\r\n    let radicado = from.radicado;\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n    let id_etapa = from.idEtapa;\r\n    const fechaRegistro = from.fechaRegistro;\r\n    const fechaIngreso = from.fechaIngreso;\r\n    const dependencia = getUser().nombre_dependencia ? getUser().nombre_dependencia.nombre : \"\";\r\n    const registradoPor = from.registradoPor;\r\n    const vigencia = from.vigencia;\r\n    const generadoPor = getUser().nombre_completo ? getUser().nombre_completo : \"\";\r\n\r\n    const [modalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [getListaParametros, setListaParametros] = useState();\r\n    const [getListaCamposPorParametroTemporal, setListaCamposPorParametroTemporal] = useState({ data: [] });\r\n    const [getListaCamposPorCamposTemporal, setListaCamposPorCamposTemporal] = useState({ data: [] });\r\n    //const [getListaCamposPorParametroDefinitiva, setListaCamposPorParametroDefinitiva] = useState({ data: [] });\r\n    const [getAntecedentesLista, setAntecedentesLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getInteresadosLista, setInteresadosLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getEntidadesInvestigadoLista, setEntidadesInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getCargosInvestigadoLista, setCargosInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getEntidadInvestigadoLista, setEntidadInvestigadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getParametrosCampos, setParametrosCampos] = useState();\r\n    const [getListaParametrosBaseDatos, setListaParametrosBaseDatos] = useState({ data: [] });\r\n    const [getPrueba, setPrueba] = useState(true);\r\n    const [getExistenDatosResultados, setExistenDatosResultados] = useState(true);\r\n\r\n    const [getCamposAdicionales, setCamposAdicionales] = useState([]);\r\n    const [getMaxDate, setMaxDate] = useState();\r\n    const [value, setValue] = useState(moment().format('YYYY-MM-DD'));\r\n    const [getIsLoading, setIsLoading] = useState(true);\r\n\r\n    let numeroLlamados = 0;\r\n    let numeroTotalLlamados = 3;\r\n    const [getTablaParametrosData, setTablaParametrosData] = useState([{grupo: \"\", datos: [], titulo: []}]);\r\n\r\n    // Metodo encargado de cargar la informacion general del formulario\r\n    useEffect(() => {\r\n\r\n        // Se setea el maximo de fecha\r\n        setMaxDate(new Date().toISOString().split(\"T\")[0]);\r\n\r\n        // Se inicializa la funcion asyncrona\r\n        async function fetchData() {\r\n\r\n            // Metodo encargado de cargar los parametros de la plantilla\r\n            cargarTablaParametrosActuaciones();\r\n        }\r\n\r\n        // Se llama el metodo\r\n        fetchData();\r\n    }, [props.id_mas_actuacion]);\r\n\r\n    // Metodo encargado de cargar los parametros generales de la plantilla de la BD\r\n    const cargarTablaParametrosActuaciones = () => {\r\n\r\n        // Se inicializa el array\r\n        var array = [];\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric('parametro-campos').then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                validacionSpinner()\r\n                setCamposAdicionales([])\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se recorre el array para insertar los valores necesarios\r\n                    for (let index = 0; index < datos.data.length; index++) {\r\n\r\n                        // Se captura los datos por posicion\r\n                        const element = datos.data[index].attributes;\r\n                        const title = element.nombre_campo;\r\n                        const estado = element.estado == \"1\" ? true : false;\r\n                        const type = element.type;\r\n                        const value = validarValueParametros(type, estado);\r\n\r\n                        // Se añade el dato al array general\r\n                        array.push({ title: title, value: value, type: type, check: estado });\r\n                    }\r\n\r\n                    // Se setea la respuesta en la constante\r\n                    setListaParametrosBaseDatos(array);\r\n\r\n                    // Se generan la lista de parametros del documento\r\n                    cargarParametros(array);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de retorna el valor por el elemento\r\n    const validarValueParametros = (element, estado) => {\r\n\r\n        // Se inicializa la variable\r\n        let valor;\r\n\r\n        // Se valida por el elemento\r\n        if ((element == \"Sinproc\" || element == \"Número de radicado\"\r\n            || element == \"Radicación\" || element == \"Radicado\") && estado) {\r\n            valor = radicado;\r\n        } else if (element == \"Usuario\" && estado) {\r\n            valor = registradoPor;\r\n        } else if ((element == \"Dependencia Origen\" || element == \"Dependencia\") && estado) {\r\n            valor = dependencia;\r\n        } else if (element == \"Vigencia\" && estado) {\r\n            valor = vigencia;\r\n        } else if (element == \"Fecha de Registro\" && estado) {\r\n            valor = fechaRegistro;\r\n        } else if (element == \"Fecha de Ingreso\" && estado) {\r\n            valor = fechaIngreso;\r\n        } else if (element == \"Generado\" && estado) {\r\n            valor = generadoPor;\r\n        } else if ((element == \"Número de auto (generado despues de aprobación)\" || element == \"Auto\") && estado) {\r\n            valor = \"${numero_de_auto}\";\r\n        }\r\n\r\n        // Se retorna el valor\r\n        return valor;\r\n    }\r\n\r\n    const handleChangeInteresados = (e, parametro, id_campo) => {\r\n\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getInteresadosLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setInteresadosLista(valorId);\r\n        let val = getInteresadosLista.map((p) => {\r\n            if (p.checked == true) {\r\n\r\n                var primerApellido = p.attributes.primer_apellido != null ? p.attributes.primer_apellido : \"\";\r\n                var segundoApellido = p.attributes.segundo_apellido != null ? p.attributes.segundo_apellido : \"\";\r\n                var primerNombre = p.attributes.primer_nombre != null ? p.attributes.primer_nombre : \"\";\r\n                var segundoNombre = p.attributes.segundo_nombre != null ? p.attributes.segundo_nombre : \"\";\r\n                var sujetoProcesalNombre = p.attributes.sujeto_procesal_nombre != \"\" ? p.attributes.sujeto_procesal_nombre : \"\";\r\n                var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n                var nombre = nombreCompleto;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n    }\r\n\r\n    function checkeoAutomaticoInteresados(parametro, id_campo) {\r\n        setInteresadosLista(getInteresadosLista);\r\n\r\n        var primerApellido = getInteresadosLista[0].attributes.primer_apellido != null ? getInteresadosLista[0].attributes.primer_apellido : \"\";\r\n        var segundoApellido = getInteresadosLista[0].attributes.segundo_apellido != null ? getInteresadosLista[0].attributes.segundo_apellido : \"\";\r\n        var primerNombre = getInteresadosLista[0].attributes.primer_nombre != null ? getInteresadosLista[0].attributes.primer_nombre : \"\";\r\n        var segundoNombre = getInteresadosLista[0].attributes.segundo_nombre != null ? getInteresadosLista[0].attributes.segundo_nombre : \"\";\r\n        var sujetoProcesalNombre = getInteresadosLista[0].attributes.sujeto_procesal_nombre != null ? getInteresadosLista[0].attributes.sujeto_procesal_nombre : \"\";\r\n        var nombreCompleto = sujetoProcesalNombre + \" \" + primerApellido + \" \" + segundoApellido + \" \" + primerNombre + \" \" + segundoNombre;\r\n        var nombre = nombreCompleto;\r\n\r\n        // var nombre = `${getInteresadosLista[0].attributes.sujeto_procesal_nombre} ${getInteresadosLista[0].attributes.primer_apellido} ${getInteresadosLista[0].attributes.segundo_apellido} ${getInteresadosLista[0].attributes.primer_nombre} ${getInteresadosLista[0].attributes.segundo_nombre}`;\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoAntecedentes(parametro, id_campo) {\r\n        setAntecedentesLista(getAntecedentesLista);\r\n        var nombre = `${getAntecedentesLista[0].attributes.descripcion}`;\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosNombre(parametro, id_campo) {\r\n        setEntidadInvestigadoLista(getEntidadesInvestigadoLista);\r\n        var nombre = `${getEntidadesInvestigadoLista[0].attributes.nombre_investigado}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosCargo(parametro, id_campo) {\r\n        setCargosInvestigadoLista(getCargosInvestigadoLista);\r\n        var nombre = `${getCargosInvestigadoLista[0].attributes.cargo}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoInvestigadosEntidad(parametro, id_campo) {\r\n        setEntidadesInvestigadoLista(getEntidadInvestigadoLista);\r\n        var nombre = `${getEntidadInvestigadoLista[0].attributes.nombre_entidad}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    function checkeoAutomaticoFechaAntecedentes(parametro, id_campo) {\r\n        setAntecedentesLista(getAntecedentesLista);\r\n        var nombre = `${getAntecedentesLista[0].attributes.fecha_creado}`;\r\n        if (nombre == \"null\") {\r\n            nombre = \"NO_APLICA\";\r\n        }\r\n        selectChangeListaCampos(parametro, id_campo, nombre);\r\n    }\r\n\r\n    const handleChangeAntecedentes = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getAntecedentesLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setAntecedentesLista(valorId);\r\n        let val = getAntecedentesLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var nombre = `${p.attributes.descripcion}`;\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeFechaAntecedentes = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getAntecedentesLista.map((item) => {\r\n            if (value == item.id) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setAntecedentesLista(valorId);\r\n        let val = getAntecedentesLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var nombre = `${p.attributes.fecha_creado}`;\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getEntidadesInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.nombre_investigado) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setEntidadesInvestigadoLista(valorId);\r\n        let val = getEntidadesInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.nombre_investigado}`;\r\n                var nombre = `${p.attributes.nombre_investigado}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeCargosInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getCargosInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.cargo) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setCargosInvestigadoLista(valorId);\r\n        let val = getCargosInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.cargo}`;\r\n                var nombre = `${p.attributes.cargo}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n    const handleChangeEntidadesInvestigados = (e, parametro, id_campo) => {\r\n        const { value, checked } = e.target;\r\n\r\n        let valorId = getEntidadInvestigadoLista.map((item) => {\r\n            if (value == item.attributes.nombre_entidad) {\r\n                item.checked = checked;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setCargosInvestigadoLista(valorId);\r\n        let val = getEntidadInvestigadoLista.map((p) => {\r\n            if (p.checked == true) {\r\n                var value = `${p.attributes.nombre_entidad}`;\r\n                var nombre = `${p.attributes.nombre_entidad}`;\r\n\r\n                return nombre;\r\n            }\r\n        }).filter(x => x != undefined);\r\n        selectChangeListaCampos(parametro, id_campo, val.toString());\r\n\r\n    }\r\n\r\n      const onChangeValue = (value, dato, parametro, grupo, principal, pos) => {\r\n\r\n        const nuevosResultados = JSON.parse(JSON.stringify(getListaParametros));\r\n\r\n        if (value) {\r\n            nuevosResultados.resultados[parametro][pos].seleccionar = true;\r\n        } \r\n        else {\r\n            nuevosResultados.resultados[parametro][pos].seleccionar = false;\r\n        }\r\n\r\n        if(principal){\r\n            const inputs = document.querySelectorAll('input[name=\"'+grupo+'\"]');\r\n            // Deshabilitar los inputs seleccionados\r\n            inputs.forEach(input => {\r\n                input.disabled = !value;\r\n                let datosEnvio = input.id.split('$$$');\r\n                nuevosResultados.resultados[datosEnvio[1]][datosEnvio[2]].seleccionar = false;\r\n            });\r\n        }\r\n\r\n        setListaParametros(nuevosResultados);\r\n        \r\n        modificarListaCampos(value, (dato ? dato : 'SIN DATOS'), parametro, pos)\r\n        removerInpuntsLista()\r\n        establecerTabla(nuevosResultados, [])\r\n    }\r\n\r\n    const modificarListaCampos = (value, dato, parametro, pos) => {\r\n        let index = getListaCamposPorParametroTemporal.data.findIndex(data => data.param === parametro)\r\n        if(index > -1){\r\n            if(getListaCamposPorParametroTemporal.data[index].value){\r\n                let listaSplit = getListaCamposPorParametroTemporal.data[index].value.replace(/\\s/g, '').split('$$$')\r\n                let listaSplitIndex = getListaCamposPorParametroTemporal.data[index].orden.toString().split('$$$')\r\n                let listaSplitConEspacios = getListaCamposPorParametroTemporal.data[index].value.split('$$$')\r\n                let auxDato = dato.replace(/\\s/g, '')\r\n                if(value){\r\n                    getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + dato\r\n                    getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + pos\r\n                }\r\n                else{\r\n                    getListaCamposPorParametroTemporal.data[index].value = null\r\n                    getListaCamposPorParametroTemporal.data[index].orden = null\r\n                    //listaSplit.forEach((element, indexElement) => {\r\n                    listaSplitIndex.forEach((element, indexElement) => {\r\n                        //if(auxDato !== element){\r\n                        if(element !== pos+\"\"){\r\n                            if(getListaCamposPorParametroTemporal.data[index].value === null){\r\n                                getListaCamposPorParametroTemporal.data[index].value = listaSplitConEspacios[indexElement]\r\n                                getListaCamposPorParametroTemporal.data[index].orden = listaSplitIndex[indexElement]\r\n                            }\r\n                            else{\r\n                                getListaCamposPorParametroTemporal.data[index].value += \"$$$\" + listaSplitConEspacios[indexElement]\r\n                                getListaCamposPorParametroTemporal.data[index].orden += \"$$$\" + listaSplitIndex[indexElement]\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else{\r\n                if(value){\r\n                    getListaCamposPorParametroTemporal.data[index].value = dato\r\n                    getListaCamposPorParametroTemporal.data[index].orden = pos\r\n                }\r\n            }           \r\n            setListaCamposPorParametroTemporal(getListaCamposPorParametroTemporal)\r\n        }\r\n        else{\r\n            if(value){\r\n                const nuevoElemento = { \r\n                    'param': parametro,\r\n                    'value': dato, \r\n                    'orden': pos\r\n                }\r\n    \r\n                // Crear una copia del estado actual y agregar el nuevo elemento\r\n                const nuevaLista = [...getListaCamposPorParametroTemporal.data, nuevoElemento]\r\n    \r\n                // Actualizar el estado con la nueva lista que contiene el nuevo elemento\r\n                setListaCamposPorParametroTemporal({ ...getListaCamposPorParametroTemporal, data: nuevaLista })\r\n            }\r\n        }\r\n    } \r\n\r\n    const removerInpuntsLista = () => {\r\n        if (getListaParametros && getListaParametros.params && getListaParametros.resultados) {\r\n            let grupos = [];\r\n            getListaParametros.params.forEach(parametro => {\r\n                if (getListaParametros.resultados[parametro] && Array.isArray(getListaParametros.resultados[parametro])) {\r\n                    getListaParametros.resultados[parametro].forEach(resultado => {\r\n                        grupos.push(resultado.grupo);\r\n                    });\r\n                }\r\n                grupos = [...new Set(grupos)];\r\n            });\r\n    \r\n            grupos.forEach(grupo => {\r\n                let inputs = document.querySelectorAll('input[name=\"' + grupo + '\"]');\r\n                inputs.forEach(input => {\r\n                    if (input.disabled) {\r\n                        let datosEnvio = input.id.split('$$$');\r\n                        modificarListaCampos(false, datosEnvio[0], datosEnvio[1], datosEnvio[2]);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const establecerTabla = (datos, grupoGeneral = []) => {\r\n\r\n        if(grupoGeneral.length <= 0){\r\n            datos.params.forEach(element => {\r\n                if(Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0){\r\n                    if(datos.resultados[element][0]['crear_tabla'] && grupoGeneral.filter(dato => dato === datos.resultados[element][0]['grupo_general']) == 0){\r\n                        grupoGeneral.push(datos.resultados[element][0]['grupo_general'])\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        let filas = []\r\n        let fila = []\r\n        let titulo = []\r\n\r\n        const nuevoGrupo = [];\r\n\r\n        grupoGeneral.forEach((grupo, index) => {\r\n            datos.params.forEach(parametro => {\r\n                if(datos.resultados[parametro]?.[0]?.['grupo_general'] == grupo){\r\n                    titulo.push(datos.resultados[parametro][0]['parametro'])\r\n                    datos.resultados[parametro].forEach(resultado => {\r\n                        fila.push(resultado)\r\n                    })\r\n                    filas.push(fila)\r\n                    fila = []\r\n                }\r\n            });\r\n            nuevoGrupo.push({\r\n                grupo: grupo,\r\n                datos: filas,\r\n                titulo: titulo\r\n            });\r\n            titulo = []\r\n            filas = []\r\n            fila = []\r\n        });\r\n        setTablaParametrosData(nuevoGrupo)\r\n\r\n    }\r\n\r\n    const componentInputCheckBox = (recorrido) => {\r\n        if(recorrido){\r\n            return (recorrido.map((dato, index) => {\r\n                return (                \r\n                    <div key={index}>\r\n                        <label><input id={dato.dato+\"$$$\"+dato.parametro+\"$$$\"+index} name={dato.principal ? dato.grupo+\"_\"+dato.principal : dato.grupo} type=\"checkbox\" checked={dato.seleccionar} onChange={e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)}/> { dato.dato ? dato.dato : 'SIN DATOS' }</label>\r\n                    </div>\r\n                )\r\n            }))\r\n        }\r\n    }\r\n\r\n    const cargarValoresDeParametro = (parametro) => {\r\n        if(getListaParametros?.resultados?.[parametro]){\r\n            return (<>{componentInputCheckBox(getListaParametros?.resultados?.[parametro])}</>)\r\n        }\r\n    }\r\n\r\n    const selectChangeListaCampos = (parametro, id_campo, value) => {\r\n\r\n        var newParams = getListaCamposPorParametroTemporal.data.map(item => {\r\n\r\n            if (item.parametro == parametro) {\r\n                item.id_campo = id_campo;\r\n                var itemCampo = getListaParametrosBaseDatos[id_campo];\r\n\r\n                item.valor = (itemCampo.value != null) ? itemCampo.value : value;\r\n                item.valorTemporal = (itemCampo.value != null) ? itemCampo.value : value;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        //setListaCamposPorParametroDefinitiva({ data: newParams });\r\n    }\r\n\r\n    // Metodo encargado de generar las columnas de los parametros de la plantilla\r\n    const columnsCampos = [\r\n        {\r\n            name: 'CAMPO',\r\n            cell: campo =>\r\n                <div>\r\n                    <strong>{campo.nombreCampo ? campo.nombreCampo : \"\"}</strong>\r\n                </div>,\r\n            sortable: true,\r\n            width: \"15%\"\r\n        },\r\n        {\r\n            name: 'ITEMS',\r\n            width: \"50%\",\r\n            cell: campo =>\r\n                <div className='row'>\r\n                    <div className='col'>\r\n                        {cargarValoresCampos(campo)}\r\n                    </div>\r\n                </div>\r\n        },\r\n    ];\r\n\r\n    // Metodo encargado de setear el valor al mismo input\r\n    const changeTextInput = (e, arrayDatos) => {\r\n\r\n        // Se setea temporalmente\r\n        let elementoHtml = document.getElementById(e.target.name);\r\n        let nombreElemento = e.target.name;\r\n\r\n        // Se captura el valor escrito\r\n        let valor = e.target.value;\r\n\r\n        // El elemento existe\r\n        if (elementoHtml) {\r\n\r\n            // Se setea el nuevo valor\r\n            elementoHtml.title = valor;\r\n\r\n            // Se asigna el item dentro del array para enviarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n\r\n                // Se valida que la key sea igual al elemento modificado\r\n                if (key == nombreElemento) {\r\n\r\n                    // Se añade el item\r\n                    e.items = [valor];\r\n                }\r\n            })\r\n        }\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    }\r\n\r\n    // Metodo encargado de cambiar el valor de la fecha\r\n    const changeDateInput = (e) => {\r\n\r\n        // Se formatea\r\n        const newDate = moment(e.target.value).format('DD/MM/YYYY');\r\n\r\n        // Se captura el nombre del elemento\r\n        let nombreElemento = e.target.name;\r\n\r\n        // Se setea los valores\r\n        setValue(newDate);\r\n\r\n        // Se asigna el item dentro del array para enviarlo\r\n        getCamposAdicionales.forEach(e => {\r\n\r\n            // Se captura la key\r\n            let key = e.nombreCampo;\r\n\r\n            // Se valida que la key sea igual al elemento modificado\r\n            if (key == nombreElemento) {\r\n\r\n                // Se añade el item\r\n                e.items = [newDate];\r\n            }\r\n        })\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    };\r\n\r\n    // Metodo encargado de cambiar el valor del input\r\n    const changeCheckInput = (e, value) => {\r\n\r\n        // Se captura el elemento html\r\n        let nombreElemento = value;\r\n\r\n        // Se captura el elemento del check true o false\r\n        let checkeado = e.target.checked;\r\n\r\n        // Se captura el valor chequeado html\r\n        let valorCheck = e.target.value;\r\n\r\n        // Se valida cuando esta chequeado\r\n        if (checkeado == true) {\r\n\r\n            // Se asigna el item dentro del array para enviarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n\r\n                // Se valida que la key sea igual al elemento modificado\r\n                if (key == nombreElemento) {\r\n\r\n                    // Se valida la primera vez\r\n                    if (!e.itemsSeleccionado) {\r\n\r\n                        // Se añade el item\r\n                        e.itemsSeleccionado = [valorCheck];\r\n                    } else {\r\n\r\n                        // Se añade el item al array\r\n                        e.itemsSeleccionado.push(valorCheck);\r\n                    }\r\n                }\r\n            })\r\n        } else if (checkeado == false) {\r\n\r\n            // Se asigna el item dentro del array para quitarlo\r\n            getCamposAdicionales.forEach(e => {\r\n\r\n                // Se captura la key\r\n                let key = e.nombreCampo;\r\n                let items = e.itemsSeleccionado ? e.itemsSeleccionado : [];\r\n\r\n                // Continua el proceso para quitarlo del array\r\n                if (items.length > 0 && (key == nombreElemento)) {\r\n\r\n                    // Se busca la posicion del elemento\r\n                    var index = items.indexOf(valorCheck);\r\n\r\n                    // Se quita el elemento\r\n                    items.splice(index, 1);\r\n                }\r\n            })\r\n        }\r\n\r\n        // Se setea en el from cada que vez que finaliza la acción\r\n        from.getCamposAdicionales = getCamposAdicionales;\r\n    }\r\n\r\n    // Metodo encargado de cargar los valores de los campos\r\n    const cargarValoresCampos = (campo) => {\r\n\r\n        // Se inicializa la variable de campos\r\n        const campoParametro = campo;\r\n\r\n        // Se capturan la informacion del campo\r\n        const tipoCampo = campoParametro.tipoCampo;\r\n        const nombreCampo = campoParametro.nombreCampo;\r\n        const itemCampo = tipoCampo == 2 ? campoParametro.items : \"\";\r\n\r\n        // Se valida cuando el tipo campo es un listado\r\n        if (tipoCampo == 2) {\r\n\r\n            // Se retorna el mapeo\r\n            return (\r\n\r\n                // Se recorre el elemento\r\n                itemCampo.map((item, i) => {\r\n\r\n                    // Se retorna el HTML\r\n                    return (\r\n                        <div className=\"col-md-12 mt-1 ml-2 mb-1\" key={item}>\r\n                            <input type=\"checkbox\"\r\n                                className=\"form-check-input\"\r\n                                id={item}\r\n                                name={item}\r\n                                value={item}\r\n                                onChange={(e) => changeCheckInput(e, nombreCampo)}\r\n                                defaultChecked={item.checked} /> {item}\r\n                        </div>\r\n                    )\r\n                })\r\n            )\r\n        } else if (tipoCampo == 1) {\r\n\r\n            // Se retorna el html del tipo fecha \r\n            return (\r\n                <div className=\"custom-control custom-switch custom-control-lg mt-2 mb-2\">\r\n                    <input type=\"date\"\r\n                        className=\"form-control\"\r\n                        id={nombreCampo}\r\n                        name={nombreCampo}\r\n                        onChange={changeDateInput}\r\n                        max={getMaxDate}\r\n                    />\r\n                </div>\r\n            )\r\n        } else if (tipoCampo == 0) {\r\n\r\n            // Se retorna el html del tipo texto\r\n            return (\r\n                <div className=\"custom-control custom-switch custom-control-lg mt-2 mb-2\">\r\n                    <input type=\"text\"\r\n                        className=\"form-control\"\r\n                        id={nombreCampo}\r\n                        name={nombreCampo}\r\n                        placeholder={nombreCampo}\r\n                        onChange={e => changeTextInput(e, campo)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de retorna los items separados\r\n    const validarItems = (item) => {\r\n\r\n        // Se valida que exista y tenga un elemento\r\n        if (item && item.length == 0) {\r\n\r\n            // Se retorna el primer elemento\r\n            return item;\r\n        } else if (item && item.length > 0) {\r\n\r\n            // Se retorna por comas\r\n            return item.join(\", \");\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de validar el tipo del campo\r\n    const validarTipoCampo = (tipo) => {\r\n\r\n        // Se inicializa la variable\r\n        let nombreRetornado;\r\n\r\n        // Se valida el tipo\r\n        if (tipo == 0) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Texto\";\r\n        } else if (tipo == 1) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Fecha\";\r\n        } else if (tipo == 2) {\r\n\r\n            // Se redeclara la variable\r\n            nombreRetornado = \"Lista\";\r\n        }\r\n\r\n        // Se retorna el valor\r\n        return nombreRetornado;\r\n    }\r\n\r\n    // Metodo encargado de cargar los parametros de la base de datos\r\n    const cargarParametros = (listaParametrosBaseDatos) => {\r\n\r\n        // Se setean los valores en null y vacios para que no salga el limitante de las hooks\r\n        setListaParametros(null);\r\n        setAntecedentesLista({ data: [] });\r\n        setInteresadosLista({ data: [] });\r\n        setEntidadesInvestigadoLista({ data: [] });\r\n        setCargosInvestigadoLista({ data: [] });\r\n        setEntidadInvestigadoLista({ data: [] });\r\n        setListaCamposPorParametroTemporal({ data: [] });\r\n        setListaParametros({ data: [] });\r\n\r\n        // Se inicializa el array\r\n        const data = {\r\n            \"data\": {\r\n                \"type\": 'mas_actuaciones',\r\n                \"attributes\": {\r\n                    \"id\": props.id_mas_actuacion,\r\n                    \"id_proceso_disciplinario\": from.procesoDisciplinarioId\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getByDataGeneric('mas_actuaciones/parametros-plantilla/' + props.id_mas_actuacion + '/' + from.procesoDisciplinarioId, data).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                validacionSpinner()\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se setean los valores a la lista general de parametros\r\n                    setListaParametros(datos);\r\n                    \r\n                    let existenDatos = false;\r\n                    let grupoGeneral = []\r\n                    datos.params.forEach(element => {\r\n                        if(Array.isArray(datos.resultados[element]) && datos.resultados[element].length > 0){\r\n                            existenDatos = true;\r\n                            if(datos.resultados[element][0]['crear_tabla'] && grupoGeneral.filter(dato => dato === datos.resultados[element][0]['grupo_general']) == 0){\r\n                                grupoGeneral.push(datos.resultados[element][0]['grupo_general'])\r\n                            }\r\n                        }\r\n                    });\r\n                    \r\n                    establecerTabla(datos, grupoGeneral)                    \r\n                    setExistenDatosResultados(existenDatos)\r\n\r\n                    if (existenDatos && datos && datos.params && datos.resultados) {\r\n                        const nuevoElemento = [];\r\n                      \r\n                        datos.params.forEach(parametro => {\r\n                          if (datos.resultados[parametro] && Array.isArray(datos.resultados[parametro])) {\r\n                            datos.resultados[parametro].forEach((element, posicion) => {\r\n                                //if (datos.resultados[parametro].length === 1 || (element && element.principal)) {\r\n                                    let index = nuevoElemento.findIndex(data => data.param === parametro);\r\n                                    if (index > -1) {\r\n                                    nuevoElemento[index].value += \"$$$\" + (element.dato ? element.dato : 'SIN DATOS');\r\n                                    nuevoElemento[index].orden += \"$$$\" + posicion;\r\n                                    } else {\r\n                                    nuevoElemento.push({ \r\n                                        'param': parametro,\r\n                                        'value': element.dato ? element.dato : 'SIN DATOS', \r\n                                        'orden': posicion\r\n                                    });\r\n                                    }\r\n                                //}\r\n                            });\r\n                          }\r\n                        });\r\n                        setListaCamposPorParametroTemporal({ ...getListaCamposPorParametroTemporal, data: nuevoElemento });\r\n                      }\r\n\r\n\r\n                    window.showSpinner(false)\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric('mas_actuaciones/' + props.id_mas_actuacion).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n                \r\n                validacionSpinner()\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se valida que hayan campos adicionales\r\n                    if (datos.data.attributes.campos.length > 0) {\r\n\r\n                        // Se setean los valores a la lista\r\n                        setCamposAdicionales(datos.data.attributes.campos);\r\n\r\n                        // Se setean los campos en el from\r\n                        from.campos = datos.data.attributes.campos;\r\n                    } else if (from.campos) {\r\n\r\n                        // Se setean los campos en el from\r\n                        delete from.campos;\r\n                    }\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se quita el cargando\r\n        window.showSpinner(false);\r\n    }\r\n\r\n    const descargarArchivo = () => {\r\n\r\n        try {\r\n            window.showSpinner(true)\r\n\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": \"mas_actuaciones\",\r\n                    \"attributes\": {\r\n                        \"params\": getListaCamposPorParametroTemporal.data,\r\n                    }\r\n                }\r\n            }\r\n\r\n            GenericApi.getByDataGeneric('mas_actuaciones/plantilla-diligenciada/' + props.id_mas_actuacion, data).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        downloadBase64File(datos.content_type, datos.base_64, datos.file_name, global.Constants.TIPO_DOCUMENTO_PERMITIDO_ACTUACIONES.DOCX);\r\n                        window.showSpinner(false);\r\n                    }\r\n                    else {\r\n                        setModalState({ title: \"SINPROC No \" + radicado + \" :: \", message: datos.error.toString(), show: true, redirect: null, from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    function downloadBase64File(contentType, base64Data, fileName, extension) {\r\n        const linkSource = `data:${contentType};base64,${base64Data}`;\r\n        const downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = linkSource;\r\n        downloadLink.download = fileName;\r\n        downloadLink.click();\r\n    }\r\n\r\n    const validacionSpinner = () => {\r\n        numeroLlamados++\r\n        if(numeroLlamados >= numeroTotalLlamados){\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n \r\n    const cargarInfoParametrosFila = () => {\r\n        return (\r\n            getListaParametros.params.map((parametro, i) => {\r\n                if(i == 0){\r\n                    return(\r\n                        <tr key={i}>\r\n                            <th>\r\n                                { \"${\"+ parametro + \"}\" }\r\n                            </th>\r\n                            <td>\r\n                                { getListaParametros.numero_de_auto }\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n                else if(getListaParametros?.resultados[parametro]?.[0]?.crear_tabla === false){\r\n                    return(\r\n                        <tr key={i}>\r\n                            <th>\r\n                                { \"${\"+ parametro + \"}\" }\r\n                            </th>\r\n                            <td>\r\n                                {\r\n                                    getListaParametros?.resultados[parametro].map((dato, index) => {\r\n                                        return (\r\n                                            <label><input id={dato.dato+\"$$$\"+dato.parametro+\"$$$\"+index} name={dato.principal ? dato.grupo+\"_\"+dato.principal : dato.grupo} type=\"checkbox\" checked={dato.seleccionar} onChange={e => onChangeValue(e.target.checked, dato.dato, dato.parametro, dato.grupo, dato.principal, index)}/> { dato.dato ? dato.dato : 'SIN DATOS' }</label>\r\n                                        )\r\n                                    })                                \r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    const cargarInfoParametrosTabla = () => {\r\n        return (\r\n            getTablaParametrosData.map((parametros, indexGeneral) => (\r\n                <tr>\r\n                    <td colSpan={2}>\r\n                        <table className='table table-bordered table-striped table-vcenter js-dataTable-full'>\r\n                            <thead>\r\n                                <tr>\r\n                                    {\r\n                                        parametros.titulo.map((titulo, indexTitulo) => (\r\n                                            <th key={indexTitulo}><b>{ \"${\" + titulo + \"}\" }</b></th>\r\n                                        ))\r\n                                    }\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                    {\r\n                                        parametros.datos?.length > 0\r\n                                        ?\r\n                                            (\r\n                                                parametros.datos?.[0].map((datos, indexDatos) => (\r\n                                                    <tr>\r\n                                                        {\r\n                                                            parametros.datos.map((dato, indexDato) => (\r\n                                                                <td key={indexDato}>\r\n                                                                    {\r\n                                                                        <label>\r\n                                                                            <input\r\n                                                                                id={dato[indexDatos].dato + \"$$$\" + dato[indexDatos].parametro + \"$$$\" + dato[indexDatos].index}\r\n                                                                                name={dato[indexDatos].principal ? dato[indexDatos].grupo + \"_\" + dato[indexDatos].principal : dato[indexDatos].grupo}\r\n                                                                                type=\"checkbox\"\r\n                                                                                checked={dato[indexDatos].seleccionar}\r\n                                                                                onChange={(e) =>\r\n                                                                                    onChangeValue(\r\n                                                                                        e.target.checked,\r\n                                                                                        dato[indexDatos].dato,\r\n                                                                                        dato[indexDatos].parametro,\r\n                                                                                        dato[indexDatos].grupo,\r\n                                                                                        dato[indexDatos].principal,\r\n                                                                                        dato[indexDatos].index\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            />{\" \"}\r\n                                                                            { dato[indexDatos].dato ? dato[indexDatos].dato : 'SIN DATOS' }\r\n                                                                        </label>\r\n                                                                    }\r\n                                                                </td>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tr>\r\n                                                ))\r\n                                            )\r\n                                        :\r\n                                            null\r\n                                    }\r\n                            </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            ))\r\n        )\r\n        // return (\r\n        //     {\r\n        //         getTablaParametrosData.map((parametros, index) => (\r\n        //             <tr>\r\n        //                 <td colSpan={2}>\r\n        //                     <div>\r\n        //                         <table width={'100%'}>\r\n        //                             <thead>\r\n        //                                 <tr>\r\n        //                                     {\r\n        //                                         getTablaParametrosColumna?.map((column, columnIndex) => (\r\n        //                                             <th key={columnIndex}>{column}</th>\r\n        //                                         ))\r\n        //                                     }\r\n        //                                 </tr>\r\n        //                             </thead>\r\n        //                             <tbody>\r\n        //                                 {\r\n        //                                     getTablaParametrosData[0].map((_, rowIndex) => (\r\n        //                                         <tr key={rowIndex}>\r\n        //                                             {getTablaParametrosData.map((columna, index) => (\r\n        //                                             <td key={index}>\r\n        //                                                 {\r\n        //                                                     <label>\r\n        //                                                         <input\r\n        //                                                             id={columna[rowIndex].dato + \"$$$\" + columna[rowIndex].parametro + \"$$$\" + columna[rowIndex].index}\r\n        //                                                             name={columna[rowIndex].principal ? columna[rowIndex].grupo + \"_\" + columna[rowIndex].principal : columna[rowIndex].grupo}\r\n        //                                                             type=\"checkbox\"\r\n        //                                                             checked={columna[rowIndex].seleccionar}\r\n        //                                                             onChange={(e) =>\r\n        //                                                                 onChangeValue(\r\n        //                                                                 e.target.checked,\r\n        //                                                                 columna[rowIndex].dato,\r\n        //                                                                 columna[rowIndex].parametro,\r\n        //                                                                 columna[rowIndex].grupo,\r\n        //                                                                 columna[rowIndex].principal,\r\n        //                                                                 columna[rowIndex].index\r\n        //                                                                 )\r\n        //                                                             }\r\n        //                                                         />{\" \"}\r\n        //                                                         {columna[rowIndex].dato ? columna[rowIndex].dato : 'SIN DATOS'}\r\n        //                                                     </label>\r\n        //                                                 }\r\n        //                                             </td>\r\n        //                                             ))}\r\n        //                                         </tr>\r\n        //                                     ))\r\n        //                                 }\r\n        //                             </tbody>\r\n        //                         </table>\r\n        //                     </div>\r\n        //                 </td>\r\n        //             </tr>\r\n        //         )\r\n        //     }\r\n        // )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spinner />\r\n            <ModalGen data={modalState} />\r\n            {\r\n                getIsLoading\r\n                ?\r\n                    <div className=\"text-center\">\r\n                        <div className=\"spinner-border text-primary\" role=\"status\">\r\n                            <span className=\"sr-only\">CARGANDO...</span>\r\n                        </div>\r\n                    </div>\r\n                :\r\n                    <>\r\n                        {\r\n                            getListaParametros != null \r\n                            ?\r\n                                <>\r\n\r\n                                    {\r\n                                        getExistenDatosResultados == false\r\n                                        ?\r\n                                            <>\r\n                                                <div className='col-md-12 mt-4'>\r\n                                                    <div className=\"block-content alert-warning text-center\">\r\n                                                        <label>LA PLANTILLA NO CUENTA CON PARAMETROS</label>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <br></br>\r\n                                            </>\r\n                                        :\r\n                                            <>\r\n                                                <div className='col-md-12'>\r\n                                                    <label>PARÁMETROS DE LA PLANTILLA</label>\r\n                                                </div>\r\n                                                <div className='col-md-12 mt-2 mb-2'>\r\n                                                    <table className=\"table table-bordered table-striped table-vcenter js-dataTable-full\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th><b>PARÁMETRO</b></th>\r\n                                                                <th><b>VALOR</b></th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            { getListaParametros?.resultados ? cargarInfoParametrosFila() : null }\r\n                                                            { getListaParametros?.resultados ? cargarInfoParametrosTabla() : null }\r\n                                                        </tbody>\r\n                                                    </table>\r\n                                                </div>\r\n                                                {\r\n                                                    getCamposAdicionales && getCamposAdicionales.length > 0 ?\r\n                                                    <>\r\n                                                        <div className='col-md-12' style={{ marginTop: '50px' }}>\r\n                                                            <label>CAMPOS ADICIONALES</label>\r\n                                                        </div>\r\n                                                        <div className='col-md-12 mt-2 mb-2'>\r\n                                                            <DataTable className=\"table table-bordered table-striped table-vcenter js-dataTable-full text-uppercase\"\r\n                                                                columns={columnsCampos}\r\n                                                                data={getCamposAdicionales}\r\n                                                                noDataComponent={global.Constants.DATA_TABLE.SIN_DATOS_TABLE}\r\n                                                                striped\r\n                                                            />\r\n                                                        </div>\r\n                                                    </>\r\n                                                    : null\r\n                                                }\r\n                                                <div className='col-md-12 mt-4 mb-2'>\r\n                                                    <label className='mr-2' htmlFor=\"documento_ruta\">DESCARGAR DOCUMENTO PRE-DILIGENCIADO CON LOS VALORES SELECCIONADOS</label>\r\n                                                    <button type=\"button\" title='Descargar documento diligenciado' onClick={() => descargarArchivo()} className=\"btn btn-rounded btn-primary\"> <i className=\"fas fa-file-word\"></i></button>\r\n                                                </div>\r\n                                            </>\r\n                                    }\r\n                                </>\r\n                            :\r\n                                <div className='col-md-12 mt-4'>\r\n                                    <label>CARGANDO PARÁMETROS DE LA PLANTILLA...</label>\r\n                                </div>\r\n                        }\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n\r\n    \r\n}\r\n\r\nexport default ActuacionParametrosPlantillaForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}