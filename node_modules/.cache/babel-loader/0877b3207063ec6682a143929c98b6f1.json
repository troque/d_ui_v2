{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/toArray.js\").default;\n\nvar _defineProperty2 = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schemaTypeEx = schemaTypeEx;\nexports.isObject = isObject;\nexports.deepmerge = deepmerge;\nexports.createNumberedArray = createNumberedArray;\nexports.processOptions = processOptions;\nexports.pathToArray = pathToArray;\nexports.objectTraverse = objectTraverse;\nexports.inputName = inputName;\nexports.valueOrCreate = valueOrCreate;\nexports.valueFromEvent = valueFromEvent;\nexports.getPropsTransform = getPropsTransform;\nexports.getSkinComponent = getSkinComponent;\nexports.schemaType = void 0;\n\nvar _translation_utils = require(\"./translation_utils\");\n\nvar _excluded = [\"fieldSchema\", \"schemaTypeName\", \"field\", \"options\", \"addDefault\"];\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Translates schema specification type. Types can\n * be specified with a string or a constructor like\n * String.\n *\n * @param {string|function} type Type specification.\n *\n * @returns {string} Type as string.\n */\n\n\nvar schemaType = function schemaType(type) {\n  if (typeof type == 'function') return typeof type();else return type;\n};\n/**\n * Translates the schema's type specification. Type\n * can be specified as with schemaType and also can\n * be a subschema or an array of other schema.\n *\n * @param {any} type Can be:\n *    - String like 'number'\n *    - Constructor like Number\n *    - Schema instance\n *    - Array with schema instance in the first element.\n *        Example: [client]\n */\n\n\nexports.schemaType = schemaType;\n\nfunction schemaTypeEx(type) {\n  if (typeof type == 'object' && type._type == 'schema') return 'schema';else {\n    var isArray = Array.isArray(type);\n    var first = type && type[0];\n    var isSchema = isArray && type.length > 0 && first._type && first._type == 'schema';\n    if (isSchema) return 'array';else return schemaType(type);\n  }\n} // Thanks Mariuzzo\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\n\n\nfunction isObject(item) {\n  return typeof item == 'object' && !(item instanceof Date);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\n\nfunction deepmerge(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (!sources.length) return target;\n  var source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (var key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          if (Array.isArray(source[key])) Object.assign(target, _defineProperty2({}, key, []));else Object.assign(target, _defineProperty2({}, key, {}));\n        }\n\n        deepmerge(target[key], source[key]);\n      } else {\n        Object.assign(target, _defineProperty2({}, key, source[key]));\n      }\n    }\n  }\n\n  return deepmerge.apply(void 0, [target].concat(sources));\n}\n\nfunction createNumberedArray(length) {\n  return Array.from({\n    length: length\n  }, function (_, k) {\n    return k;\n  });\n}\n/**\n * Converts options from different formats to\n * [ { label, value } ]\n *\n * You can usually pass control props here. Options will\n * be acquired from fieldSchema.\n *\n * @param {string} schemaTypeName Model name\n * @param {string} field Field name\n * @param {function|array} options Array with options. If\n *  it's a function it will be called with props.\n *  Array (or resulting one after calling) will be processed\n *  to populate label and value.\n */\n\n\nfunction processOptions(_ref) {\n  var fieldSchema = _ref.fieldSchema,\n      schemaTypeName = _ref.schemaTypeName,\n      field = _ref.field,\n      options = _ref.options,\n      addDefault = _ref.addDefault,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (fieldSchema && !options) options = fieldSchema.options;\n  var extracted = typeof options == 'function' ? options(_objectSpread({\n    name: name,\n    field: field,\n    schemaTypeName: schemaTypeName\n  }, rest)) : options;\n\n  var getLabel = function getLabel(option) {\n    return (0, _translation_utils.trModel)(schemaTypeName, field, option);\n  };\n\n  var processed = extracted.map(function (option) {\n    if (typeof option == 'string') {\n      return {\n        value: option,\n        label: getLabel(option)\n      };\n    } else {\n      if ('key' in option) {\n        return _objectSpread(_objectSpread({}, option), {}, {\n          label: option.label || getLabel(option.key)\n        });\n      } else return option;\n    }\n  });\n\n  if (addDefault) {\n    return [{\n      label: (0, _translation_utils.trModel)(schemaTypeName, field, '_default'),\n      value: ''\n    }].concat(_toConsumableArray(processed));\n  } else {\n    return processed;\n  }\n}\n/**\n * Transforms typical form path to array. Example:\n *\n * `pathToArray(\"pets[4].name\") --> ['pets', '4', 'name']`\n * `pathToArray(\"pets.4.name\") --> ['pets', '4', 'name']`\n */\n\n\nfunction pathToArray(path) {\n  var unsquared = path.replace(/[[.](.*?)[\\].]/g, '.$1.');\n  return unsquared.split('.');\n}\n/**\n * Traverses an object using an array of keys.\n *\n * @param {object} object Object to traverse\n * @param {string|array} path Path in the form `\"pets.4.name\"`,\n *  `\"pets[4].name\"` or `['pets', '4', 'name']`\n * @param {object} options Optional options:\n *  {\n *    createIfMissing: false, // Creates missing entities with objects,\n *    returnValue: false,     // Ultimate value if you are not interested\n *                            // in context\n *  }\n *\n * @returns {array} Array in the form `[ object, attribute ]`\n *  (or empty if subobject is not found).\n *\n *  This allows you to mutate original object like this:\n *\n *  const [ container, attribute ] = objectTraverse(obj, path)\n *  container[attribute] = newValue\n *\n * TODO When createIfMissing, use path brackets as a\n * hint to when to create arrays or objects\n */\n\n\nfunction objectTraverse(object, pathOrArray) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var createIfMissing = options.createIfMissing,\n      returnValue = options.returnValue;\n  var arrayed = Array.isArray(pathOrArray) ? pathOrArray : pathToArray(pathOrArray);\n\n  var _arrayed = _toArray(arrayed),\n      next = _arrayed[0],\n      rest = _arrayed.slice(1);\n\n  if (next in object) {\n    if (rest.length == 0) {\n      if (returnValue) return object[next];else return [object, next];\n    } else {\n      if (createIfMissing && typeof object[next] == 'undefined') object[next] = {};\n      return objectTraverse(object[next], rest, options);\n    }\n  } else {\n    if (createIfMissing) {\n      object[next] = {}; // Repeat\n\n      return objectTraverse(object, arrayed, options);\n    } else {\n      if (returnValue) return null;else return [];\n    }\n  }\n}\n/**\n * Returns input name in the form 'parent.index.field'\n *\n * @param {string} parent Optional parent\n * @param {number|string} index Optional index\n * @param {string} field Field\n *\n * @returns {string} Depends:\n *      - If you passed index, then '<parent>.<index>.<field>'\n *      - Else if you passed parent, then '<parent>.<field>'\n *      - Else field\n */\n\n\nfunction inputName(_ref2) {\n  var parent = _ref2.parent,\n      index = _ref2.index,\n      field = _ref2.field;\n  if (typeof index == 'undefined') return parent ? \"\".concat(parent, \".\").concat(field) : field;else return \"\".concat(parent || '', \".\").concat(index, \".\").concat(field);\n}\n/**\n * If attr is not found in object, we create it in the form\n * object[attr] = defaultObject\n *\n * @param {object} object Object\n * @param {string} attr Key\n * @param {function} create Function that returns a brand new\n *    object to assign if it didn't exist. Important: It must be\n *    a new object.\n *\n * @returns New or existing object[attr]\n *\n * @example\n *  const obj = { existing: { count: 42 } }\n *\n *  valueOrCreate(obj, 'existing', () => ({ count: 0 }))\n *    // -> { count: 42 }\n *  valueOrCreate(obj, 'invented', () => ({ count: 0 }))\n *    // -> { count: 0 }\n */\n\n\nfunction valueOrCreate(object, attr, create) {\n  if (!(attr in object)) object[attr] = create();\n  return object[attr];\n}\n/**\n * @param {any} thing If thing is an event, value\n *  will be extracted. I consider event anything\n *  that has target with type\n * @returns {any} value\n */\n\n\nfunction valueFromEvent(thing) {\n  if ('target' in thing) {\n    var target = thing.target,\n        _thing$target = thing.target,\n        type = _thing$target.type,\n        value = _thing$target.value;\n\n    switch (type) {\n      case 'checkbox':\n        return target.checked;\n\n      default:\n        return value;\n    }\n  } else {\n    return thing;\n  }\n}\n/**\n * Gets props transform from skin element (formelly `render`)\n */\n\n\nfunction getPropsTransform(skinElement) {\n  return skinElement.props || skinElement.render;\n}\n/**\n * Gets component from skin element\n */\n\n\nfunction getSkinComponent(skinElement) {\n  return skinElement.component || skinElement.render;\n}","map":{"version":3,"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/utils.js"],"names":["Object","defineProperty","exports","value","schemaTypeEx","isObject","deepmerge","createNumberedArray","processOptions","pathToArray","objectTraverse","inputName","valueOrCreate","valueFromEvent","getPropsTransform","getSkinComponent","schemaType","_translation_utils","require","_excluded","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","type","_type","first","isSchema","item","Date","sources","shift","assign","concat","_","k","_ref","fieldSchema","schemaTypeName","field","options","addDefault","rest","extracted","getLabel","option","trModel","processed","map","label","path","unsquared","replace","split","pathOrArray","createIfMissing","returnValue","arrayed","next","parent","index","attr","create","thing","checked","skinElement","props","render","component"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACAF,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACAH,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACAJ,OAAO,CAACK,mBAAR,GAA8BA,mBAA9B;AACAL,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACAN,OAAO,CAACO,WAAR,GAAsBA,WAAtB;AACAP,OAAO,CAACQ,cAAR,GAAyBA,cAAzB;AACAR,OAAO,CAACS,SAAR,GAAoBA,SAApB;AACAT,OAAO,CAACU,aAAR,GAAwBA,aAAxB;AACAV,OAAO,CAACW,cAAR,GAAyBA,cAAzB;AACAX,OAAO,CAACY,iBAAR,GAA4BA,iBAA5B;AACAZ,OAAO,CAACa,gBAAR,GAA2BA,gBAA3B;AACAb,OAAO,CAACc,UAAR,GAAqB,KAAK,CAA1B;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,qBAAD,CAAhC;;AAEA,IAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,EAAkC,OAAlC,EAA2C,SAA3C,EAAsD,YAAtD,CAAlB;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,IAA2BE,gBAAgB,CAACF,GAAD,CAA3C,IAAoDG,2BAA2B,CAACH,GAAD,CAA/E,IAAwFI,kBAAkB,EAAjH;AAAsH;;AAEzJ,SAASA,kBAAT,GAA8B;AAAE,QAAM,IAAIC,SAAJ,CAAc,sIAAd,CAAN;AAA8J;;AAE9L,SAASF,2BAAT,CAAqCG,CAArC,EAAwCC,MAAxC,EAAgD;AAAE,MAAI,CAACD,CAAL,EAAQ;AAAQ,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAOE,iBAAiB,CAACF,CAAD,EAAIC,MAAJ,CAAxB;AAAqC,MAAIE,CAAC,GAAG9B,MAAM,CAAC+B,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,CAA/B,EAAkCO,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,CAAR;AAAwD,MAAIJ,CAAC,KAAK,QAAN,IAAkBH,CAAC,CAACQ,WAAxB,EAAqCL,CAAC,GAAGH,CAAC,CAACQ,WAAF,CAAcC,IAAlB;AAAwB,MAAIN,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,KAAzB,EAAgC,OAAOO,KAAK,CAACC,IAAN,CAAWX,CAAX,CAAP;AAAsB,MAAIG,CAAC,KAAK,WAAN,IAAqB,2CAA2CS,IAA3C,CAAgDT,CAAhD,CAAzB,EAA6E,OAAOD,iBAAiB,CAACF,CAAD,EAAIC,MAAJ,CAAxB;AAAsC;;AAEha,SAASL,gBAAT,CAA0BiB,IAA1B,EAAgC;AAAE,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCD,IAAI,CAACC,MAAM,CAACC,QAAR,CAAJ,IAAyB,IAA1D,IAAkEF,IAAI,CAAC,YAAD,CAAJ,IAAsB,IAA5F,EAAkG,OAAOH,KAAK,CAACC,IAAN,CAAWE,IAAX,CAAP;AAA0B;;AAE9J,SAASlB,kBAAT,CAA4BD,GAA5B,EAAiC;AAAE,MAAIgB,KAAK,CAACM,OAAN,CAActB,GAAd,CAAJ,EAAwB,OAAOQ,iBAAiB,CAACR,GAAD,CAAxB;AAAgC;;AAE3F,SAASQ,iBAAT,CAA2BR,GAA3B,EAAgCuB,GAAhC,EAAqC;AAAE,MAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,GAAGvB,GAAG,CAACwB,MAA7B,EAAqCD,GAAG,GAAGvB,GAAG,CAACwB,MAAV;;AAAkB,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,IAAIV,KAAJ,CAAUO,GAAV,CAAvB,EAAuCE,CAAC,GAAGF,GAA3C,EAAgDE,CAAC,EAAjD;AAAqDC,IAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUzB,GAAG,CAACyB,CAAD,CAAb;AAArD;;AAAuE,SAAOC,IAAP;AAAc;;AAEnL,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,cAAzB,EAAyC;AAAE,MAAIC,IAAI,GAAGnD,MAAM,CAACmD,IAAP,CAAYF,MAAZ,CAAX;;AAAgC,MAAIjD,MAAM,CAACoD,qBAAX,EAAkC;AAAE,QAAIC,OAAO,GAAGrD,MAAM,CAACoD,qBAAP,CAA6BH,MAA7B,CAAd;;AAAoD,QAAIC,cAAJ,EAAoB;AAAEG,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,UAAUC,GAAV,EAAe;AAAE,eAAOvD,MAAM,CAACwD,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AAAiE,OAAjG,CAAV;AAA+G;;AAACN,IAAAA,IAAI,CAACO,IAAL,CAAUC,KAAV,CAAgBR,IAAhB,EAAsBE,OAAtB;AAAiC;;AAAC,SAAOF,IAAP;AAAc;;AAEzV,SAASS,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,SAAS,CAACjB,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AAAE,QAAIiB,MAAM,GAAGD,SAAS,CAAChB,CAAD,CAAT,IAAgB,IAAhB,GAAuBgB,SAAS,CAAChB,CAAD,CAAhC,GAAsC,EAAnD;;AAAuD,QAAIA,CAAC,GAAG,CAAR,EAAW;AAAEE,MAAAA,OAAO,CAAChD,MAAM,CAAC+D,MAAD,CAAP,EAAiB,IAAjB,CAAP,CAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AAAEC,QAAAA,eAAe,CAACL,MAAD,EAASI,GAAT,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAf;AAA4C,OAAnG;AAAuG,KAApH,MAA0H,IAAIjE,MAAM,CAACmE,yBAAX,EAAsC;AAAEnE,MAAAA,MAAM,CAACoE,gBAAP,CAAwBP,MAAxB,EAAgC7D,MAAM,CAACmE,yBAAP,CAAiCJ,MAAjC,CAAhC;AAA4E,KAApH,MAA0H;AAAEf,MAAAA,OAAO,CAAChD,MAAM,CAAC+D,MAAD,CAAP,CAAP,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAAEjE,QAAAA,MAAM,CAACC,cAAP,CAAsB4D,MAAtB,EAA8BI,GAA9B,EAAmCjE,MAAM,CAACwD,wBAAP,CAAgCO,MAAhC,EAAwCE,GAAxC,CAAnC;AAAmF,OAApI;AAAwI;AAAE;;AAAC,SAAOJ,MAAP;AAAgB;;AAEthB,SAASK,eAAT,CAAyBG,GAAzB,EAA8BJ,GAA9B,EAAmC9D,KAAnC,EAA0C;AAAE,MAAI8D,GAAG,IAAII,GAAX,EAAgB;AAAErE,IAAAA,MAAM,CAACC,cAAP,CAAsBoE,GAAtB,EAA2BJ,GAA3B,EAAgC;AAAE9D,MAAAA,KAAK,EAAEA,KAAT;AAAgBsD,MAAAA,UAAU,EAAE,IAA5B;AAAkCa,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEF,IAAAA,GAAG,CAACJ,GAAD,CAAH,GAAW9D,KAAX;AAAmB;;AAAC,SAAOkE,GAAP;AAAa;;AAEjN,SAASG,wBAAT,CAAkCT,MAAlC,EAA0CU,QAA1C,EAAoD;AAAE,MAAIV,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;;AAAW,MAAIF,MAAM,GAAGa,6BAA6B,CAACX,MAAD,EAASU,QAAT,CAA1C;;AAA8D,MAAIR,GAAJ,EAASnB,CAAT;;AAAY,MAAI9C,MAAM,CAACoD,qBAAX,EAAkC;AAAE,QAAIuB,gBAAgB,GAAG3E,MAAM,CAACoD,qBAAP,CAA6BW,MAA7B,CAAvB;;AAA6D,SAAKjB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG6B,gBAAgB,CAAC9B,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;AAAEmB,MAAAA,GAAG,GAAGU,gBAAgB,CAAC7B,CAAD,CAAtB;AAA2B,UAAI2B,QAAQ,CAACG,OAAT,CAAiBX,GAAjB,KAAyB,CAA7B,EAAgC;AAAU,UAAI,CAACjE,MAAM,CAAC+B,SAAP,CAAiB8C,oBAAjB,CAAsC5C,IAAtC,CAA2C8B,MAA3C,EAAmDE,GAAnD,CAAL,EAA8D;AAAUJ,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AAA4B;AAAE;;AAAC,SAAOJ,MAAP;AAAgB;;AAE5e,SAASa,6BAAT,CAAuCX,MAAvC,EAA+CU,QAA/C,EAAyD;AAAE,MAAIV,MAAM,IAAI,IAAd,EAAoB,OAAO,EAAP;AAAW,MAAIF,MAAM,GAAG,EAAb;AAAiB,MAAIiB,UAAU,GAAG9E,MAAM,CAACmD,IAAP,CAAYY,MAAZ,CAAjB;AAAsC,MAAIE,GAAJ,EAASnB,CAAT;;AAAY,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgC,UAAU,CAACjC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AAAEmB,IAAAA,GAAG,GAAGa,UAAU,CAAChC,CAAD,CAAhB;AAAqB,QAAI2B,QAAQ,CAACG,OAAT,CAAiBX,GAAjB,KAAyB,CAA7B,EAAgC;AAAUJ,IAAAA,MAAM,CAACI,GAAD,CAAN,GAAcF,MAAM,CAACE,GAAD,CAApB;AAA4B;;AAAC,SAAOJ,MAAP;AAAgB;AAEnT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAM7C,UAAU,GAAG,SAAbA,UAAa,CAAA+D,IAAI,EAAI;AACzB,MAAI,OAAOA,IAAP,IAAe,UAAnB,EAA+B,OAAO,OAAOA,IAAI,EAAlB,CAA/B,KAAyD,OAAOA,IAAP;AAC1D,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA7E,OAAO,CAACc,UAAR,GAAqBA,UAArB;;AAEA,SAASZ,YAAT,CAAsB2E,IAAtB,EAA4B;AAC1B,MAAI,OAAOA,IAAP,IAAe,QAAf,IAA2BA,IAAI,CAACC,KAAL,IAAc,QAA7C,EAAuD,OAAO,QAAP,CAAvD,KAA4E;AAC1E,QAAMrC,OAAO,GAAGN,KAAK,CAACM,OAAN,CAAcoC,IAAd,CAAhB;AACA,QAAME,KAAK,GAAGF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA1B;AACA,QAAMG,QAAQ,GAAGvC,OAAO,IAAIoC,IAAI,CAAClC,MAAL,GAAc,CAAzB,IAA8BoC,KAAK,CAACD,KAApC,IAA6CC,KAAK,CAACD,KAAN,IAAe,QAA7E;AACA,QAAIE,QAAJ,EAAc,OAAO,OAAP,CAAd,KAAkC,OAAOlE,UAAU,CAAC+D,IAAD,CAAjB;AACnC;AACF,C,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,SAAS1E,QAAT,CAAkB8E,IAAlB,EAAwB;AACtB,SAAO,OAAOA,IAAP,IAAe,QAAf,IAA2B,EAAEA,IAAI,YAAYC,IAAlB,CAAlC;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,SAAS9E,SAAT,CAAmBuD,MAAnB,EAAuC;AAAA,oCAATwB,OAAS;AAATA,IAAAA,OAAS;AAAA;;AACrC,MAAI,CAACA,OAAO,CAACxC,MAAb,EAAqB,OAAOgB,MAAP;AACrB,MAAME,MAAM,GAAGsB,OAAO,CAACC,KAAR,EAAf;;AAEA,MAAIjF,QAAQ,CAACwD,MAAD,CAAR,IAAoBxD,QAAQ,CAAC0D,MAAD,CAAhC,EAA0C;AACxC,SAAK,IAAME,GAAX,IAAkBF,MAAlB,EAA0B;AACxB,UAAI1D,QAAQ,CAAC0D,MAAM,CAACE,GAAD,CAAP,CAAZ,EAA2B;AACzB,YAAI,CAACJ,MAAM,CAACI,GAAD,CAAX,EAAkB;AAChB,cAAI5B,KAAK,CAACM,OAAN,CAAcoB,MAAM,CAACE,GAAD,CAApB,CAAJ,EAAgCjE,MAAM,CAACuF,MAAP,CAAc1B,MAAd,uBAC7BI,GAD6B,EACvB,EADuB,GAAhC,KAEQjE,MAAM,CAACuF,MAAP,CAAc1B,MAAd,uBACLI,GADK,EACC,EADD;AAGT;;AAED3D,QAAAA,SAAS,CAACuD,MAAM,CAACI,GAAD,CAAP,EAAcF,MAAM,CAACE,GAAD,CAApB,CAAT;AACD,OAVD,MAUO;AACLjE,QAAAA,MAAM,CAACuF,MAAP,CAAc1B,MAAd,uBACGI,GADH,EACSF,MAAM,CAACE,GAAD,CADf;AAGD;AACF;AACF;;AAED,SAAO3D,SAAS,CAACqD,KAAV,CAAgB,KAAK,CAArB,EAAwB,CAACE,MAAD,EAAS2B,MAAT,CAAgBH,OAAhB,CAAxB,CAAP;AACD;;AAED,SAAS9E,mBAAT,CAA6BsC,MAA7B,EAAqC;AACnC,SAAOR,KAAK,CAACC,IAAN,CAAW;AAChBO,IAAAA,MAAM,EAANA;AADgB,GAAX,EAEJ,UAAC4C,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAV;AAAA,GAFI,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASlF,cAAT,CAAwBmF,IAAxB,EAA8B;AAC5B,MACEC,WADF,GAMID,IANJ,CACEC,WADF;AAAA,MAEEC,cAFF,GAMIF,IANJ,CAEEE,cAFF;AAAA,MAGEC,KAHF,GAMIH,IANJ,CAGEG,KAHF;AAAA,MAIEC,OAJF,GAMIJ,IANJ,CAIEI,OAJF;AAAA,MAKEC,UALF,GAMIL,IANJ,CAKEK,UALF;AAAA,MAOIC,IAPJ,GAOWzB,wBAAwB,CAACmB,IAAD,EAAOxE,SAAP,CAPnC;;AASA,MAAIyE,WAAW,IAAI,CAACG,OAApB,EAA6BA,OAAO,GAAGH,WAAW,CAACG,OAAtB;AAC7B,MAAMG,SAAS,GAAG,OAAOH,OAAP,IAAkB,UAAlB,GAA+BA,OAAO,CAACnC,aAAa,CAAC;AACrExB,IAAAA,IAAI,EAAJA,IADqE;AAErE0D,IAAAA,KAAK,EAALA,KAFqE;AAGrED,IAAAA,cAAc,EAAdA;AAHqE,GAAD,EAInEI,IAJmE,CAAd,CAAtC,GAINF,OAJZ;;AAMA,MAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM;AAAA,WAAI,CAAC,GAAGnF,kBAAkB,CAACoF,OAAvB,EAAgCR,cAAhC,EAAgDC,KAAhD,EAAuDM,MAAvD,CAAJ;AAAA,GAAvB;;AAEA,MAAME,SAAS,GAAGJ,SAAS,CAACK,GAAV,CAAc,UAAAH,MAAM,EAAI;AACxC,QAAI,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AAC7B,aAAO;AACLjG,QAAAA,KAAK,EAAEiG,MADF;AAELI,QAAAA,KAAK,EAAEL,QAAQ,CAACC,MAAD;AAFV,OAAP;AAID,KALD,MAKO;AACL,UAAI,SAASA,MAAb,EAAqB;AACnB,eAAOxC,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKwC,MAAL,CAAd,EAA4B,EAA5B,EAAgC;AAClDI,UAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAP,IAAgBL,QAAQ,CAACC,MAAM,CAACnC,GAAR;AADmB,SAAhC,CAApB;AAGD,OAJD,MAIO,OAAOmC,MAAP;AACR;AACF,GAbiB,CAAlB;;AAeA,MAAIJ,UAAJ,EAAgB;AACd,WAAO,CAAC;AACNQ,MAAAA,KAAK,EAAE,CAAC,GAAGvF,kBAAkB,CAACoF,OAAvB,EAAgCR,cAAhC,EAAgDC,KAAhD,EAAuD,UAAvD,CADD;AAEN3F,MAAAA,KAAK,EAAE;AAFD,KAAD,EAGJqF,MAHI,CAGGpE,kBAAkB,CAACkF,SAAD,CAHrB,CAAP;AAID,GALD,MAKO;AACL,WAAOA,SAAP;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAS7F,WAAT,CAAqBgG,IAArB,EAA2B;AACzB,MAAMC,SAAS,GAAGD,IAAI,CAACE,OAAL,CAAa,iBAAb,EAAgC,MAAhC,CAAlB;AACA,SAAOD,SAAS,CAACE,KAAV,CAAgB,GAAhB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASlG,cAAT,CAAwBuC,MAAxB,EAAgC4D,WAAhC,EAA2D;AAAA,MAAdd,OAAc,uEAAJ,EAAI;AACzD,MACEe,eADF,GAGIf,OAHJ,CACEe,eADF;AAAA,MAEEC,WAFF,GAGIhB,OAHJ,CAEEgB,WAFF;AAIA,MAAMC,OAAO,GAAG3E,KAAK,CAACM,OAAN,CAAckE,WAAd,IAA6BA,WAA7B,GAA2CpG,WAAW,CAACoG,WAAD,CAAtE;;AACA,0BAAwBG,OAAxB;AAAA,MAAOC,IAAP;AAAA,MAAgBhB,IAAhB;;AAEA,MAAIgB,IAAI,IAAIhE,MAAZ,EAAoB;AAClB,QAAIgD,IAAI,CAACpD,MAAL,IAAe,CAAnB,EAAsB;AACpB,UAAIkE,WAAJ,EAAiB,OAAO9D,MAAM,CAACgE,IAAD,CAAb,CAAjB,KAA0C,OAAO,CAAChE,MAAD,EAASgE,IAAT,CAAP;AAC3C,KAFD,MAEO;AACL,UAAIH,eAAe,IAAI,OAAO7D,MAAM,CAACgE,IAAD,CAAb,IAAuB,WAA9C,EAA2DhE,MAAM,CAACgE,IAAD,CAAN,GAAe,EAAf;AAC3D,aAAOvG,cAAc,CAACuC,MAAM,CAACgE,IAAD,CAAP,EAAehB,IAAf,EAAqBF,OAArB,CAArB;AACD;AACF,GAPD,MAOO;AACL,QAAIe,eAAJ,EAAqB;AACnB7D,MAAAA,MAAM,CAACgE,IAAD,CAAN,GAAe,EAAf,CADmB,CACA;;AAEnB,aAAOvG,cAAc,CAACuC,MAAD,EAAS+D,OAAT,EAAkBjB,OAAlB,CAArB;AACD,KAJD,MAIO;AACL,UAAIgB,WAAJ,EAAiB,OAAO,IAAP,CAAjB,KAAkC,OAAO,EAAP;AACnC;AACF;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASpG,SAAT,QAIG;AAAA,MAHDuG,MAGC,SAHDA,MAGC;AAAA,MAFDC,KAEC,SAFDA,KAEC;AAAA,MADDrB,KACC,SADDA,KACC;AACD,MAAI,OAAOqB,KAAP,IAAgB,WAApB,EAAiC,OAAOD,MAAM,aAAMA,MAAN,cAAgBpB,KAAhB,IAA0BA,KAAvC,CAAjC,KAAmF,iBAAUoB,MAAM,IAAI,EAApB,cAA0BC,KAA1B,cAAmCrB,KAAnC;AACpF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASlF,aAAT,CAAuBqC,MAAvB,EAA+BmE,IAA/B,EAAqCC,MAArC,EAA6C;AAC3C,MAAI,EAAED,IAAI,IAAInE,MAAV,CAAJ,EAAuBA,MAAM,CAACmE,IAAD,CAAN,GAAeC,MAAM,EAArB;AACvB,SAAOpE,MAAM,CAACmE,IAAD,CAAb;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASvG,cAAT,CAAwByG,KAAxB,EAA+B;AAC7B,MAAI,YAAYA,KAAhB,EAAuB;AACrB,QACEzD,MADF,GAMIyD,KANJ,CACEzD,MADF;AAAA,wBAMIyD,KANJ,CAEEzD,MAFF;AAAA,QAGIkB,IAHJ,iBAGIA,IAHJ;AAAA,QAII5E,KAJJ,iBAIIA,KAJJ;;AAQA,YAAQ4E,IAAR;AACE,WAAK,UAAL;AACE,eAAOlB,MAAM,CAAC0D,OAAd;;AAEF;AACE,eAAOpH,KAAP;AALJ;AAOD,GAhBD,MAgBO;AACL,WAAOmH,KAAP;AACD;AACF;AACD;AACA;AACA;;;AAGA,SAASxG,iBAAT,CAA2B0G,WAA3B,EAAwC;AACtC,SAAOA,WAAW,CAACC,KAAZ,IAAqBD,WAAW,CAACE,MAAxC;AACD;AACD;AACA;AACA;;;AAGA,SAAS3G,gBAAT,CAA0ByG,WAA1B,EAAuC;AACrC,SAAOA,WAAW,CAACG,SAAZ,IAAyBH,WAAW,CAACE,MAA5C;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schemaTypeEx = schemaTypeEx;\nexports.isObject = isObject;\nexports.deepmerge = deepmerge;\nexports.createNumberedArray = createNumberedArray;\nexports.processOptions = processOptions;\nexports.pathToArray = pathToArray;\nexports.objectTraverse = objectTraverse;\nexports.inputName = inputName;\nexports.valueOrCreate = valueOrCreate;\nexports.valueFromEvent = valueFromEvent;\nexports.getPropsTransform = getPropsTransform;\nexports.getSkinComponent = getSkinComponent;\nexports.schemaType = void 0;\n\nvar _translation_utils = require(\"./translation_utils\");\n\nconst _excluded = [\"fieldSchema\", \"schemaTypeName\", \"field\", \"options\", \"addDefault\"];\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**\n * Translates schema specification type. Types can\n * be specified with a string or a constructor like\n * String.\n *\n * @param {string|function} type Type specification.\n *\n * @returns {string} Type as string.\n */\nconst schemaType = type => {\n  if (typeof type == 'function') return typeof type();else return type;\n};\n/**\n * Translates the schema's type specification. Type\n * can be specified as with schemaType and also can\n * be a subschema or an array of other schema.\n *\n * @param {any} type Can be:\n *    - String like 'number'\n *    - Constructor like Number\n *    - Schema instance\n *    - Array with schema instance in the first element.\n *        Example: [client]\n */\n\n\nexports.schemaType = schemaType;\n\nfunction schemaTypeEx(type) {\n  if (typeof type == 'object' && type._type == 'schema') return 'schema';else {\n    const isArray = Array.isArray(type);\n    const first = type && type[0];\n    const isSchema = isArray && type.length > 0 && first._type && first._type == 'schema';\n    if (isSchema) return 'array';else return schemaType(type);\n  }\n} // Thanks Mariuzzo\n// https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\n\n\nfunction isObject(item) {\n  return typeof item == 'object' && !(item instanceof Date);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\n\nfunction deepmerge(target, ...sources) {\n  if (!sources.length) return target;\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          if (Array.isArray(source[key])) Object.assign(target, {\n            [key]: []\n          });else Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        deepmerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return deepmerge.apply(void 0, [target].concat(sources));\n}\n\nfunction createNumberedArray(length) {\n  return Array.from({\n    length\n  }, (_, k) => k);\n}\n/**\n * Converts options from different formats to\n * [ { label, value } ]\n *\n * You can usually pass control props here. Options will\n * be acquired from fieldSchema.\n *\n * @param {string} schemaTypeName Model name\n * @param {string} field Field name\n * @param {function|array} options Array with options. If\n *  it's a function it will be called with props.\n *  Array (or resulting one after calling) will be processed\n *  to populate label and value.\n */\n\n\nfunction processOptions(_ref) {\n  let {\n    fieldSchema,\n    schemaTypeName,\n    field,\n    options,\n    addDefault\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (fieldSchema && !options) options = fieldSchema.options;\n  const extracted = typeof options == 'function' ? options(_objectSpread({\n    name,\n    field,\n    schemaTypeName\n  }, rest)) : options;\n\n  const getLabel = option => (0, _translation_utils.trModel)(schemaTypeName, field, option);\n\n  const processed = extracted.map(option => {\n    if (typeof option == 'string') {\n      return {\n        value: option,\n        label: getLabel(option)\n      };\n    } else {\n      if ('key' in option) {\n        return _objectSpread(_objectSpread({}, option), {}, {\n          label: option.label || getLabel(option.key)\n        });\n      } else return option;\n    }\n  });\n\n  if (addDefault) {\n    return [{\n      label: (0, _translation_utils.trModel)(schemaTypeName, field, '_default'),\n      value: ''\n    }].concat(_toConsumableArray(processed));\n  } else {\n    return processed;\n  }\n}\n/**\n * Transforms typical form path to array. Example:\n *\n * `pathToArray(\"pets[4].name\") --> ['pets', '4', 'name']`\n * `pathToArray(\"pets.4.name\") --> ['pets', '4', 'name']`\n */\n\n\nfunction pathToArray(path) {\n  const unsquared = path.replace(/[[.](.*?)[\\].]/g, '.$1.');\n  return unsquared.split('.');\n}\n/**\n * Traverses an object using an array of keys.\n *\n * @param {object} object Object to traverse\n * @param {string|array} path Path in the form `\"pets.4.name\"`,\n *  `\"pets[4].name\"` or `['pets', '4', 'name']`\n * @param {object} options Optional options:\n *  {\n *    createIfMissing: false, // Creates missing entities with objects,\n *    returnValue: false,     // Ultimate value if you are not interested\n *                            // in context\n *  }\n *\n * @returns {array} Array in the form `[ object, attribute ]`\n *  (or empty if subobject is not found).\n *\n *  This allows you to mutate original object like this:\n *\n *  const [ container, attribute ] = objectTraverse(obj, path)\n *  container[attribute] = newValue\n *\n * TODO When createIfMissing, use path brackets as a\n * hint to when to create arrays or objects\n */\n\n\nfunction objectTraverse(object, pathOrArray, options = {}) {\n  const {\n    createIfMissing,\n    returnValue\n  } = options;\n  const arrayed = Array.isArray(pathOrArray) ? pathOrArray : pathToArray(pathOrArray);\n  const [next, ...rest] = arrayed;\n\n  if (next in object) {\n    if (rest.length == 0) {\n      if (returnValue) return object[next];else return [object, next];\n    } else {\n      if (createIfMissing && typeof object[next] == 'undefined') object[next] = {};\n      return objectTraverse(object[next], rest, options);\n    }\n  } else {\n    if (createIfMissing) {\n      object[next] = {}; // Repeat\n\n      return objectTraverse(object, arrayed, options);\n    } else {\n      if (returnValue) return null;else return [];\n    }\n  }\n}\n/**\n * Returns input name in the form 'parent.index.field'\n *\n * @param {string} parent Optional parent\n * @param {number|string} index Optional index\n * @param {string} field Field\n *\n * @returns {string} Depends:\n *      - If you passed index, then '<parent>.<index>.<field>'\n *      - Else if you passed parent, then '<parent>.<field>'\n *      - Else field\n */\n\n\nfunction inputName({\n  parent,\n  index,\n  field\n}) {\n  if (typeof index == 'undefined') return parent ? `${parent}.${field}` : field;else return `${parent || ''}.${index}.${field}`;\n}\n/**\n * If attr is not found in object, we create it in the form\n * object[attr] = defaultObject\n *\n * @param {object} object Object\n * @param {string} attr Key\n * @param {function} create Function that returns a brand new\n *    object to assign if it didn't exist. Important: It must be\n *    a new object.\n *\n * @returns New or existing object[attr]\n *\n * @example\n *  const obj = { existing: { count: 42 } }\n *\n *  valueOrCreate(obj, 'existing', () => ({ count: 0 }))\n *    // -> { count: 42 }\n *  valueOrCreate(obj, 'invented', () => ({ count: 0 }))\n *    // -> { count: 0 }\n */\n\n\nfunction valueOrCreate(object, attr, create) {\n  if (!(attr in object)) object[attr] = create();\n  return object[attr];\n}\n/**\n * @param {any} thing If thing is an event, value\n *  will be extracted. I consider event anything\n *  that has target with type\n * @returns {any} value\n */\n\n\nfunction valueFromEvent(thing) {\n  if ('target' in thing) {\n    const {\n      target,\n      target: {\n        type,\n        value\n      }\n    } = thing;\n\n    switch (type) {\n      case 'checkbox':\n        return target.checked;\n\n      default:\n        return value;\n    }\n  } else {\n    return thing;\n  }\n}\n/**\n * Gets props transform from skin element (formelly `render`)\n */\n\n\nfunction getPropsTransform(skinElement) {\n  return skinElement.props || skinElement.render;\n}\n/**\n * Gets component from skin element\n */\n\n\nfunction getSkinComponent(skinElement) {\n  return skinElement.component || skinElement.render;\n}"]},"metadata":{},"sourceType":"script"}