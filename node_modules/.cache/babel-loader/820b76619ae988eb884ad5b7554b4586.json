{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst RichTextFragment = require(\"./RichTextFragment\");\n\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\nclass RichText {\n  /**\n   * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n   * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n   * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n   * will set wrap text to true automatically.\n   *\n   * @param {undefined|null|Object} [node] - The node stored in the shared string\n   */\n  constructor(node) {\n    this._node = [];\n    this._cell = null;\n    this._remainingNodes = [];\n    if (node) {\n      for (let i = 0; i < node.length; i++) {\n        const fragment = node[i];\n        if (fragment.name === 'r') {\n          this._node.push(new RichTextFragment(fragment, null, this));\n        } else {\n          // special node, e.g. rPh, phoneticPr in Japanese language.\n          this._remainingNodes.push(fragment);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets which cell this {@link RichText} instance belongs to.\n   * @return {Cell|undefined} The cell this instance belongs to.\n   */\n  get cell() {\n    return this._cell;\n  }\n\n  /**\n   * Gets the how many rich text fragment this {@link RichText} instance contains\n   * @return {number} The number of fragments this {@link RichText} instance has.\n   */\n  get length() {\n    return this._node.length;\n  }\n\n  /**\n   * Gets concatenated text without styles.\n   * @return {string} concatenated text\n   */\n  text() {\n    let text = '';\n    for (let i = 0; i < this._node.length; i++) {\n      text += this.get(i).value();\n    }\n    return text;\n  }\n\n  /**\n   * Gets the instance with cell reference defined.\n   * @param {Cell} cell - Cell reference.\n   * @return {RichText} The instance with cell reference defined.\n   */\n  getInstanceWithCellRef(cell) {\n    this._cell = cell;\n    return this;\n  }\n\n  /**\n   * Returns a deep copy of this instance.\n   * If cell reference is provided, it checks line separators and calls\n   * `cell.style('wrapText', true)` when needed.\n   * @param {Cell|undefined} [cell] - The cell reference.\n   * @return {RichText} A deep copied instance\n   */\n  copy(cell) {\n    const newRichText = new RichText(_.cloneDeep(this.toXml()));\n    if (cell && _.includes(this.text(), '\\n')) {\n      cell.style('wrapText', true);\n    }\n    return newRichText;\n  }\n\n  /**\n   * Gets the ith fragment of this {@link RichText} instance.\n   * @param {number} index - The index\n   * @return {RichTextFragment} A rich text fragment\n   */\n  get(index) {\n    return this._node[index];\n  }\n\n  /**\n   * Removes a rich text fragment. This instance will be mutated.\n   * @param {number} index - the index of the fragment to remove\n   * @return {RichText} the rich text instance\n   */\n  remove(index) {\n    this._node.splice(index, 1);\n    this.removeUnsupportedNodes();\n    return this;\n  }\n\n  /**\n   * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n   * @param {string} text - the text\n   * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n   * @param {number|undefined|null} [index] - the index of the fragment to add\n   * @return {RichText} the rich text instance\n   */\n  add(text, styles, index) {\n    if (index === undefined || index === null) {\n      this._node.push(new RichTextFragment(text, styles, this));\n    } else {\n      this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n    }\n    this.removeUnsupportedNodes();\n    return this;\n  }\n\n  /**\n   * Clears this rich text\n   * @return {RichText} the rich text instance\n   */\n  clear() {\n    this._node = [];\n    this._remainingNodes = [];\n    this._cell = undefined;\n    return this;\n  }\n\n  /**\n   * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n   * @return {undefined}\n   */\n  removeUnsupportedNodes() {\n    this._remainingNodes = [];\n  }\n\n  /**\n   * Convert the rich text to an XML object.\n   * @returns {Array.<{}>} The XML form.\n   * @ignore\n   */\n  toXml() {\n    const node = [];\n    for (let i = 0; i < this._node.length; i++) {\n      node.push(this._node[i].toXml());\n    }\n    return node.concat(this._remainingNodes);\n  }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichText.name) RichText.name = \"RichText\";\nmodule.exports = RichText;","map":{"version":3,"names":["_","require","RichTextFragment","RichText","constructor","node","_node","_cell","_remainingNodes","i","length","fragment","name","push","cell","text","get","value","getInstanceWithCellRef","copy","newRichText","cloneDeep","toXml","includes","style","index","remove","splice","removeUnsupportedNodes","add","styles","undefined","clear","concat","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/RichText.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\nconst RichTextFragment = require(\"./RichTextFragment\");\n\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\nclass RichText {\n    /**\n     * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n     * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n     * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n     * will set wrap text to true automatically.\n     *\n     * @param {undefined|null|Object} [node] - The node stored in the shared string\n     */\n    constructor(node) {\n        this._node = [];\n        this._cell = null;\n        this._remainingNodes = [];\n        if (node) {\n            for (let i = 0; i < node.length; i++) {\n                const fragment = node[i];\n                if (fragment.name === 'r') {\n                    this._node.push(new RichTextFragment(fragment, null, this));\n                } else {\n                    // special node, e.g. rPh, phoneticPr in Japanese language.\n                    this._remainingNodes.push(fragment);\n                }\n            }\n        }\n    }\n\n    /**\n     * Gets which cell this {@link RichText} instance belongs to.\n     * @return {Cell|undefined} The cell this instance belongs to.\n     */\n    get cell() {\n        return this._cell;\n    }\n\n    /**\n     * Gets the how many rich text fragment this {@link RichText} instance contains\n     * @return {number} The number of fragments this {@link RichText} instance has.\n     */\n    get length() {\n        return this._node.length;\n    }\n\n    /**\n     * Gets concatenated text without styles.\n     * @return {string} concatenated text\n     */\n    text() {\n        let text = '';\n        for (let i = 0; i < this._node.length; i++) {\n            text += this.get(i).value();\n        }\n        return text;\n    }\n\n    /**\n     * Gets the instance with cell reference defined.\n     * @param {Cell} cell - Cell reference.\n     * @return {RichText} The instance with cell reference defined.\n     */\n    getInstanceWithCellRef(cell) {\n        this._cell = cell;\n        return this;\n    }\n\n    /**\n     * Returns a deep copy of this instance.\n     * If cell reference is provided, it checks line separators and calls\n     * `cell.style('wrapText', true)` when needed.\n     * @param {Cell|undefined} [cell] - The cell reference.\n     * @return {RichText} A deep copied instance\n     */\n    copy(cell) {\n        const newRichText = new RichText(_.cloneDeep(this.toXml()));\n        if (cell && _.includes(this.text(), '\\n')) {\n            cell.style('wrapText', true);\n        }\n        return newRichText;\n    }\n\n    /**\n     * Gets the ith fragment of this {@link RichText} instance.\n     * @param {number} index - The index\n     * @return {RichTextFragment} A rich text fragment\n     */\n    get(index) {\n        return this._node[index];\n    }\n\n    /**\n     * Removes a rich text fragment. This instance will be mutated.\n     * @param {number} index - the index of the fragment to remove\n     * @return {RichText} the rich text instance\n     */\n    remove(index) {\n        this._node.splice(index, 1);\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n     * @param {string} text - the text\n     * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n     * @param {number|undefined|null} [index] - the index of the fragment to add\n     * @return {RichText} the rich text instance\n     */\n    add(text, styles, index) {\n        if (index === undefined || index === null) {\n            this._node.push(new RichTextFragment(text, styles, this));\n        } else {\n            this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n        }\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Clears this rich text\n     * @return {RichText} the rich text instance\n     */\n    clear() {\n        this._node = [];\n        this._remainingNodes = [];\n        this._cell = undefined;\n        return this;\n    }\n\n    /**\n     * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n     * @return {undefined}\n     */\n    removeUnsupportedNodes() {\n        this._remainingNodes = [];\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {Array.<{}>} The XML form.\n     * @ignore\n     */\n    toXml() {\n        const node = [];\n        for (let i = 0; i < this._node.length; i++) {\n            node.push(this._node[i].toXml());\n        }\n        return node.concat(this._remainingNodes);\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichText.name) RichText.name = \"RichText\";\n\nmodule.exports = RichText;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}