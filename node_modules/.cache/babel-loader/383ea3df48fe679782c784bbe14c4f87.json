{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLanguageTranslations = addLanguageTranslations;\nObject.defineProperty(exports, \"setLanguage\", {\n  enumerable: true,\n  get: function get() {\n    return _translate.setLanguage;\n  }\n});\nexports.setLanguageByName = setLanguageByName;\nObject.defineProperty(exports, \"tr\", {\n  enumerable: true,\n  get: function get() {\n    return _translate.tr;\n  }\n});\nexports.trError = trError;\nexports.trField = trField;\nexports.trModel = trModel;\nexports.trPath = trPath;\nexports.trPathSetBase = trPathSetBase;\nvar _translations = require(\"./translations\");\nvar _utils = require(\"./utils.js\");\nvar _translate = require(\"./translate\");\nvar defLangs = {\n  en: _translations.en,\n  es: _translations.es\n};\nvar modelBasePath = 'models';\n/**\n * Loads a language from the languages table.\n *\n * @param {string} name Language code as in `'en'` or `'fr'`.\n */\n\nfunction setLanguageByName(name) {\n  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);\n}\n/**\n * Allows to add a bunch of strings to a language\n */\n\nfunction addLanguageTranslations(lang, strings) {\n  defLangs[lang] = (0, _utils.deepmerge)(defLangs[lang], strings);\n}\n/**\n * Multipurpose semantic-ish translation.\n *\n * @param {string} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema.\n * @param {string} field Field name\n * @param {string} op Thing that varies based on\n *    the type.\n */\n\nfunction trModel(modelName, field, op) {\n  return (0, _translate.tr)(trPath(modelName, field, op));\n}\n/**\n * Translate field name\n *\n * @param {string|object} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema. It can also be an object with component\n *    props so it will figure out the values\n * @param {string} field Field name\n */\n\nfunction trField(modelName, field) {\n  if (typeof modelName == 'object') {\n    field = modelName.field;\n    modelName = modelName.schemaTypeName;\n  }\n  return (0, _translate.tr)(trPath(modelName, field, '_field'));\n}\n/**\n * Translates error message.\n *\n * @param {string} error Code of the error (usually the\n *    validation code-name)\n * @param {object} data Field configuration from `createSchema()`.\n */\n\nfunction trError(error, data) {\n  return (0, _translate.tr)(\"error.\".concat(error), data);\n}\n/**\n * Generates a model translation path.\n *\n * @param {string} model Name of the model (ie: 'client')\n * @param {string} field Name of the field\n * @param {string} op Name of the option or any subthing.\n *\n * @returns {string} id for the translation string\n */\n\nfunction trPath(model, field, op) {\n  if (typeof op == 'undefined') return [modelBasePath, model, field].join('.');else return [modelBasePath, model, field, op].join('.');\n}\n/**\n * Sets the base for the semantich(ish) translation, so\n * instead of 'models.<model>.<field>' can be\n * 'my.base.<model>.<field>'\n *\n * @param {string} newBasePath New path prepended to all\n *    string paths.\n */\n\nfunction trPathSetBase(newBasePath) {\n  modelBasePath = newBasePath;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","addLanguageTranslations","enumerable","get","_translate","setLanguage","setLanguageByName","tr","trError","trField","trModel","trPath","trPathSetBase","_translations","require","_utils","defLangs","en","es","modelBasePath","name","lang","strings","deepmerge","modelName","field","op","schemaTypeName","error","data","model","join","newBasePath"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/react-hook-form-auto/lib/translation_utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addLanguageTranslations = addLanguageTranslations;\nObject.defineProperty(exports, \"setLanguage\", {\n  enumerable: true,\n  get: function () {\n    return _translate.setLanguage;\n  }\n});\nexports.setLanguageByName = setLanguageByName;\nObject.defineProperty(exports, \"tr\", {\n  enumerable: true,\n  get: function () {\n    return _translate.tr;\n  }\n});\nexports.trError = trError;\nexports.trField = trField;\nexports.trModel = trModel;\nexports.trPath = trPath;\nexports.trPathSetBase = trPathSetBase;\n\nvar _translations = require(\"./translations\");\n\nvar _utils = require(\"./utils.js\");\n\nvar _translate = require(\"./translate\");\n\nconst defLangs = {\n  en: _translations.en,\n  es: _translations.es\n};\nlet modelBasePath = 'models';\n/**\n * Loads a language from the languages table.\n *\n * @param {string} name Language code as in `'en'` or `'fr'`.\n */\n\nfunction setLanguageByName(name) {\n  if (name in defLangs) (0, _translate.setLanguage)(defLangs[name]);\n}\n/**\n * Allows to add a bunch of strings to a language\n */\n\n\nfunction addLanguageTranslations(lang, strings) {\n  defLangs[lang] = (0, _utils.deepmerge)(defLangs[lang], strings);\n}\n/**\n * Multipurpose semantic-ish translation.\n *\n * @param {string} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema.\n * @param {string} field Field name\n * @param {string} op Thing that varies based on\n *    the type.\n */\n\n\nfunction trModel(modelName, field, op) {\n  return (0, _translate.tr)(trPath(modelName, field, op));\n}\n/**\n * Translate field name\n *\n * @param {string|object} modelName Object name, usually what\n *    you pass as the first parameter when you create\n *    the schema. It can also be an object with component\n *    props so it will figure out the values\n * @param {string} field Field name\n */\n\n\nfunction trField(modelName, field) {\n  if (typeof modelName == 'object') {\n    field = modelName.field;\n    modelName = modelName.schemaTypeName;\n  }\n\n  return (0, _translate.tr)(trPath(modelName, field, '_field'));\n}\n/**\n * Translates error message.\n *\n * @param {string} error Code of the error (usually the\n *    validation code-name)\n * @param {object} data Field configuration from `createSchema()`.\n */\n\n\nfunction trError(error, data) {\n  return (0, _translate.tr)(`error.${error}`, data);\n}\n/**\n * Generates a model translation path.\n *\n * @param {string} model Name of the model (ie: 'client')\n * @param {string} field Name of the field\n * @param {string} op Name of the option or any subthing.\n *\n * @returns {string} id for the translation string\n */\n\n\nfunction trPath(model, field, op) {\n  if (typeof op == 'undefined') return [modelBasePath, model, field].join('.');else return [modelBasePath, model, field, op].join('.');\n}\n/**\n * Sets the base for the semantich(ish) translation, so\n * instead of 'models.<model>.<field>' can be\n * 'my.base.<model>.<field>'\n *\n * @param {string} newBasePath New path prepended to all\n *    string paths.\n */\n\n\nfunction trPathSetBase(newBasePath) {\n  modelBasePath = newBasePath;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}