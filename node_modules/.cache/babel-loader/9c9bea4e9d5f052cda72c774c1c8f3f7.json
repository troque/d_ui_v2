{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n  /**\n   * Creates a new instance of ArgHandler.\n   * @param {string} name - The method name to use in error messages.\n   */\n  constructor(name) {\n    this._name = name;\n    this._cases = [];\n  }\n\n  /**\n   * Add a case.\n   * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n   * @param {Function} handler - The function to call when this case is matched.\n   * @returns {ArgHandler} The handler for chaining.\n   */\n  case(types, handler) {\n    if (arguments.length === 1) {\n      handler = types;\n      types = [];\n    }\n    if (!Array.isArray(types)) types = [types];\n    this._cases.push({\n      types,\n      handler\n    });\n    return this;\n  }\n\n  /**\n   * Handle the method arguments by checking each case in order until one matches and then call its handler.\n   * @param {Arguments|Array.<*>} args - The method arguments.\n   * @returns {*} The result of the handler.\n   * @throws {Error} Throws if no case matches.\n   */\n  handle(args) {\n    for (let i = 0; i < this._cases.length; i++) {\n      const c = this._cases[i];\n      if (this._argsMatchTypes(args, c.types)) {\n        return c.handler.apply(null, args);\n      }\n    }\n    throw new Error(`${this._name}: Invalid arguments.`);\n  }\n\n  /**\n   * Check if the arguments match the given types.\n   * @param {Arguments} args - The arguments.\n   * @param {Array.<string>} types - The types.\n   * @returns {boolean} True if matches, false otherwise.\n   * @throws {Error} Throws if unknown type.\n   * @private\n   */\n  _argsMatchTypes(args, types) {\n    if (args.length !== types.length) return false;\n    return _.every(args, (arg, i) => {\n      const type = types[i];\n      if (type === '*') return true;\n      if (type === 'nil') return _.isNil(arg);\n      if (type === 'string') return typeof arg === \"string\";\n      if (type === 'boolean') return typeof arg === \"boolean\";\n      if (type === 'number') return typeof arg === \"number\";\n      if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n      if (type === 'function') return typeof arg === \"function\";\n      if (type === 'array') return Array.isArray(arg);\n      if (type === 'date') return arg && arg.constructor === Date;\n      if (type === 'object') return arg && arg.constructor === Object;\n      if (arg && arg.constructor && arg.constructor.name === type) return true;\n      throw new Error(`Unknown type: ${type}`);\n    });\n  }\n}\nmodule.exports = ArgHandler;","map":{"version":3,"names":["_","require","ArgHandler","constructor","name","_name","_cases","case","types","handler","arguments","length","Array","isArray","push","handle","args","i","c","_argsMatchTypes","apply","Error","every","arg","type","isNil","isInteger","Date","Object","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/ArgHandler.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n    /**\n     * Creates a new instance of ArgHandler.\n     * @param {string} name - The method name to use in error messages.\n     */\n    constructor(name) {\n        this._name = name;\n        this._cases = [];\n    }\n\n    /**\n     * Add a case.\n     * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n     * @param {Function} handler - The function to call when this case is matched.\n     * @returns {ArgHandler} The handler for chaining.\n     */\n    case(types, handler) {\n        if (arguments.length === 1) {\n            handler = types;\n            types = [];\n        }\n\n        if (!Array.isArray(types)) types = [types];\n        this._cases.push({ types, handler });\n        return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n    handle(args) {\n        for (let i = 0; i < this._cases.length; i++) {\n            const c = this._cases[i];\n            if (this._argsMatchTypes(args, c.types)) {\n                return c.handler.apply(null, args);\n            }\n        }\n\n        throw new Error(`${this._name}: Invalid arguments.`);\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n    _argsMatchTypes(args, types) {\n        if (args.length !== types.length) return false;\n\n        return _.every(args, (arg, i) => {\n            const type = types[i];\n\n            if (type === '*') return true;\n            if (type === 'nil') return _.isNil(arg);\n            if (type === 'string') return typeof arg === \"string\";\n            if (type === 'boolean') return typeof arg === \"boolean\";\n            if (type === 'number') return typeof arg === \"number\";\n            if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n            if (type === 'function') return typeof arg === \"function\";\n            if (type === 'array') return Array.isArray(arg);\n            if (type === 'date') return arg && arg.constructor === Date;\n            if (type === 'object') return arg && arg.constructor === Object;\n            if (arg && arg.constructor && arg.constructor.name === type) return true;\n\n            throw new Error(`Unknown type: ${type}`);\n        });\n    }\n}\n\nmodule.exports = ArgHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}