{"ast":null,"code":"/**\n * body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nvar convert = require('encoding').convert;\nvar bodyStream = require('is-stream');\nvar PassThrough = require('stream').PassThrough;\nvar FetchError = require('./fetch-error');\nmodule.exports = Body;\n\n/**\n * Body class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body, opts) {\n  opts = opts || {};\n  this.body = body;\n  this.bodyUsed = false;\n  this.size = opts.size || 0;\n  this.timeout = opts.timeout || 0;\n  this._raw = [];\n  this._abort = false;\n}\n\n/**\n * Decode response as json\n *\n * @return  Promise\n */\nBody.prototype.json = function () {\n  var self = this;\n  return this._decode().then(function (buffer) {\n    try {\n      return JSON.parse(buffer.toString());\n    } catch (err) {\n      return Body.Promise.reject(new FetchError('invalid json response body at ' + self.url + ' reason: ' + err.message, 'invalid-json'));\n    }\n  });\n};\n\n/**\n * Decode response as text\n *\n * @return  Promise\n */\nBody.prototype.text = function () {\n  return this._decode().then(function (buffer) {\n    return buffer.toString();\n  });\n};\n\n/**\n * Decode response as buffer (non-spec api)\n *\n * @return  Promise\n */\nBody.prototype.buffer = function () {\n  return this._decode();\n};\n\n/**\n * Decode buffers into utf-8 string\n *\n * @return  Promise\n */\nBody.prototype._decode = function () {\n  var self = this;\n  if (this.bodyUsed) {\n    return Body.Promise.reject(new Error('body used already for: ' + this.url));\n  }\n  this.bodyUsed = true;\n  this._bytes = 0;\n  this._abort = false;\n  this._raw = [];\n  return new Body.Promise(function (resolve, reject) {\n    var resTimeout;\n\n    // body is string\n    if (typeof self.body === 'string') {\n      self._bytes = self.body.length;\n      self._raw = [new Buffer(self.body)];\n      return resolve(self._convert());\n    }\n\n    // body is buffer\n    if (self.body instanceof Buffer) {\n      self._bytes = self.body.length;\n      self._raw = [self.body];\n      return resolve(self._convert());\n    }\n\n    // allow timeout on slow response body\n    if (self.timeout) {\n      resTimeout = setTimeout(function () {\n        self._abort = true;\n        reject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));\n      }, self.timeout);\n    }\n\n    // handle stream error, such as incorrect content-encoding\n    self.body.on('error', function (err) {\n      reject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));\n    });\n\n    // body is stream\n    self.body.on('data', function (chunk) {\n      if (self._abort || chunk === null) {\n        return;\n      }\n      if (self.size && self._bytes + chunk.length > self.size) {\n        self._abort = true;\n        reject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));\n        return;\n      }\n      self._bytes += chunk.length;\n      self._raw.push(chunk);\n    });\n    self.body.on('end', function () {\n      if (self._abort) {\n        return;\n      }\n      clearTimeout(resTimeout);\n      resolve(self._convert());\n    });\n  });\n};\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   String  encoding  Target encoding\n * @return  String\n */\nBody.prototype._convert = function (encoding) {\n  encoding = encoding || 'utf-8';\n  var ct = this.headers.get('content-type');\n  var charset = 'utf-8';\n  var res, str;\n\n  // header\n  if (ct) {\n    // skip encoding detection altogether if not html/xml/plain text\n    if (!/text\\/html|text\\/plain|\\+xml|\\/xml/i.test(ct)) {\n      return Buffer.concat(this._raw);\n    }\n    res = /charset=([^;]*)/i.exec(ct);\n  }\n\n  // no charset in content type, peek at response body for at most 1024 bytes\n  if (!res && this._raw.length > 0) {\n    for (var i = 0; i < this._raw.length; i++) {\n      str += this._raw[i].toString();\n      if (str.length > 1024) {\n        break;\n      }\n    }\n    str = str.substr(0, 1024);\n  }\n\n  // html5\n  if (!res && str) {\n    res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n  }\n\n  // html4\n  if (!res && str) {\n    res = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n    if (res) {\n      res = /charset=(.*)/i.exec(res.pop());\n    }\n  }\n\n  // xml\n  if (!res && str) {\n    res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n  }\n\n  // found charset\n  if (res) {\n    charset = res.pop();\n\n    // prevent decode issues when sites use incorrect encoding\n    // ref: https://hsivonen.fi/encoding-menu/\n    if (charset === 'gb2312' || charset === 'gbk') {\n      charset = 'gb18030';\n    }\n  }\n\n  // turn raw buffers into a single utf-8 buffer\n  return convert(Buffer.concat(this._raw), encoding, charset);\n};\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nBody.prototype._clone = function (instance) {\n  var p1, p2;\n  var body = instance.body;\n\n  // don't allow cloning a used body\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  }\n\n  // check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n  if (bodyStream(body) && typeof body.getBoundary !== 'function') {\n    // tee instance body\n    p1 = new PassThrough();\n    p2 = new PassThrough();\n    body.pipe(p1);\n    body.pipe(p2);\n    // set instance body to teed body and return the other teed body\n    instance.body = p1;\n    body = p2;\n  }\n  return body;\n};\n\n// expose Promise\nBody.Promise = global.Promise;","map":{"version":3,"names":["convert","require","bodyStream","PassThrough","FetchError","module","exports","Body","body","opts","bodyUsed","size","timeout","_raw","_abort","prototype","json","self","_decode","then","buffer","JSON","parse","toString","err","Promise","reject","url","message","text","Error","_bytes","resolve","resTimeout","length","Buffer","_convert","setTimeout","on","chunk","push","clearTimeout","encoding","ct","headers","get","charset","res","str","test","concat","exec","i","substr","pop","_clone","instance","p1","p2","getBoundary","pipe","global"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/node-fetch/lib/body.js"],"sourcesContent":["\n/**\n * body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nvar convert = require('encoding').convert;\nvar bodyStream = require('is-stream');\nvar PassThrough = require('stream').PassThrough;\nvar FetchError = require('./fetch-error');\n\nmodule.exports = Body;\n\n/**\n * Body class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body, opts) {\n\n\topts = opts || {};\n\n\tthis.body = body;\n\tthis.bodyUsed = false;\n\tthis.size = opts.size || 0;\n\tthis.timeout = opts.timeout || 0;\n\tthis._raw = [];\n\tthis._abort = false;\n\n}\n\n/**\n * Decode response as json\n *\n * @return  Promise\n */\nBody.prototype.json = function() {\n\n\tvar self = this;\n\n\treturn this._decode().then(function(buffer) {\n\t\ttry {\n\t\t\treturn JSON.parse(buffer.toString());\n\t\t} catch (err) {\n\t\t\treturn Body.Promise.reject(new FetchError('invalid json response body at ' + self.url + ' reason: ' + err.message, 'invalid-json'));\n\t\t}\n\t});\n\n};\n\n/**\n * Decode response as text\n *\n * @return  Promise\n */\nBody.prototype.text = function() {\n\n\treturn this._decode().then(function(buffer) {\n\t\treturn buffer.toString();\n\t});\n\n};\n\n/**\n * Decode response as buffer (non-spec api)\n *\n * @return  Promise\n */\nBody.prototype.buffer = function() {\n\n\treturn this._decode();\n\n};\n\n/**\n * Decode buffers into utf-8 string\n *\n * @return  Promise\n */\nBody.prototype._decode = function() {\n\n\tvar self = this;\n\n\tif (this.bodyUsed) {\n\t\treturn Body.Promise.reject(new Error('body used already for: ' + this.url));\n\t}\n\n\tthis.bodyUsed = true;\n\tthis._bytes = 0;\n\tthis._abort = false;\n\tthis._raw = [];\n\n\treturn new Body.Promise(function(resolve, reject) {\n\t\tvar resTimeout;\n\n\t\t// body is string\n\t\tif (typeof self.body === 'string') {\n\t\t\tself._bytes = self.body.length;\n\t\t\tself._raw = [new Buffer(self.body)];\n\t\t\treturn resolve(self._convert());\n\t\t}\n\n\t\t// body is buffer\n\t\tif (self.body instanceof Buffer) {\n\t\t\tself._bytes = self.body.length;\n\t\t\tself._raw = [self.body];\n\t\t\treturn resolve(self._convert());\n\t\t}\n\n\t\t// allow timeout on slow response body\n\t\tif (self.timeout) {\n\t\t\tresTimeout = setTimeout(function() {\n\t\t\t\tself._abort = true;\n\t\t\t\treject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));\n\t\t\t}, self.timeout);\n\t\t}\n\n\t\t// handle stream error, such as incorrect content-encoding\n\t\tself.body.on('error', function(err) {\n\t\t\treject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));\n\t\t});\n\n\t\t// body is stream\n\t\tself.body.on('data', function(chunk) {\n\t\t\tif (self._abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (self.size && self._bytes + chunk.length > self.size) {\n\t\t\t\tself._abort = true;\n\t\t\t\treject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself._bytes += chunk.length;\n\t\t\tself._raw.push(chunk);\n\t\t});\n\n\t\tself.body.on('end', function() {\n\t\t\tif (self._abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\t\t\tresolve(self._convert());\n\t\t});\n\t});\n\n};\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   String  encoding  Target encoding\n * @return  String\n */\nBody.prototype._convert = function(encoding) {\n\n\tencoding = encoding || 'utf-8';\n\n\tvar ct = this.headers.get('content-type');\n\tvar charset = 'utf-8';\n\tvar res, str;\n\n\t// header\n\tif (ct) {\n\t\t// skip encoding detection altogether if not html/xml/plain text\n\t\tif (!/text\\/html|text\\/plain|\\+xml|\\/xml/i.test(ct)) {\n\t\t\treturn Buffer.concat(this._raw);\n\t\t}\n\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tif (!res && this._raw.length > 0) {\n\t\tfor (var i = 0; i < this._raw.length; i++) {\n\t\t\tstr += this._raw[i].toString()\n\t\t\tif (str.length > 1024) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tstr = str.substr(0, 1024);\n\t}\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(\n\t\tBuffer.concat(this._raw)\n\t\t, encoding\n\t\t, charset\n\t);\n\n};\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nBody.prototype._clone = function(instance) {\n\tvar p1, p2;\n\tvar body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (bodyStream(body) && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance.body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}