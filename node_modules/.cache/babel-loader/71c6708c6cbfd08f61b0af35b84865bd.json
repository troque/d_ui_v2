{"ast":null,"code":"import AuthApi from '../Api/Services/AuthApi'; // return the user data from the session storage\n\nexport const getUser = () => {\n  const userStr = sessionStorage.getItem('user');\n  if (userStr) return JSON.parse(userStr);else return null;\n}; // return the token from the session storage\n\nexport const getToken = () => {\n  return sessionStorage.getItem('token') || null;\n};\nexport const getBearerToken = () => {\n  const token = getToken();\n  return `Bearer ${token}`;\n}; // remove the token and user from the session storage\n\nexport const removeUserSession = () => {\n  sessionStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n}; // set the token and user from the session storage\n\nexport const setUserSession = (token, user, functionalities) => {\n  sessionStorage.setItem('token', token);\n  sessionStorage.setItem('user', JSON.stringify(user));\n  sessionStorage.setItem('functionalities', JSON.stringify(functionalities));\n  sessionStorage.setItem('roles', JSON.stringify(user.roles));\n}; //valida acceso de usuario a modulo y funcionalida\n// export const hasAccess = async (modulo, funcionalidad) => {\n//     return await AuthApi.hasAccess(modulo, funcionalidad);\n//  }\n\nexport const hasAccess = (modulo, funcionalidad) => {\n  try {\n    var userRoles = JSON.parse(sessionStorage.getItem('roles'));\n    if (userRoles != undefined && userRoles.split(\",\").includes('Administrador')) return true;\n    var arrayFunc = JSON.parse(JSON.parse(sessionStorage.getItem('functionalities') || null));\n    const found = arrayFunc.find(element => element.modulo == modulo && element.funcionalidad == funcionalidad);\n    return found != undefined;\n  } catch (ex) {\n    console.log(ex);\n    return false;\n  }\n}; // return the user data from the session storage\n\nexport const getLinks = () => {};","map":{"version":3,"sources":["C:/w2d/personeria/personeria-ui/src/components/Utils/Common.js"],"names":["AuthApi","getUser","userStr","sessionStorage","getItem","JSON","parse","getToken","getBearerToken","token","removeUserSession","removeItem","setUserSession","user","functionalities","setItem","stringify","roles","hasAccess","modulo","funcionalidad","userRoles","undefined","split","includes","arrayFunc","found","find","element","ex","console","log","getLinks"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAhB;AACA,MAAIF,OAAJ,EAAa,OAAOG,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAP,CAAb,KACK,OAAO,IAAP;AACR,CAJM,C,CAMP;;AACA,OAAO,MAAMK,QAAQ,GAAG,MAAM;AAC1B,SAAOJ,cAAc,CAACC,OAAf,CAAuB,OAAvB,KAAmC,IAA1C;AACH,CAFM;AAIP,OAAO,MAAMI,cAAc,GAAG,MAAM;AAChC,QAAMC,KAAK,GAAGF,QAAQ,EAAtB;AACA,SAAQ,UAASE,KAAM,EAAvB;AACH,CAHM,C,CAKP;;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnCP,EAAAA,cAAc,CAACQ,UAAf,CAA0B,OAA1B;AACAR,EAAAA,cAAc,CAACQ,UAAf,CAA0B,MAA1B;AACH,CAHM,C,CAKP;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACH,KAAD,EAAQI,IAAR,EAAcC,eAAd,KAAkC;AAC5DX,EAAAA,cAAc,CAACY,OAAf,CAAuB,OAAvB,EAAgCN,KAAhC;AACAN,EAAAA,cAAc,CAACY,OAAf,CAAuB,MAAvB,EAA+BV,IAAI,CAACW,SAAL,CAAeH,IAAf,CAA/B;AACAV,EAAAA,cAAc,CAACY,OAAf,CAAuB,iBAAvB,EAA0CV,IAAI,CAACW,SAAL,CAAeF,eAAf,CAA1C;AACAX,EAAAA,cAAc,CAACY,OAAf,CAAuB,OAAvB,EAAgCV,IAAI,CAACW,SAAL,CAAeH,IAAI,CAACI,KAApB,CAAhC;AACH,CALM,C,CAOP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,aAAT,KAA2B;AAChD,MAAI;AACA,QAAIC,SAAS,GAAGhB,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAhB;AACA,QAAIiB,SAAS,IAAIC,SAAb,IAA0BD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqBC,QAArB,CAA8B,eAA9B,CAA9B,EAA8E,OAAO,IAAP;AAC9E,QAAIC,SAAS,GAAGpB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,iBAAvB,KAA6C,IAAxD,CAAX,CAAhB;AACA,UAAMsB,KAAK,GAAGD,SAAS,CAACE,IAAV,CAAeC,OAAO,IAAIA,OAAO,CAACT,MAAR,IAAkBA,MAAlB,IAA4BS,OAAO,CAACR,aAAR,IAAyBA,aAA/E,CAAd;AACA,WAAOM,KAAK,IAAIJ,SAAhB;AACH,GAND,CAOA,OAAOO,EAAP,EAAW;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,WAAO,KAAP;AACH;AACJ,CAZM,C,CAcP;;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAM,CAE7B,CAFM","sourcesContent":["import AuthApi from '../Api/Services/AuthApi';\r\n\r\n// return the user data from the session storage\r\nexport const getUser = () => {\r\n    const userStr = sessionStorage.getItem('user');\r\n    if (userStr) return JSON.parse(userStr);\r\n    else return null;\r\n}\r\n\r\n// return the token from the session storage\r\nexport const getToken = () => {\r\n    return sessionStorage.getItem('token') || null;\r\n}\r\n\r\nexport const getBearerToken = () => {\r\n    const token = getToken();\r\n    return `Bearer ${token}`;\r\n}\r\n\r\n// remove the token and user from the session storage\r\nexport const removeUserSession = () => {\r\n    sessionStorage.removeItem('token');\r\n    sessionStorage.removeItem('user');\r\n}\r\n\r\n// set the token and user from the session storage\r\nexport const setUserSession = (token, user, functionalities) => {\r\n    sessionStorage.setItem('token', token);\r\n    sessionStorage.setItem('user', JSON.stringify(user));\r\n    sessionStorage.setItem('functionalities', JSON.stringify(functionalities));\r\n    sessionStorage.setItem('roles', JSON.stringify(user.roles));\r\n}\r\n\r\n//valida acceso de usuario a modulo y funcionalida\r\n// export const hasAccess = async (modulo, funcionalidad) => {\r\n//     return await AuthApi.hasAccess(modulo, funcionalidad);\r\n//  }\r\n\r\nexport const hasAccess = (modulo, funcionalidad) => {\r\n    try {\r\n        var userRoles = JSON.parse(sessionStorage.getItem('roles'));\r\n        if (userRoles != undefined && userRoles.split(\",\").includes('Administrador')) return true;\r\n        var arrayFunc = JSON.parse(JSON.parse(sessionStorage.getItem('functionalities') || null));\r\n        const found = arrayFunc.find(element => element.modulo == modulo && element.funcionalidad == funcionalidad);\r\n        return found != undefined;\r\n    }\r\n    catch (ex) {\r\n        console.log(ex);\r\n        return false;\r\n    }\r\n}\r\n\r\n// return the user data from the session storage\r\nexport const getLinks = () => {\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}