{"ast":null,"code":"import _regeneratorRuntime from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import Spinner from'../../Utils/Spinner';import ModalGen from'../../Utils/Modals/ModalGeneric';import{ErrorMessage,Field,Form,Formik}from'formik';import{Link}from\"react-router-dom\";import GenericApi from'../../Api/Services/GenericApi';import{useLocation}from'react-router-dom';import{getUser}from'../../../components/Utils/Common';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function AgregarUsuarioParaFirmaMecanica(){var _useState=useState({title:\"\",message:\"\",show:false}),_useState2=_slicedToArray(_useState,2),getModalState=_useState2[0],setModalState=_useState2[1];var _useState3=useState({data:[],links:[],meta:[]}),_useState4=_slicedToArray(_useState3,2),getListaUsuarios=_useState4[0],setListaUsuarios=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),getUsuarioSeleccionado=_useState6[0],setUsuarioSeleccionado=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),getTipoFirmaSeleccionada=_useState8[0],setTipoFirmaSeleccionada=_useState8[1];var _useState9=useState({data:{}}),_useState10=_slicedToArray(_useState9,2),getTipoFirmas=_useState10[0],setTipoFirmas=_useState10[1];var location=useLocation();var _location$state=location.state,from=_location$state.from,selected_id_etapa=_location$state.selected_id_etapa,id=_location$state.id,nombre=_location$state.nombre,estadoActualActuacion=_location$state.estadoActualActuacion,titulo=_location$state.titulo,valor=_location$state.valor,solicitante=_location$state.solicitante,tipoActuacion=_location$state.tipoActuacion,actuacionIdMaestra=_location$state.actuacionIdMaestra;var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),getNombreProceso=_useState12[0],setNombreProceso=_useState12[1];var _useState13=useState({ver_detalle:\"/ActuacionesVer/\"+from.procesoDisciplinarioId+\"/\"+selected_id_etapa+\"/1\"}),_useState14=_slicedToArray(_useState13,2),getRoutes=_useState14[0],setRoutes=_useState14[1];var mensajeTituloPantalla=\"El usuario agregado recibirá una notificación por correo para que pueda revisar y firmar el documento\";useEffect(function(){// Metodo principal\nfunction fetchData(){return _fetchData.apply(this,arguments);}// Metodo principal\nfunction _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Se carga el nombre del proceso\nnombreProceso();case 1:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);var nombreProceso=function nombreProceso(){// Se quita el cargando\nwindow.showSpinner(true);// Se inicializa la API\nGenericApi.getByIdGeneric(\"nombre-proceso\",from.procesoDisciplinarioId).then(// Se inicializa la variable de respuesta\nfunction(datos){// Se valida que no haya error\nif(!datos.error){// Se setea los datos\nsetNombreProceso(datos.data.attributes.nombre);// Se llama el metodo\ncargarUsuariosDependencia();}});};var cargarUsuariosDependencia=function cargarUsuariosDependencia(){// Se captura el id de la dependencia del usuario\nvar iduserdependencia=getUser().id_dependencia;// Se consume la API\nGenericApi.getByIdGeneric(\"usuario/get-todos-usuarios-dependencia\",iduserdependencia).then(// Se inicializa la variable de respuesta\nfunction(datos){// Se valida que no haya error\nif(!datos.error){// Se setea la lista de usuarios\nsetListaUsuarios(datos);}else{// Se setea el modal\nsetModalState({title:getNombreProceso.toUpperCase()+\" :: AGREGAR USUARIOS FIRMA MECANICA\",message:datos.error.toString(),show:true,redirect:'/Transacciones',from:{from:from},alert:global.Constants.TIPO_ALERTA.ERROR});}// Se carga el metodo de los tipos de firma\nallFirmas();});};// Metodo encargado de traer la lista de tipos de firmas\nvar allFirmas=function allFirmas(){// Se inicializa la API\nGenericApi.getGeneric('mas-tipo-firma').then(// Se inicializa la variable de respuesta\nfunction(datos){// Se quita el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error){// Se setea la lista a la constante\nsetTipoFirmas(datos);}});};// Metodo encargado de enviar los valores al backend\nvar enviarDatos=function enviarDatos(valores){// Se usa el cargando\nwindow.showSpinner(true);// Se inicializa el array con la informacion\nvar data={\"data\":{\"type\":\"Agregar Usuario\",\"attributes\":{\"id_actuacion\":id,\"id_user\":getUsuarioSeleccionado,\"tipo_firma\":getTipoFirmaSeleccionada,\"uuid_proceso_disciplinario\":from.procesoDisciplinarioId}}};// Se inicializa la variable del titulo y mensaje del modal\nvar tituloModal=getNombreProceso+\" :: Agregar usuario para firma\";var mensajeModal=global.Constants.MENSAJES_MODAL.EXITOSO;// Se inicializa la API con su data\nGenericApi.addGeneric(\"actuaciones/agregar-usuario-para-firma-mecanica\",data).then(// Se inicializa la variable de respuesta\nfunction(datos){// Se quita el cargando\nwindow.showSpinner(false);// Se valida que no haya error\nif(!datos.error&&datos.data){// Se muestra el show modal en caso de exito\nsetModalState({title:tituloModal.toUpperCase(),message:global.Constants.MENSAJES_MODAL.EXITOSO,show:true,redirect:\"/ActuacionesVer/\"+id+\"/\"+selected_id_etapa+\"/1\",from:{from:from,selected_id_etapa:selected_id_etapa,id:id,nombre:nombre,estadoActualActuacion:estadoActualActuacion,tipoActuacion:tipoActuacion,actuacionIdMaestra:actuacionIdMaestra},alert:global.Constants.TIPO_ALERTA.EXITO});}else{// Se muestra el show modal en caso de error\nsetModalState({title:tituloModal.toUpperCase(),message:'REGISTRO FALLIDO: '+datos.toUpperCase(),show:true,alert:global.Constants.TIPO_ALERTA.ERROR});}});};// Metodo encargado de asignar el valor del usuario seleccionado\nvar selectChangelistarUsuarios=function selectChangelistarUsuarios(e){// Se setea el valor enviado por parametros\nsetUsuarioSeleccionado(e.target.value);};// Metodo encargado de asignar el valor del tipo de firma seleccionada\nvar selectChangeTipoFirma=function selectChangeTipoFirma(e){// Se setea el valor enviado por parametros\nsetTipoFirmaSeleccionada(e.target.value);};// Metodo encargado de listar los usuarios\nvar selectUsuario=function selectUsuario(){// Se retorna\nreturn(// Se recorre el array de firmas\ngetListaUsuarios.data.map(function(u,i){// Se valida que el estado este activo\nif(u.attributes.estado==1){// Se retorna el valor\nreturn/*#__PURE__*/_jsx(\"option\",{value:u.id,children:u.attributes.nombre+\" \"+u.attributes.apellido+\" (\"+u.attributes.name+\")\"},u.id);}}));};// Metodo encargado de listar los tipos de firma\nvar selectTipoFirmas=function selectTipoFirmas(){// Se retorna\nreturn(// Se recorre el array de firmas\ngetTipoFirmas.data.map(function(firma,i){// Se valida que el estado este activo\nif(firma.attributes.estado==1){// Se retorna el valor\nreturn/*#__PURE__*/_jsx(\"option\",{value:firma.id,children:firma.attributes.nombre},firma.id);}}));};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{}),/*#__PURE__*/_jsx(ModalGen,{data:getModalState}),/*#__PURE__*/_jsx(Formik,{initialValues:{},enableReinitialize:true,validate:function validate(valores){},onSubmit:function onSubmit(valores,_ref){var resetForm=_ref.resetForm;enviarDatos(valores);},children:function children(_ref2){var errors=_ref2.errors;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"w2d_block let\",children:/*#__PURE__*/_jsx(\"nav\",{\"aria-label\":\"breadcrumb\",children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb breadcrumb-alt push\",children:[/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(Link,{underline:\"hover\",className:\"text-dark\",to:\"/MisPendientes\",children:/*#__PURE__*/_jsx(\"small\",{children:\"Mis Pendientes\"})})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(Link,{underline:\"hover\",className:\"text-dark\",to:\"/RamasProceso/\",children:/*#__PURE__*/_jsx(\"small\",{children:\"Ramas del proceso\"})})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(Link,{underline:\"hover\",className:\"text-dark\",to:\"/ActuacionesLista/\",state:{from:from,selected_id_etapa:selected_id_etapa},children:/*#__PURE__*/_jsx(\"small\",{children:\"Actuaciones\"})})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsx(Link,{underline:\"hover\",className:\"text-dark\",to:getRoutes.ver_detalle,state:{from:from,selected_id_etapa:selected_id_etapa,id:id,nombre:nombre,estadoActualActuacion:estadoActualActuacion},children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Actuaci\\xF3n \",nombre]})})]}),/*#__PURE__*/_jsxs(\"li\",{className:\"breadcrumb-item\",children:[\" \",/*#__PURE__*/_jsxs(\"small\",{children:[tipoActuacion==0?\"Actuaciones\":tipoActuacion==1?'Impedimentos':'Comisorio',\" Aprobar/Rechazar\"]})]})]})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"block block-themed\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"block-header\",children:/*#__PURE__*/_jsxs(\"h3\",{className:\"block-title\",children:[getNombreProceso.toUpperCase(),\" :: \",tipoActuacion==0?\"ACTUACIÓN\":tipoActuacion==1?'IMPEDIMENTO':'COMISORIO',\" :: \",titulo.toUpperCase(),\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-warning\",role:\"alert\",children:mensajeTituloPantalla.toUpperCase()})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"listarUsuarios\",children:[\"LISTA DE USUARIOS \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),/*#__PURE__*/_jsxs(Field,{as:\"select\",className:\"form-control\",id:\"listarUsuarios\",name:\"listarUsuarios\",value:getUsuarioSeleccionado,onChange:selectChangelistarUsuarios,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"SELECCIONA\"}),getListaUsuarios.data.length>0?selectUsuario():null]}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"listarUsuarios\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.listarUsuarios});}})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-12\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"listarTipoFirma\",children:[\"TIPO FIRMA \",/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:\"*\"})]}),/*#__PURE__*/_jsxs(Field,{as:\"select\",className:\"form-control\",id:\"listarTipoFirma\",name:\"listarTipoFirma\",value:getTipoFirmaSeleccionada,onChange:selectChangeTipoFirma,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"SELECCIONA\"}),getTipoFirmas.data.length>=1?selectTipoFirmas():null]}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"listarTipoFirma\",component:function component(){return/*#__PURE__*/_jsx(\"span\",{className:\"text-danger\",children:errors.listarTipoFirma});}})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"block-content block-content-full text-right\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-rounded btn-primary\",children:\"ACEPTAR\"}),/*#__PURE__*/_jsx(Link,{to:getRoutes.ver_detalle,state:{from:from,selected_id_etapa:selected_id_etapa,id:id,nombre:nombre,estadoActualActuacion:estadoActualActuacion,tipoActuacion:tipoActuacion,actuacionIdMaestra:actuacionIdMaestra},className:\"font-size-h5 font-w600\",children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-rounded btn-outline-primary\",children:\"CANCELAR\"})})]})]})]})]});}})]});}export default AgregarUsuarioParaFirmaMecanica;","map":{"version":3,"names":["React","useEffect","useState","Spinner","ModalGen","ErrorMessage","Field","Form","Formik","Link","GenericApi","useLocation","getUser","AgregarUsuarioParaFirmaMecanica","title","message","show","getModalState","setModalState","data","links","meta","getListaUsuarios","setListaUsuarios","getUsuarioSeleccionado","setUsuarioSeleccionado","getTipoFirmaSeleccionada","setTipoFirmaSeleccionada","getTipoFirmas","setTipoFirmas","location","state","from","selected_id_etapa","id","nombre","estadoActualActuacion","titulo","valor","solicitante","tipoActuacion","actuacionIdMaestra","getNombreProceso","setNombreProceso","ver_detalle","procesoDisciplinarioId","getRoutes","setRoutes","mensajeTituloPantalla","fetchData","nombreProceso","window","showSpinner","getByIdGeneric","then","datos","error","attributes","cargarUsuariosDependencia","iduserdependencia","id_dependencia","toUpperCase","toString","redirect","alert","global","Constants","TIPO_ALERTA","ERROR","allFirmas","getGeneric","enviarDatos","valores","tituloModal","mensajeModal","MENSAJES_MODAL","EXITOSO","addGeneric","EXITO","selectChangelistarUsuarios","e","target","value","selectChangeTipoFirma","selectUsuario","map","u","i","estado","apellido","name","selectTipoFirmas","firma","resetForm","errors","length","listarUsuarios","listarTipoFirma"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/Actuaciones/AgregarUsuarioParaFirmaMecanica.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Spinner from '../../Utils/Spinner';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getUser } from '../../../components/Utils/Common';\r\n\r\nfunction AgregarUsuarioParaFirmaMecanica() {\r\n\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [getListaUsuarios, setListaUsuarios] = useState({ data: [], links: [], meta: [] });\r\n    const [getUsuarioSeleccionado, setUsuarioSeleccionado] = useState();\r\n    const [getTipoFirmaSeleccionada, setTipoFirmaSeleccionada] = useState();\r\n    const [getTipoFirmas, setTipoFirmas] = useState({ data: {} });\r\n    const location = useLocation()\r\n    const { from, selected_id_etapa, id, nombre, estadoActualActuacion, titulo, valor, solicitante, tipoActuacion, actuacionIdMaestra } = location.state;\r\n    const [getNombreProceso, setNombreProceso] = useState('');\r\n\r\n    const [getRoutes, setRoutes] = useState({\r\n        ver_detalle: \"/ActuacionesVer/\" + from.procesoDisciplinarioId + \"/\" + selected_id_etapa + \"/1\"\r\n    });\r\n\r\n    const mensajeTituloPantalla = \"El usuario agregado recibirá una notificación por correo para que pueda revisar y firmar el documento\";\r\n\r\n    useEffect(() => {\r\n\r\n        // Metodo principal\r\n        async function fetchData() {\r\n\r\n            // Se carga el nombre del proceso\r\n            nombreProceso();\r\n        }\r\n\r\n        // Metodo principal\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    const nombreProceso = () => {\r\n\r\n        // Se quita el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getByIdGeneric(\"nombre-proceso\", from.procesoDisciplinarioId).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se setea los datos\r\n                    setNombreProceso(datos.data.attributes.nombre);\r\n\r\n                    // Se llama el metodo\r\n                    cargarUsuariosDependencia();\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const cargarUsuariosDependencia = () => {\r\n\r\n        // Se captura el id de la dependencia del usuario\r\n        const iduserdependencia = getUser().id_dependencia;\r\n\r\n        // Se consume la API\r\n        GenericApi.getByIdGeneric(\"usuario/get-todos-usuarios-dependencia\", iduserdependencia).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se setea la lista de usuarios\r\n                    setListaUsuarios(datos);\r\n                } else {\r\n\r\n                    // Se setea el modal\r\n                    setModalState({ title: getNombreProceso.toUpperCase() + \" :: AGREGAR USUARIOS FIRMA MECANICA\", message: datos.error.toString(), show: true, redirect: '/Transacciones', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n\r\n                // Se carga el metodo de los tipos de firma\r\n                allFirmas();\r\n            }\r\n        );\r\n    }\r\n\r\n    // Metodo encargado de traer la lista de tipos de firmas\r\n    const allFirmas = () => {\r\n\r\n        // Se inicializa la API\r\n        GenericApi.getGeneric('mas-tipo-firma').then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se quita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se setea la lista a la constante\r\n                    setTipoFirmas(datos);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de enviar los valores al backend\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se usa el cargando\r\n        window.showSpinner(true);\r\n\r\n        // Se inicializa el array con la informacion\r\n        let data = {\r\n            \"data\": {\r\n                \"type\": \"Agregar Usuario\",\r\n                \"attributes\": {\r\n                    \"id_actuacion\": id,\r\n                    \"id_user\": getUsuarioSeleccionado,\r\n                    \"tipo_firma\": getTipoFirmaSeleccionada,\r\n                    \"uuid_proceso_disciplinario\": from.procesoDisciplinarioId\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se inicializa la variable del titulo y mensaje del modal\r\n        const tituloModal = getNombreProceso + \" :: Agregar usuario para firma\";\r\n        const mensajeModal = global.Constants.MENSAJES_MODAL.EXITOSO;\r\n\r\n        // Se inicializa la API con su data\r\n        GenericApi.addGeneric(\"actuaciones/agregar-usuario-para-firma-mecanica\", data).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se quita el cargando\r\n                window.showSpinner(false);\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error && datos.data) {\r\n\r\n                    // Se muestra el show modal en caso de exito\r\n                    setModalState(\r\n                        {\r\n                            title: tituloModal.toUpperCase(),\r\n                            message: global.Constants.MENSAJES_MODAL.EXITOSO,\r\n                            show: true, redirect: \"/ActuacionesVer/\" + id + \"/\" + selected_id_etapa + \"/1\",\r\n                            from: {\r\n                                from: from,\r\n                                selected_id_etapa: selected_id_etapa,\r\n                                id: id,\r\n                                nombre: nombre,\r\n                                estadoActualActuacion: estadoActualActuacion,\r\n                                tipoActuacion: tipoActuacion,\r\n                                actuacionIdMaestra: actuacionIdMaestra\r\n                            },\r\n                            alert: global.Constants.TIPO_ALERTA.EXITO\r\n                        });\r\n                } else {\r\n\r\n                    // Se muestra el show modal en caso de error\r\n                    setModalState({ title: tituloModal.toUpperCase(), message: 'REGISTRO FALLIDO: ' + datos.toUpperCase(), show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de asignar el valor del usuario seleccionado\r\n    const selectChangelistarUsuarios = (e) => {\r\n\r\n        // Se setea el valor enviado por parametros\r\n        setUsuarioSeleccionado(e.target.value);\r\n    }\r\n\r\n    // Metodo encargado de asignar el valor del tipo de firma seleccionada\r\n    const selectChangeTipoFirma = (e) => {\r\n\r\n        // Se setea el valor enviado por parametros\r\n        setTipoFirmaSeleccionada(e.target.value);\r\n    }\r\n\r\n    // Metodo encargado de listar los usuarios\r\n    const selectUsuario = () => {\r\n\r\n        // Se retorna\r\n        return (\r\n\r\n            // Se recorre el array de firmas\r\n            getListaUsuarios.data.map((u, i) => {\r\n\r\n                // Se valida que el estado este activo\r\n                if (u.attributes.estado == 1) {\r\n\r\n                    // Se retorna el valor\r\n                    return (\r\n                        <option key={u.id} value={u.id}>{u.attributes.nombre + \" \" + u.attributes.apellido + \" (\" + u.attributes.name + \")\"}</option>\r\n                    );\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // Metodo encargado de listar los tipos de firma\r\n    const selectTipoFirmas = () => {\r\n\r\n        // Se retorna\r\n        return (\r\n\r\n            // Se recorre el array de firmas\r\n            getTipoFirmas.data.map((firma, i) => {\r\n\r\n                // Se valida que el estado este activo\r\n                if (firma.attributes.estado == 1) {\r\n\r\n                    // Se retorna el valor\r\n                    return (\r\n                        <option key={firma.id} value={firma.id}>{firma.attributes.nombre}</option>\r\n                    );\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n                    enviarDatos(valores);\r\n                }}\r\n            >\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"w2d_block let\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/MisPendientes`}><small>Mis Pendientes</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/RamasProceso/`}><small>Ramas del proceso</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/ActuacionesLista/`} state={{ from: from, selected_id_etapa: selected_id_etapa }}><small>Actuaciones</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={getRoutes.ver_detalle} state={{ from: from, selected_id_etapa: selected_id_etapa, id: id, nombre: nombre, estadoActualActuacion: estadoActualActuacion }}><small>Actuación {nombre}</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <small>{tipoActuacion == 0 ? \"Actuaciones\" : (tipoActuacion == 1 ? 'Impedimentos' : 'Comisorio')} Aprobar/Rechazar</small></li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n                        <div className=\"block block-themed\">\r\n                            <div className=\"block-header\">\r\n                                <h3 className=\"block-title\">{getNombreProceso.toUpperCase()} :: {tipoActuacion == 0 ? \"ACTUACIÓN\" : (tipoActuacion == 1 ? 'IMPEDIMENTO' : 'COMISORIO')} :: {titulo.toUpperCase()} </h3>\r\n                            </div>\r\n                            <div className=\"block-content\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                                            {mensajeTituloPantalla.toUpperCase()}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"listarUsuarios\">LISTA DE USUARIOS <span className=\"text-danger\">*</span></label>\r\n                                            <Field as=\"select\" className=\"form-control\" id=\"listarUsuarios\" name=\"listarUsuarios\" value={getUsuarioSeleccionado} onChange={selectChangelistarUsuarios}>\r\n                                                <option value=\"\">SELECCIONA</option>\r\n                                                {getListaUsuarios.data.length > 0 ? selectUsuario() : null}\r\n                                            </Field>\r\n                                            <ErrorMessage name=\"listarUsuarios\" component={() => (<span className=\"text-danger\">{errors.listarUsuarios}</span>)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"listarTipoFirma\">TIPO FIRMA <span className=\"text-danger\">*</span></label>\r\n                                            <Field as=\"select\" className=\"form-control\" id=\"listarTipoFirma\" name=\"listarTipoFirma\" value={getTipoFirmaSeleccionada} onChange={selectChangeTipoFirma}>\r\n                                                <option value=\"\">SELECCIONA</option>\r\n                                                {getTipoFirmas.data.length >= 1 ? selectTipoFirmas() : null}\r\n                                            </Field>\r\n                                            <ErrorMessage name=\"listarTipoFirma\" component={() => (<span className=\"text-danger\">{errors.listarTipoFirma}</span>)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-rounded btn-primary\">ACEPTAR</button>\r\n                                    <Link to={getRoutes.ver_detalle} state={{ from: from, selected_id_etapa: selected_id_etapa, id: id, nombre: nombre, estadoActualActuacion: estadoActualActuacion, tipoActuacion: tipoActuacion, actuacionIdMaestra: actuacionIdMaestra }} className=\"font-size-h5 font-w600\" >\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >CANCELAR</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AgregarUsuarioParaFirmaMecanica;"],"mappings":"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"},"metadata":{},"sourceType":"module"}