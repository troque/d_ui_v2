{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar externals = require(\"./externals\");\nvar Workbook = require(\"./Workbook\");\nvar FormulaError = require(\"./FormulaError\");\nvar dateConverter = require(\"./dateConverter\");\nvar RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nvar XlsxPopulate = /*#__PURE__*/function () {\n  function XlsxPopulate() {\n    _classCallCheck(this, XlsxPopulate);\n  }\n  _createClass(XlsxPopulate, null, [{\n    key: \"dateToNumber\",\n    value:\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    function dateToNumber(date) {\n      return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromBlankAsync\",\n    value: function fromBlankAsync() {\n      return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromDataAsync\",\n    value: function fromDataAsync(data, opts) {\n      return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromFileAsync\",\n    value: function fromFileAsync(path, opts) {\n      return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n  }, {\n    key: \"numberToDate\",\n    value: function numberToDate(number) {\n      return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n  }, {\n    key: \"Promise\",\n    get: function get() {\n      return externals.Promise;\n    },\n    set: function set(Promise) {\n      externals.Promise = Promise;\n    }\n  }]);\n  return XlsxPopulate;\n}();\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\nmodule.exports = XlsxPopulate;","map":{"version":3,"names":["externals","require","Workbook","FormulaError","dateConverter","RichText","XlsxPopulate","date","dateToNumber","fromBlankAsync","data","opts","fromDataAsync","path","fromFileAsync","number","numberToDate","Promise","MIME_TYPE","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/XlsxPopulate.js"],"sourcesContent":["\"use strict\";\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    static dateToNumber(date) {\n        return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromBlankAsync() {\n        return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromDataAsync(data, opts) {\n        return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromFileAsync(path, opts) {\n        return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    static numberToDate(number) {\n        return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    static get Promise() {\n        return externals.Promise;\n    }\n    static set Promise(Promise) {\n        externals.Promise = Promise;\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\n\nmodule.exports = XlsxPopulate;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAEb,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,IAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,IAAME,YAAY,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC9C,IAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAChD,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;AACA;AAHA,IAIMK,YAAY;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACd;AACJ;AACA;AACA;AACA;IACI,sBAAoBC,IAAI,EAAE;MACtB,OAAOH,aAAa,CAACI,YAAY,CAACD,IAAI,CAAC;IAC3C;;IAEA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,0BAAwB;MACpB,OAAOL,QAAQ,CAACO,cAAc,EAAE;IACpC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,uBAAqBC,IAAI,EAAEC,IAAI,EAAE;MAC7B,OAAOT,QAAQ,CAACU,aAAa,CAACF,IAAI,EAAEC,IAAI,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA,OAOA,uBAAqBE,IAAI,EAAEF,IAAI,EAAE;MAC7B,OAAOT,QAAQ,CAACY,aAAa,CAACD,IAAI,EAAEF,IAAI,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,sBAAoBI,MAAM,EAAE;MACxB,OAAOX,aAAa,CAACY,YAAY,CAACD,MAAM,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,KAIA,eAAqB;MACjB,OAAOf,SAAS,CAACiB,OAAO;IAC5B,CAAC;IAAA,KACD,aAAmBA,OAAO,EAAE;MACxBjB,SAAS,CAACiB,OAAO,GAAGA,OAAO;IAC/B;EAAC;EAAA;AAAA;AAGL;AACA;AACA;AACA;AACAX,YAAY,CAACY,SAAS,GAAGhB,QAAQ,CAACgB,SAAS;;AAE3C;AACA;AACA;AACA;AACAZ,YAAY,CAACH,YAAY,GAAGA,YAAY;;AAExC;AACA;AACA;AACA;AACAG,YAAY,CAACD,QAAQ,GAAGA,QAAQ;AAEhCc,MAAM,CAACC,OAAO,GAAGd,YAAY"},"metadata":{},"sourceType":"script"}