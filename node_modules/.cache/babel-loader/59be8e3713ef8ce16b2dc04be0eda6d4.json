{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\Actuaciones\\\\ActuacionesAprobacionRechazar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Spinner from '../../Utils/Spinner';\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { Link } from \"react-router-dom\";\nimport GenericApi from '../../Api/Services/GenericApi';\nimport { useLocation } from 'react-router-dom';\nimport { getUser } from '../../Utils/Common';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ActuacionesAprobacionRechazar() {\n  _s();\n  const [getModalState, setModalState] = useState({\n    title: \"\",\n    message: \"\",\n    show: false\n  });\n  const [countTextArea, setCountTextArea] = useState(0);\n  const [getMinimoTextArea, setMinimoTextArea] = useState(0);\n  const [getMaximoTextArea, setMaximoTextArea] = useState(0);\n  const [getIdDependenciaAtiendaAnulaciones, setIdDependenciaAtiendaAnulaciones] = useState(0);\n  const [getNameUsuario, setNameUsuario] = useState(\"\");\n  const [getIdActuacion, setIdActuacion] = useState(\"\");\n  const [getNombreUsuario, setNombreUsuario] = useState(\"\");\n  const [getIdDependenciaSolicitante, setIdDependenciaSolicitante] = useState(\"\");\n  const [getUsuarioNombre, setUsuarioNombre] = useState(\"\");\n  const [getUsuarioApellido, setUsuarioApellido] = useState(\"\");\n  const [getUsuarioName, setUsuarioName] = useState(\"\");\n  const [getUsuarioDependenciaNombre, setUsuarioDependenciaNombre] = useState(\"\");\n  const [getActuacionCierraProceso, setActuacionCierraProceso] = useState(\"\");\n  const [getDespuesAprobacionListarActuacion, setDespuesAprobacionListarActuacion] = useState(\"\");\n  const [getidMasActuacion, setidMasActuacion] = useState();\n  const location = useLocation();\n  const {\n    getActuacionConFirmas,\n    from,\n    selected_id_etapa,\n    id,\n    nombre,\n    estadoActualActuacion,\n    titulo,\n    valor,\n    solicitante,\n    tipoActuacion\n  } = location.state;\n  const [getNombreProceso, setNombreProceso] = useState('');\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n  const [getRoutes, setRoutes] = useState({\n    ver_detalle: \"/ActuacionesVer/\" + from.procesoDisciplinarioId + \"/\" + selected_id_etapa + \"/1\"\n  });\n  useEffect(() => {\n    async function fetchData() {\n      nombreProceso();\n    }\n    fetchData();\n  }, []);\n  const nombreProceso = () => {\n    GenericApi.getByIdGeneric(\"nombre-proceso\", from.procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setNombreProceso(datos.data.attributes.nombre);\n        obtenerParametros();\n        obtenerDatosUsuarioSolicitante();\n        obtenerDatos();\n        GenericApi.getGeneric('mas_actuaciones/getActuacionesByName/' + nombre + '/' + selected_id_etapa).then(datos => {\n          if (!datos.error) {\n            console.log(datos);\n            setidMasActuacion(datos.data[0].id);\n          } else {}\n        });\n      }\n    });\n  };\n  const obtenerDatosUsuarioSolicitante = () => {\n    // Buscamos el parametro\n    GenericApi.getGeneric(\"usuario/get-usuario-por-name/\" + solicitante).then(datos => {\n      if (!datos.error) {\n        if (datos[\"data\"].length > 0) {\n          setIdDependenciaSolicitante(datos.data[0].attributes.id_dependencia);\n          datosDelUsuarioARemitir(datos.data[0].attributes.name);\n        }\n      } else {}\n    });\n  };\n  const datosDelUsuarioARemitir = name => {\n    GenericApi.getGeneric('usuario/' + getUser.id).then(datos => {\n      if (!datos.error) {\n        // console.log(datos);\n        setUsuarioNombre(datos.data.attributes.nombre);\n        setUsuarioApellido(datos.data.attributes.apellido);\n        setUsuarioName(datos.data.attributes.name);\n        setUsuarioDependenciaNombre(datos.data.attributes.dependencia.nombre);\n      }\n    });\n  };\n  function containsSpecialChars(str) {\n    const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\n      if (str.includes(specialChar)) {\n        return true;\n      }\n      return false;\n    });\n    return result;\n  }\n  const obtenerParametros = () => {\n    window.showSpinner(true);\n    try {\n      const data = {\n        \"data\": {\n          \"type\": 'mas_parametro',\n          \"attributes\": {\n            \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\n          }\n        }\n      };\n\n      // Buscamos el parametro\n      GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(datos => {\n        window.showSpinner(false);\n        if (!datos.error) {\n          if (datos[\"data\"].length > 0) {\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => setMinimoTextArea(filteredName[\"attributes\"][\"valor\"]));\n            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => setMaximoTextArea(filteredName[\"attributes\"][\"valor\"]));\n          }\n        } else {\n          setModalState({\n            title: \"ACTUACIONES :: \",\n            message: datos.error.toString(),\n            show: true,\n            redirect: '/AntecedentesForm',\n            alert: global.Constants.TIPO_ALERTA.ERROR\n          });\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n    }\n  };\n\n  // Metodo encargado de aprobar o rechazar la actuacion\n  const enviarDatos = valores => {\n    // Se inicializa el cargando\n    window.showSpinner(true);\n    console.log(getidMasActuacion);\n    // Se consume la API para obtener los semaforos\n    GenericApi.getByIdGeneric('get-semaforo-actuacion', getidMasActuacion).then(\n    // Se inicializa la variable de respuesta\n    datosSemaforo => {\n      // Se valida que no haya error\n      if (!datosSemaforo.error) {\n        // Se recorre el array de respuesta\n        datosSemaforo.data.forEach(element => {\n          // Se valida que el elemento de inicio sea 2\n          if (element.attributes.id_mas_evento_inicio.id == 2) {\n            // Se valida que el id sea igual al id de la actuacion\n            if (element.attributes.id_mas_actuacion_inicia.id == getidMasActuacion) {\n              // Se consume la API para actualizar la fecha del semaforo\n              GenericApi.getByIdGeneric('existe-semaforo-con-fecha', element.id).then(\n              // Se inicializa la variable de respuesta\n              datosExiste => {\n                // Se valida que no haya error\n                if (!datosExiste.error) {\n                  // Se inicializan los datos\n                  let date = new Date();\n                  let datapdxsemaforo = {\n                    \"data\": {\n                      \"type\": \"pdxsemaforo\",\n                      \"attributes\": {\n                        \"id_semaforo\": element.id,\n                        \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\n                        \"id_actuacion\": id,\n                        \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\n                        \"estado\": 1\n                      }\n                    }\n                  };\n\n                  // Se valida que exista informacion \n                  if (datosExiste.data.length >= 1) {\n                    // Se consume la api para consumir el servicio de actualizar el semaforo\n                    GenericApi.updateGeneric('pdxsemaforo', datosExiste.data[0].id, datapdxsemaforo);\n                  } else {\n                    // Se consume la api par añadir el servicio\n                    GenericApi.addGeneric('pdxsemaforo', datapdxsemaforo);\n                  }\n                } else {\n                  // Se setea el modal\n                  setModalState({\n                    title: getNombreProceso + \" :: APROBAR / RECHAZAR\",\n                    message: \"ERROR CON LA SEMAFORIZACIÓN\",\n                    show: true,\n                    alert: global.Constants.TIPO_ALERTA.ERROR\n                  });\n                }\n              });\n            }\n          }\n        });\n      } else {\n        // Se setea el modal\n        setModalState({\n          title: getNombreProceso + \" ::  APROBAR / RECHAZAR\",\n          message: \"ERROR CON LA SEMAFORIZACIÓN\",\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n\n    // Se consume la API del semaforos\n    GenericApi.getByIdGeneric('get-autofinaliza-actuacion', getidMasActuacion).then(\n    // Se inicializa la variable de respuesta\n    datosSemaforoFinaliza => {\n      // Se valida que tenga longitud\n      if (datosSemaforoFinaliza.data.length >= 1) {\n        // Se recorre el array\n        datosSemaforoFinaliza.data.forEach(element => {\n          console.log(element);\n          // Se consume la api del semaforo\n          GenericApi.getGeneric('set-finaliza-semaforo/' + element.attributes.id_semaforo.id + \"/\" + from.procesoDisciplinarioId);\n        });\n      }\n    });\n\n    // Se inicializa el array con la informacion\n    let data = {\n      \"data\": {\n        \"type\": \"trazabilidad-actuaciones\",\n        \"attributes\": {\n          \"uuid_actuacion\": id,\n          \"id_estado_actuacion\": valor == 1 ? 1 : 2,\n          \"observacion\": valores.informacion,\n          \"estado\": 1,\n          \"envia_correo\": 1,\n          \"id_proceso_disciplinario\": procesoDisciplinarioId\n        }\n      }\n    };\n\n    // Se consume la API para aprobar o rechazar actuaciones\n    GenericApi.addGeneric('trazabilidad-actuaciones', data).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        // Se inicializan las variables\n        let validacion = valor == 1 ? 'APROBADA' : 'RECHAZADA';\n        let mensaje = 'LA ACTUACIÓN ' + nombre + ' HA SIDO ' + validacion + ' CON ÉXITO.';\n        let tipoAct = tipoActuacion == \"0\" ? \"ACTUACIONES\" : tipoActuacion == \"1\" ? 'IMPEDIMENTO' : 'COMISORIO';\n        let aprobacionRechazo = datos.attributes.despues_aprobacion_listar_actuacion;\n\n        // Se valida cuando se aprueba\n        if (valor == 1) {\n          // Se deshabilita el cargando\n          window.showSpinner(false);\n\n          // Se valida cuando la actuacion tiene firmas\n          if (getActuacionConFirmas >= 1) {\n            // Se genera el modal y su redireccion\n            setModalState({\n              title: \"SINPROC No \" + from.radicado + \" :: \" + tipoAct + \"APROBAR / RECHAZAR\",\n              message: mensaje + \" EL PROCESO DISCIPLINARIO FUE APROBADO CON ÉXITO\",\n              show: true,\n              redirect: '/ActuacionesSigueImpedimentos',\n              from: {\n                getActuacionCierraProceso: getActuacionCierraProceso,\n                getDespuesAprobacionListarActuacion: getDespuesAprobacionListarActuacion,\n                from: from,\n                selected_id_etapa: selected_id_etapa,\n                nombre: nombre,\n                uuid_actuacion: id,\n                nombre: nombre,\n                estadoActualActuacion: estadoActualActuacion,\n                tipoActuacion: tipoActuacion\n              },\n              alert: global.Constants.TIPO_ALERTA.EXITO\n            });\n\n            // Se valida cuando la actuacion no tiene firmas\n          } else if (getActuacionConFirmas < 1) {\n            // Se genera el modal y su redireccion\n            setModalState({\n              title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR / RECHAZAR\",\n              message: mensaje + \" EL PROCESO DISCIPLINARIO FUE APROBADO CON ÉXITO\",\n              show: true,\n              redirect: '/ActuacionesCargarArchivoDefinitivo',\n              from: {\n                getActuacionCierraProceso: getActuacionCierraProceso,\n                getDespuesAprobacionListarActuacion: getDespuesAprobacionListarActuacion,\n                from: from,\n                selected_id_etapa: selected_id_etapa,\n                nombre: nombre,\n                uuid_actuacion: id,\n                estadoActualActuacion: estadoActualActuacion,\n                tipoActuacion: tipoActuacion\n              },\n              alert: global.Constants.TIPO_ALERTA.EXITO\n            });\n          } else {\n            // Se genera el modal y su redireccion\n            setModalState({\n              title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR/RECHAZAR\",\n              message: mensaje + \" ERROR EN LA CANTIDAD DE FIRMAS\",\n              show: true,\n              alert: global.Constants.TIPO_ALERTA.ERROR\n            });\n          }\n        } else {\n          // Se deshabilita el cargando\n          window.showSpinner(false);\n\n          // Se valida cuando la actuacion es un impedimento o comisorio\n          if (tipoActuacion == 1 || tipoActuacion == 2) {\n            // Se genera el modal y su redireccion\n            setModalState({\n              title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR/RECHAZAR\",\n              message: mensaje,\n              show: true,\n              redirect: '/Transacciones',\n              from: {\n                from: from,\n                selected_id_etapa: selected_id_etapa\n              },\n              alert: global.Constants.TIPO_ALERTA.EXITO\n            });\n          } else {\n            // Se inicializa cuando se rechaza\n            let dataRechazo = {\n              \"data\": {\n                \"type\": \"transacciones\",\n                \"attributes\": {\n                  \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\n                  \"id_dependencia_origen\": getIdDependenciaSolicitante,\n                  \"usuario_a_remitir\": solicitante,\n                  \"descripcion_a_remitir\": valores.informacion,\n                  \"id_etapa\": 3\n                }\n              }\n            };\n            GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', dataRechazo).then(datos => {\n              if (!datos.error) {\n                // setModalState({ title: \"SINPROC No \" + from.radicado + \" :: Actuaciones Aprobar/Rechazar\", message: mensaje, show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\n                setModalState({\n                  title: getNombreProceso + \" :: ENVIAR AL SOLICITANTE DE LA ANULACIÓN\",\n                  message: mensaje + ' EL PROCESO CON RADICADO: ' + from.radicado + ' FUE ASIGNADO AL USUARIO: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '',\n                  show: true,\n                  redirect: '/MisPendientes',\n                  alert: global.Constants.TIPO_ALERTA.EXITO\n                });\n              } else {\n                setModalState({\n                  title: getNombreProceso + \" :: ENVIAR AL SOLICITANTE DE LA ANULACIÓN\",\n                  message: datos.error.toString(),\n                  show: true,\n                  redirect: '/MisPendientes',\n                  from: {\n                    from\n                  },\n                  alert: global.Constants.TIPO_ALERTA.ERROR\n                });\n              }\n            });\n          }\n        }\n      } else {\n        // Se quita el cargando\n        window.showSpinner(false);\n\n        // Se inicializa el modal\n        setModalState({\n          title: getNombreProceso + \" :: Actuaciones Aprobar/Rechazar\",\n          message: datos.error.toString(),\n          show: true,\n          alert: global.Constants.TIPO_ALERTA.ERROR\n        });\n      }\n    });\n  };\n  const obtenerDatos = () => {\n    GenericApi.getByIdGeneric('actuaciones', id).then(datos => {\n      if (!datos.error) {\n        GenericApi.getByIdGeneric('mas_actuaciones', datos.data.attributes.id_actuacion).then(datos => {\n          if (!datos.error) {\n            // console.log(datos);\n            setActuacionCierraProceso(datos.data.attributes.cierra_proceso);\n            setDespuesAprobacionListarActuacion(datos.data.attributes.despues_aprobacion_listar_actuacion);\n          }\n        });\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(ModalGen, {\n      data: getModalState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        informacion: ''\n      },\n      enableReinitialize: true,\n      validate: valores => {\n        setCountTextArea(valores.informacion.length);\n        let errores = {};\n        if (!valores.informacion) {\n          errores.informacion = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\n        } else if (valores.informacion.length <= getMinimoTextArea) {\n          errores.informacion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES + ' ' + getMinimoTextArea;\n        }\n        if (valores.informacion) {\n          if (containsSpecialChars(valores.informacion)) errores.informacion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\n        }\n        return errores;\n      },\n      onSubmit: (valores, _ref) => {\n        let {\n          resetForm\n        } = _ref;\n        enviarDatos(valores);\n      },\n      children: _ref2 => {\n        let {\n          errors\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w2d_block\",\n            children: /*#__PURE__*/_jsxDEV(\"nav\", {\n              \"aria-label\": \"breadcrumb\",\n              children: /*#__PURE__*/_jsxDEV(\"ol\", {\n                className: \"breadcrumb breadcrumb-alt push\",\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: `/MisPendientes`,\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: \"Mis Pendientes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 455,\n                      columnNumber: 138\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 455,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: `/RamasProceso/`,\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: \"Ramas del proceso\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 456,\n                      columnNumber: 138\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 456,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: `/ActuacionesLista/`,\n                    state: {\n                      from: from,\n                      selected_id_etapa: selected_id_etapa\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: \"Actuaciones\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 457,\n                      columnNumber: 203\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"hover\",\n                    className: \"text-dark\",\n                    to: getRoutes.ver_detalle,\n                    state: {\n                      from: from,\n                      selected_id_etapa: selected_id_etapa,\n                      id: id,\n                      nombre: nombre,\n                      estadoActualActuacion: estadoActualActuacion\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"small\", {\n                      children: [\"Actuaci\\xF3n \", nombre]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 274\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"breadcrumb-item\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: [tipoActuacion == 0 ? \"ACTUACIÓN\" : tipoActuacion == 1 ? 'IMPEDIMENTO' : 'COMISORIO', \" Aprobar/Rechazar\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 70\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block block-themed\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-header\",\n              children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"block-title\",\n                children: [getNombreProceso, \" \", tipoActuacion == 0 ? \"ACTUACIÓN\" : tipoActuacion == 1 ? 'IMPEDIMENTO' : 'COMISORIO', \" \", nombre, \" :: \", titulo, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"block-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-12 mt-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: \"informacion\",\n                      children: [\"MOTIVO POR EL QUE SE SOLICITA LA/EL \", valor == 1 ? \"APROBACIÓN\" : \"RECHAZO\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger mt-2\",\n                        children: \"*\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 472,\n                        columnNumber: 150\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 472,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      as: \"textarea\",\n                      className: \"form-control mt-2\",\n                      id: \"informacion\",\n                      name: \"informacion\",\n                      rows: \"6\",\n                      placeholder: \"Informaci\\xF3n para su solicitud....\",\n                      maxLength: getMaximoTextArea,\n                      minLength: getMinimoTextArea\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 473,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-right\",\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-primary\",\n                        children: [countTextArea, \" / \", getMaximoTextArea]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 476,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 475,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                      name: \"informacion\",\n                      component: () => /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"text-danger\",\n                        children: errors.informacion\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 478,\n                        columnNumber: 96\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 478,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 471,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"block-content block-content-full text-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-rounded btn-primary\",\n                  children: global.Constants.BOTON_NOMBRE.REGISTRAR\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: getRoutes.ver_detalle,\n                  state: {\n                    from: from,\n                    selected_id_etapa: selected_id_etapa,\n                    id: id,\n                    nombre: nombre,\n                    estadoActualActuacion: estadoActualActuacion,\n                    tipoActuacion: tipoActuacion\n                  },\n                  className: \"font-size-h5 font-w600\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-rounded btn-outline-primary\",\n                    children: global.Constants.BOTON_NOMBRE.CANCELAR\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 485,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 21\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ActuacionesAprobacionRechazar, \"B3NOGbKoW2qhcwVGKbLh2W83ZEo=\", false, function () {\n  return [useLocation];\n});\n_c = ActuacionesAprobacionRechazar;\nexport default ActuacionesAprobacionRechazar;\nvar _c;\n$RefreshReg$(_c, \"ActuacionesAprobacionRechazar\");","map":{"version":3,"names":["React","useEffect","useState","Spinner","ModalGen","ErrorMessage","Field","Form","Formik","Link","GenericApi","useLocation","getUser","ActuacionesAprobacionRechazar","getModalState","setModalState","title","message","show","countTextArea","setCountTextArea","getMinimoTextArea","setMinimoTextArea","getMaximoTextArea","setMaximoTextArea","getIdDependenciaAtiendaAnulaciones","setIdDependenciaAtiendaAnulaciones","getNameUsuario","setNameUsuario","getIdActuacion","setIdActuacion","getNombreUsuario","setNombreUsuario","getIdDependenciaSolicitante","setIdDependenciaSolicitante","getUsuarioNombre","setUsuarioNombre","getUsuarioApellido","setUsuarioApellido","getUsuarioName","setUsuarioName","getUsuarioDependenciaNombre","setUsuarioDependenciaNombre","getActuacionCierraProceso","setActuacionCierraProceso","getDespuesAprobacionListarActuacion","setDespuesAprobacionListarActuacion","getidMasActuacion","setidMasActuacion","location","getActuacionConFirmas","from","selected_id_etapa","id","nombre","estadoActualActuacion","titulo","valor","solicitante","tipoActuacion","state","getNombreProceso","setNombreProceso","procesoDisciplinarioId","getRoutes","setRoutes","ver_detalle","fetchData","nombreProceso","getByIdGeneric","then","datos","error","data","attributes","obtenerParametros","obtenerDatosUsuarioSolicitante","obtenerDatos","getGeneric","console","log","length","id_dependencia","datosDelUsuarioARemitir","name","apellido","dependencia","containsSpecialChars","str","result","global","Constants","TEXT_AREA","CARACTERES_ESPECIALES","split","some","specialChar","includes","window","showSpinner","getByDataGeneric","filter","map","filteredName","toString","redirect","alert","TIPO_ALERTA","ERROR","enviarDatos","valores","datosSemaforo","forEach","element","id_mas_evento_inicio","id_mas_actuacion_inicia","datosExiste","date","Date","datapdxsemaforo","toLocaleDateString","updateGeneric","addGeneric","datosSemaforoFinaliza","id_semaforo","informacion","validacion","mensaje","tipoAct","aprobacionRechazo","despues_aprobacion_listar_actuacion","radicado","uuid_actuacion","EXITO","dataRechazo","id_actuacion","cierra_proceso","errores","MENSAJE_ERROR","CAMPO_OBLIGATORIO","ERROR_FORMATO_CARACTERES","ERROR_FORMATO_CARACTERES_INVALIDOS","resetForm","errors","BOTON_NOMBRE","REGISTRAR","CANCELAR"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/Actuaciones/ActuacionesAprobacionRechazar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Spinner from '../../Utils/Spinner';\r\nimport ModalGen from '../../Utils/Modals/ModalGeneric';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Link } from \"react-router-dom\";\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getUser } from '../../Utils/Common';\r\n\r\nfunction ActuacionesAprobacionRechazar() {\r\n\r\n    const [getModalState, setModalState] = useState({ title: \"\", message: \"\", show: false });\r\n    const [countTextArea, setCountTextArea] = useState(0);\r\n    const [getMinimoTextArea, setMinimoTextArea] = useState(0);\r\n    const [getMaximoTextArea, setMaximoTextArea] = useState(0);\r\n    const [getIdDependenciaAtiendaAnulaciones, setIdDependenciaAtiendaAnulaciones] = useState(0);\r\n    const [getNameUsuario, setNameUsuario] = useState(\"\");\r\n    const [getIdActuacion, setIdActuacion] = useState(\"\");\r\n    const [getNombreUsuario, setNombreUsuario] = useState(\"\");\r\n    const [getIdDependenciaSolicitante, setIdDependenciaSolicitante] = useState(\"\");\r\n    const [getUsuarioNombre, setUsuarioNombre] = useState(\"\");\r\n    const [getUsuarioApellido, setUsuarioApellido] = useState(\"\");\r\n    const [getUsuarioName, setUsuarioName] = useState(\"\");\r\n    const [getUsuarioDependenciaNombre, setUsuarioDependenciaNombre] = useState(\"\");\r\n    const [getActuacionCierraProceso, setActuacionCierraProceso] = useState(\"\");\r\n    const [getDespuesAprobacionListarActuacion, setDespuesAprobacionListarActuacion] = useState(\"\");\r\n    const [getidMasActuacion, setidMasActuacion] = useState();\r\n\r\n\r\n    const location = useLocation()\r\n    const { getActuacionConFirmas, from, selected_id_etapa, id, nombre, estadoActualActuacion, titulo, valor, solicitante, tipoActuacion } = location.state;\r\n    const [getNombreProceso, setNombreProceso] = useState('');\r\n\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n\r\n    const [getRoutes, setRoutes] = useState({\r\n        ver_detalle: \"/ActuacionesVer/\" + from.procesoDisciplinarioId + \"/\" + selected_id_etapa + \"/1\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            nombreProceso();\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    const nombreProceso = () => {\r\n\r\n        GenericApi.getByIdGeneric(\"nombre-proceso\", from.procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setNombreProceso(datos.data.attributes.nombre);\r\n                    obtenerParametros();\r\n                    obtenerDatosUsuarioSolicitante();\r\n                    obtenerDatos();\r\n                    GenericApi.getGeneric('mas_actuaciones/getActuacionesByName/' + nombre + '/' + selected_id_etapa).then(\r\n                        datos => {\r\n                            if (!datos.error) {\r\n                                console.log(datos);\r\n                                setidMasActuacion(datos.data[0].id)\r\n                            } else {\r\n\r\n                            }\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const obtenerDatosUsuarioSolicitante = () => {\r\n\r\n        // Buscamos el parametro\r\n        GenericApi.getGeneric(\"usuario/get-usuario-por-name/\" + solicitante).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    if (datos[\"data\"].length > 0) {\r\n                        setIdDependenciaSolicitante(datos.data[0].attributes.id_dependencia);\r\n                        datosDelUsuarioARemitir(datos.data[0].attributes.name);\r\n                    }\r\n                } else {\r\n\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    const datosDelUsuarioARemitir = (name) => {\r\n\r\n        GenericApi.getGeneric('usuario/' + getUser.id).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    // console.log(datos);\r\n                    setUsuarioNombre(datos.data.attributes.nombre);\r\n                    setUsuarioApellido(datos.data.attributes.apellido);\r\n                    setUsuarioName(datos.data.attributes.name);\r\n                    setUsuarioDependenciaNombre(datos.data.attributes.dependencia.nombre);\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    function containsSpecialChars(str) {\r\n\r\n        const result = global.Constants.TEXT_AREA.CARACTERES_ESPECIALES.split('').some(specialChar => {\r\n            if (str.includes(specialChar)) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    const obtenerParametros = () => {\r\n\r\n        window.showSpinner(true);\r\n\r\n        try {\r\n            const data = {\r\n                \"data\": {\r\n                    \"type\": 'mas_parametro',\r\n                    \"attributes\": {\r\n                        \"nombre\": \"minimo_caracteres_textarea|maximo_caracteres_textarea\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Buscamos el parametro\r\n            GenericApi.getByDataGeneric(\"parametro/parametro-nombre\", data).then(\r\n                datos => {\r\n\r\n                    window.showSpinner(false);\r\n\r\n                    if (!datos.error) {\r\n\r\n                        if (datos[\"data\"].length > 0) {\r\n\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('minimo_caracteres_textarea')).map(filteredName => (\r\n                                setMinimoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n                            datos[\"data\"].filter(data => data[\"attributes\"][\"nombre\"].includes('maximo_caracteres_textarea')).map(filteredName => (\r\n                                setMaximoTextArea(filteredName[\"attributes\"][\"valor\"])\r\n                            ))\r\n\r\n                        }\r\n                    } else {\r\n                        setModalState({ title: \"ACTUACIONES :: \", message: datos.error.toString(), show: true, redirect: '/AntecedentesForm', alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n            // console.log(error);\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de aprobar o rechazar la actuacion\r\n    const enviarDatos = (valores) => {\r\n\r\n        // Se inicializa el cargando\r\n        window.showSpinner(true);\r\n\r\n        console.log(getidMasActuacion);\r\n        // Se consume la API para obtener los semaforos\r\n        GenericApi.getByIdGeneric('get-semaforo-actuacion', getidMasActuacion).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datosSemaforo => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datosSemaforo.error) {\r\n\r\n                    // Se recorre el array de respuesta\r\n                    datosSemaforo.data.forEach(element => {\r\n\r\n                        // Se valida que el elemento de inicio sea 2\r\n                        if (element.attributes.id_mas_evento_inicio.id == 2) {\r\n\r\n                            // Se valida que el id sea igual al id de la actuacion\r\n                            if (element.attributes.id_mas_actuacion_inicia.id == getidMasActuacion) {\r\n\r\n                                // Se consume la API para actualizar la fecha del semaforo\r\n                                GenericApi.getByIdGeneric('existe-semaforo-con-fecha', element.id).then(\r\n\r\n                                    // Se inicializa la variable de respuesta\r\n                                    datosExiste => {\r\n\r\n                                        // Se valida que no haya error\r\n                                        if (!datosExiste.error) {\r\n\r\n                                            // Se inicializan los datos\r\n                                            let date = new Date();\r\n                                            let datapdxsemaforo = {\r\n                                                \"data\": {\r\n                                                    \"type\": \"pdxsemaforo\",\r\n                                                    \"attributes\": {\r\n                                                        \"id_semaforo\": element.id,\r\n                                                        \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\r\n                                                        \"id_actuacion\": id,\r\n                                                        \"fecha_inicio\": date.toLocaleDateString('zh-Hans-CN'),\r\n                                                        \"estado\": 1,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            // Se valida que exista informacion \r\n                                            if (datosExiste.data.length >= 1) {\r\n\r\n                                                // Se consume la api para consumir el servicio de actualizar el semaforo\r\n                                                GenericApi.updateGeneric('pdxsemaforo', datosExiste.data[0].id, datapdxsemaforo)\r\n                                            } else {\r\n\r\n                                                // Se consume la api par añadir el servicio\r\n                                                GenericApi.addGeneric('pdxsemaforo', datapdxsemaforo)\r\n                                            }\r\n                                        } else {\r\n\r\n                                            // Se setea el modal\r\n                                            setModalState({ title: getNombreProceso + \" :: APROBAR / RECHAZAR\", message: \"ERROR CON LA SEMAFORIZACIÓN\", show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                                        }\r\n                                    }\r\n                                )\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n\r\n                    // Se setea el modal\r\n                    setModalState({ title: getNombreProceso + \" ::  APROBAR / RECHAZAR\", message: \"ERROR CON LA SEMAFORIZACIÓN\", show: true, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se consume la API del semaforos\r\n        GenericApi.getByIdGeneric('get-autofinaliza-actuacion', getidMasActuacion).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datosSemaforoFinaliza => {\r\n\r\n                // Se valida que tenga longitud\r\n                if (datosSemaforoFinaliza.data.length >= 1) {\r\n\r\n                    // Se recorre el array\r\n                    datosSemaforoFinaliza.data.forEach(element => {\r\n                        console.log(element);\r\n                        // Se consume la api del semaforo\r\n                        GenericApi.getGeneric('set-finaliza-semaforo/' + element.attributes.id_semaforo.id + \"/\" + from.procesoDisciplinarioId)\r\n                    });\r\n                }\r\n            }\r\n        )\r\n\r\n        // Se inicializa el array con la informacion\r\n        let data = {\r\n            \"data\": {\r\n                \"type\": \"trazabilidad-actuaciones\",\r\n                \"attributes\": {\r\n                    \"uuid_actuacion\": id,\r\n                    \"id_estado_actuacion\": valor == 1 ? 1 : 2,\r\n                    \"observacion\": valores.informacion,\r\n                    \"estado\": 1,\r\n                    \"envia_correo\": 1,\r\n                    \"id_proceso_disciplinario\": procesoDisciplinarioId\r\n                }\r\n            }\r\n        }\r\n\r\n        // Se consume la API para aprobar o rechazar actuaciones\r\n        GenericApi.addGeneric('trazabilidad-actuaciones', data).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    // Se inicializan las variables\r\n                    let validacion = (valor == 1 ? 'APROBADA' : 'RECHAZADA');\r\n                    let mensaje = 'LA ACTUACIÓN ' + nombre + ' HA SIDO ' + validacion + ' CON ÉXITO.';\r\n                    let tipoAct = tipoActuacion == \"0\" ? \"ACTUACIONES\" : (tipoActuacion == \"1\" ? 'IMPEDIMENTO' : 'COMISORIO');\r\n                    let aprobacionRechazo = datos.attributes.despues_aprobacion_listar_actuacion;\r\n\r\n                    // Se valida cuando se aprueba\r\n                    if (valor == 1) {\r\n\r\n                        // Se deshabilita el cargando\r\n                        window.showSpinner(false);\r\n\r\n                        // Se valida cuando la actuacion tiene firmas\r\n                        if (getActuacionConFirmas >= 1) {\r\n\r\n                            // Se genera el modal y su redireccion\r\n                            setModalState({\r\n                                title: \"SINPROC No \" + from.radicado + \" :: \" + tipoAct + \"APROBAR / RECHAZAR\", message: mensaje + \" EL PROCESO DISCIPLINARIO FUE APROBADO CON ÉXITO\", show: true, redirect: '/ActuacionesSigueImpedimentos',\r\n                                from: {\r\n                                    getActuacionCierraProceso: getActuacionCierraProceso,\r\n                                    getDespuesAprobacionListarActuacion: getDespuesAprobacionListarActuacion,\r\n                                    from: from,\r\n                                    selected_id_etapa: selected_id_etapa,\r\n                                    nombre: nombre,\r\n                                    uuid_actuacion: id,\r\n                                    nombre: nombre,\r\n                                    estadoActualActuacion: estadoActualActuacion,\r\n                                    tipoActuacion: tipoActuacion\r\n                                }, alert: global.Constants.TIPO_ALERTA.EXITO\r\n                            });\r\n\r\n                            // Se valida cuando la actuacion no tiene firmas\r\n                        } else if (getActuacionConFirmas < 1) {\r\n\r\n                            // Se genera el modal y su redireccion\r\n                            setModalState({\r\n                                title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR / RECHAZAR\", message: mensaje + \" EL PROCESO DISCIPLINARIO FUE APROBADO CON ÉXITO\", show: true, redirect: '/ActuacionesCargarArchivoDefinitivo',\r\n                                from: {\r\n                                    getActuacionCierraProceso: getActuacionCierraProceso,\r\n                                    getDespuesAprobacionListarActuacion: getDespuesAprobacionListarActuacion,\r\n                                    from: from,\r\n                                    selected_id_etapa: selected_id_etapa,\r\n                                    nombre: nombre,\r\n                                    uuid_actuacion: id,\r\n                                    estadoActualActuacion: estadoActualActuacion,\r\n                                    tipoActuacion: tipoActuacion\r\n                                }, alert: global.Constants.TIPO_ALERTA.EXITO\r\n                            });\r\n                        } else {\r\n\r\n                            // Se genera el modal y su redireccion\r\n                            setModalState({\r\n                                title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR/RECHAZAR\",\r\n                                message: mensaje + \" ERROR EN LA CANTIDAD DE FIRMAS\",\r\n                                show: true,\r\n                                alert: global.Constants.TIPO_ALERTA.ERROR\r\n                            });\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        // Se deshabilita el cargando\r\n                        window.showSpinner(false);\r\n\r\n                        // Se valida cuando la actuacion es un impedimento o comisorio\r\n                        if (tipoActuacion == 1 || tipoActuacion == 2) {\r\n\r\n                            // Se genera el modal y su redireccion\r\n                            setModalState({\r\n                                title: getNombreProceso + \" :: \" + tipoAct + \" APROBAR/RECHAZAR\",\r\n                                message: mensaje,\r\n                                show: true,\r\n                                redirect: '/Transacciones',\r\n                                from: { from: from, selected_id_etapa: selected_id_etapa },\r\n                                alert: global.Constants.TIPO_ALERTA.EXITO\r\n                            });\r\n                        } else {\r\n\r\n                            // Se inicializa cuando se rechaza\r\n                            let dataRechazo = {\r\n                                \"data\": {\r\n                                    \"type\": \"transacciones\",\r\n                                    \"attributes\": {\r\n                                        \"id_proceso_disciplinario\": from.procesoDisciplinarioId,\r\n                                        \"id_dependencia_origen\": getIdDependenciaSolicitante,\r\n                                        \"usuario_a_remitir\": solicitante,\r\n                                        \"descripcion_a_remitir\": valores.informacion,\r\n                                        \"id_etapa\": 3\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            GenericApi.addGeneric('transacciones/cambiar-usuario-proceso-disciplinario', dataRechazo).then(\r\n                                datos => {\r\n                                    if (!datos.error) {\r\n                                        // setModalState({ title: \"SINPROC No \" + from.radicado + \" :: Actuaciones Aprobar/Rechazar\", message: mensaje, show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                                        setModalState({ title: getNombreProceso + \" :: ENVIAR AL SOLICITANTE DE LA ANULACIÓN\", message: mensaje + ' EL PROCESO CON RADICADO: ' + from.radicado + ' FUE ASIGNADO AL USUARIO: ' + getUsuarioNombre + ' ' + getUsuarioApellido + ' (' + getUsuarioName + ')  de la dependencia: ' + getUsuarioDependenciaNombre + '', show: true, redirect: '/MisPendientes', alert: global.Constants.TIPO_ALERTA.EXITO });\r\n                                    } else {\r\n                                        setModalState({ title: getNombreProceso + \" :: ENVIAR AL SOLICITANTE DE LA ANULACIÓN\", message: datos.error.toString(), show: true, redirect: '/MisPendientes', from: { from }, alert: global.Constants.TIPO_ALERTA.ERROR });\r\n                                    }\r\n                                }\r\n                            )\r\n                        }\r\n                    }\r\n                } else {\r\n\r\n                    // Se quita el cargando\r\n                    window.showSpinner(false);\r\n\r\n                    // Se inicializa el modal\r\n                    setModalState({\r\n                        title: getNombreProceso + \" :: Actuaciones Aprobar/Rechazar\",\r\n                        message: datos.error.toString(),\r\n                        show: true,\r\n                        alert: global.Constants.TIPO_ALERTA.ERROR\r\n                    });\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }\r\n\r\n    const obtenerDatos = () => {\r\n        GenericApi.getByIdGeneric('actuaciones', id).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    GenericApi.getByIdGeneric('mas_actuaciones', datos.data.attributes.id_actuacion).then(\r\n                        datos => {\r\n                            if (!datos.error) {\r\n                                // console.log(datos);\r\n                                setActuacionCierraProceso(datos.data.attributes.cierra_proceso);\r\n                                setDespuesAprobacionListarActuacion(datos.data.attributes.despues_aprobacion_listar_actuacion);\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {<Spinner />}\r\n            {<ModalGen data={getModalState} />}\r\n            <Formik\r\n                initialValues={{\r\n                    informacion: ''\r\n                }}\r\n                enableReinitialize\r\n                validate={(valores) => {\r\n                    setCountTextArea(valores.informacion.length)\r\n                    let errores = {}\r\n                    if (!valores.informacion) {\r\n                        errores.informacion = global.Constants.MENSAJE_ERROR.CAMPO_OBLIGATORIO;\r\n                    }\r\n                    else if (valores.informacion.length <= getMinimoTextArea) {\r\n                        errores.informacion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES + ' ' + getMinimoTextArea;\r\n                    }\r\n                    if (valores.informacion) {\r\n                        if (containsSpecialChars(valores.informacion))\r\n                            errores.informacion = global.Constants.MENSAJE_ERROR.ERROR_FORMATO_CARACTERES_INVALIDOS;\r\n                    }\r\n\r\n                    return errores;\r\n                }}\r\n                onSubmit={(valores, { resetForm }) => {\r\n                    enviarDatos(valores);\r\n                }}\r\n            >\r\n\r\n                {({ errors }) => (\r\n                    <Form>\r\n                        <div className=\"w2d_block\">\r\n                            <nav aria-label=\"breadcrumb\">\r\n                                <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/MisPendientes`}><small>Mis Pendientes</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/RamasProceso/`}><small>Ramas del proceso</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/ActuacionesLista/`} state={{ from: from, selected_id_etapa: selected_id_etapa }}><small>Actuaciones</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={getRoutes.ver_detalle} state={{ from: from, selected_id_etapa: selected_id_etapa, id: id, nombre: nombre, estadoActualActuacion: estadoActualActuacion }}><small>Actuación {nombre}</small></Link></li>\r\n                                    <li className=\"breadcrumb-item\"> <small>{tipoActuacion == 0 ? \"ACTUACIÓN\" : (tipoActuacion == 1 ? 'IMPEDIMENTO' : 'COMISORIO')} Aprobar/Rechazar</small></li>\r\n                                </ol>\r\n                            </nav>\r\n                        </div>\r\n\r\n                        <div className=\"block block-themed\">\r\n                            <div className=\"block-header\">\r\n                                <h3 className=\"block-title\">{getNombreProceso} {tipoActuacion == 0 ? \"ACTUACIÓN\" : (tipoActuacion == 1 ? 'IMPEDIMENTO' : 'COMISORIO')} {nombre} :: {titulo} </h3>\r\n                            </div>\r\n                            <div className=\"block-content\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12 mt-2\">\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"informacion\">MOTIVO POR EL QUE SE SOLICITA LA/EL {valor == 1 ? \"APROBACIÓN\" : \"RECHAZO\"} <span className=\"text-danger mt-2\">*</span></label>\r\n                                            <Field as=\"textarea\" className=\"form-control mt-2\" id=\"informacion\" name=\"informacion\" rows=\"6\" placeholder=\"Información para su solicitud....\"\r\n                                                maxLength={getMaximoTextArea} minLength={getMinimoTextArea}></Field>\r\n                                            <div className=\"text-right\">\r\n                                                <span className=\"text-primary\">{countTextArea} / {getMaximoTextArea}</span>\r\n                                            </div>\r\n                                            <ErrorMessage name=\"informacion\" component={() => (<span className=\"text-danger\">{errors.informacion}</span>)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"block-content block-content-full text-right\">\r\n                                    <button type=\"submit\" className=\"btn btn-rounded btn-primary\" >{global.Constants.BOTON_NOMBRE.REGISTRAR}</button>\r\n                                    <Link to={getRoutes.ver_detalle} state={{ from: from, selected_id_etapa: selected_id_etapa, id: id, nombre: nombre, estadoActualActuacion: estadoActualActuacion, tipoActuacion: tipoActuacion }} className=\"font-size-h5 font-w600\" >\r\n                                        <button type=\"button\" className=\"btn btn-rounded btn-outline-primary\" >{global.Constants.BOTON_NOMBRE.CANCELAR}</button>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ActuacionesAprobacionRechazar;"],"mappings":"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"},"metadata":{},"sourceType":"module"}