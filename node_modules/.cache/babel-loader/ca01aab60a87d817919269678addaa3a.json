{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\SoporteRadicado\\\\SoporteRadicadoForm.js\",\n    _s = $RefreshSig$();\n\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from \"react-router\";\nimport { Navigate } from \"react-router-dom\";\nimport Spinner from '../../Utils/Spinner';\nimport InfoErrorApi from '../../Utils/InfoErrorApi';\nimport InfoExitoApi from '../../Utils/InfoExitoApi';\nimport ParametrosMasApi from '../../Api/Services/ParametrosMasApi';\nimport ClasificacionRadicadoApi from '../../Api/Services/ClasificacionRadicadoApi';\nimport { Link } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SoporteRadicadoForm() {\n  _s();\n\n  const [listaTipoExpediente, setListaTipoExpediente] = useState({\n    data: {}\n  });\n  const [respuestaTipoExpediente, setRespuestaTipoExpediente] = useState(false);\n  const [selectedTipoExpediente, setSelectedTipoExpediente] = useState(\"\");\n  const [listaTipoDerechoPeticion, setListaDerechoPeticion] = useState({\n    data: {}\n  });\n  const [selectedTipoDerechoPeticion, setSelectedDerechoPeticion] = useState(\"\");\n  const [respuestaTipoDerechoPeticion, setRespuestaDerechoPeticion] = useState(false);\n  const [listaTerminosRespuesta, setListaTerminosRespuesta] = useState({\n    data: {}\n  });\n  const [selectedTerminosRespuesta, setSelectedTerminosRespuesta] = useState(\"\");\n  const [respuestaTerminosRespuesta, setRespuestaTerminosRespuesta] = useState(false);\n  const [listaTiposQueja, setListaTiposQueja] = useState({\n    data: {}\n  });\n  const [selectedTiposQueja, setSelectedTiposQueja] = useState(\"\");\n  const [respuestaTiposQueja, setRespuestaTiposQueja] = useState(false);\n  const [startDate, setStartDate] = useState(new Date());\n  let {\n    radicado,\n    procesoDisciplinarioId\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {},\n      enableReinitialize: true,\n      validate: valores => {\n        let errores = {};\n\n        if (!valores.entidadInvestigado) {}\n\n        return errores;\n      },\n      onSubmit: (valores, _ref) => {//console.log (valores);\n        //enviarDatos(valores);\n\n        let {\n          resetForm\n        } = _ref;\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_s(SoporteRadicadoForm, \"HxKWXgmbsrgkExxzxzncQkU0DEM=\", false, function () {\n  return [useParams];\n});\n\n_c = SoporteRadicadoForm;\nexport default SoporteRadicadoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoporteRadicadoForm\");","map":{"version":3,"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/SoporteRadicado/SoporteRadicadoForm.js"],"names":["ErrorMessage","Field","Form","Formik","React","useEffect","useState","useParams","Navigate","Spinner","InfoErrorApi","InfoExitoApi","ParametrosMasApi","ClasificacionRadicadoApi","Link","DatePicker","SoporteRadicadoForm","listaTipoExpediente","setListaTipoExpediente","data","respuestaTipoExpediente","setRespuestaTipoExpediente","selectedTipoExpediente","setSelectedTipoExpediente","listaTipoDerechoPeticion","setListaDerechoPeticion","selectedTipoDerechoPeticion","setSelectedDerechoPeticion","respuestaTipoDerechoPeticion","setRespuestaDerechoPeticion","listaTerminosRespuesta","setListaTerminosRespuesta","selectedTerminosRespuesta","setSelectedTerminosRespuesta","respuestaTerminosRespuesta","setRespuestaTerminosRespuesta","listaTiposQueja","setListaTiposQueja","selectedTiposQueja","setSelectedTiposQueja","respuestaTiposQueja","setRespuestaTiposQueja","startDate","setStartDate","Date","radicado","procesoDisciplinarioId","valores","errores","entidadInvestigado","resetForm"],"mappings":";;;AAAA,SAASA,YAAT,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,MAApC,QAAkD,QAAlD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,gBAAP,MAA6B,qCAA7B;AACA,OAAOC,wBAAP,MAAqC,6CAArC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;;AAEA,SAASC,mBAAT,GAA+B;AAAA;;AAE3B,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDZ,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAC;AAAP,GAAD,CAA9D;AACA,QAAM,CAACC,uBAAD,EAA0BC,0BAA1B,IAAwDf,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAM,CAACgB,sBAAD,EAAyBC,yBAAzB,IAAsDjB,QAAQ,CAAC,EAAD,CAApE;AAEA,QAAM,CAACkB,wBAAD,EAA2BC,uBAA3B,IAAsDnB,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAC;AAAP,GAAD,CAApE;AACA,QAAM,CAACO,2BAAD,EAA8BC,0BAA9B,IAA4DrB,QAAQ,CAAC,EAAD,CAA1E;AACA,QAAM,CAACsB,4BAAD,EAA+BC,2BAA/B,IAA8DvB,QAAQ,CAAC,KAAD,CAA5E;AAGA,QAAM,CAACwB,sBAAD,EAAyBC,yBAAzB,IAAsDzB,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAC;AAAP,GAAD,CAApE;AACA,QAAM,CAACa,yBAAD,EAA4BC,4BAA5B,IAA4D3B,QAAQ,CAAC,EAAD,CAA1E;AACA,QAAM,CAAC4B,0BAAD,EAA6BC,6BAA7B,IAA8D7B,QAAQ,CAAC,KAAD,CAA5E;AAGA,QAAM,CAAC8B,eAAD,EAAkBC,kBAAlB,IAAwC/B,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAC;AAAP,GAAD,CAAtD;AACA,QAAM,CAACmB,kBAAD,EAAqBC,qBAArB,IAA8CjC,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM,CAACkC,mBAAD,EAAsBC,sBAAtB,IAAgDnC,QAAQ,CAAC,KAAD,CAA9D;AAGA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,IAAIsC,IAAJ,EAAD,CAA1C;AAEA,MAAI;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuCvC,SAAS,EAApD;AAGA,sBACI;AAAA,2BAEQ,QAAC,MAAD;AACI,MAAA,aAAa,EAAE,EADnB;AAII,MAAA,kBAAkB,MAJtB;AAMI,MAAA,QAAQ,EAAGwC,OAAD,IAAa;AACnB,YAAIC,OAAO,GAAG,EAAd;;AACA,YAAG,CAACD,OAAO,CAACE,kBAAZ,EAA+B,CAE9B;;AACD,eAAOD,OAAP;AACH,OAZL;AAcI,MAAA,QAAQ,EAAE,CAACD,OAAD,WAA0B,CAChC;AACA;;AAFgC,YAAhB;AAACG,UAAAA;AAAD,SAAgB;AAGnC,OAjBL;AAAA,6BAoBI;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA;AAFR,mBADJ;AAiCH;;GA3DQlC,mB;UAuBsCT,S;;;KAvBtCS,mB;AA4DT,eAAeA,mBAAf","sourcesContent":["import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport Spinner from '../../Utils/Spinner';\r\nimport InfoErrorApi from '../../Utils/InfoErrorApi';\r\nimport InfoExitoApi from '../../Utils/InfoExitoApi';\r\nimport ParametrosMasApi from '../../Api/Services/ParametrosMasApi';\r\nimport ClasificacionRadicadoApi from '../../Api/Services/ClasificacionRadicadoApi';\r\nimport { Link } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nfunction SoporteRadicadoForm() {\r\n\r\n    const [listaTipoExpediente, setListaTipoExpediente] = useState({ data:{} });\r\n    const [respuestaTipoExpediente, setRespuestaTipoExpediente] = useState(false);\r\n    const [selectedTipoExpediente, setSelectedTipoExpediente] = useState(\"\");\r\n\r\n    const [listaTipoDerechoPeticion, setListaDerechoPeticion] = useState({ data:{} });\r\n    const [selectedTipoDerechoPeticion, setSelectedDerechoPeticion] = useState(\"\");\r\n    const [respuestaTipoDerechoPeticion, setRespuestaDerechoPeticion] = useState(false);\r\n\r\n\r\n    const [listaTerminosRespuesta, setListaTerminosRespuesta] = useState({ data:{} });\r\n    const [selectedTerminosRespuesta, setSelectedTerminosRespuesta] = useState(\"\");\r\n    const [respuestaTerminosRespuesta, setRespuestaTerminosRespuesta] = useState(false);\r\n\r\n\r\n    const [listaTiposQueja, setListaTiposQueja] = useState({ data:{} });\r\n    const [selectedTiposQueja, setSelectedTiposQueja] = useState(\"\");\r\n    const [respuestaTiposQueja, setRespuestaTiposQueja] = useState(false);\r\n\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    \r\n    let { radicado, procesoDisciplinarioId } = useParams();\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n                <Formik\r\n                    initialValues={{\r\n                      \r\n                    }}\r\n                    enableReinitialize\r\n\r\n                    validate={(valores) => {\r\n                        let errores = {}\r\n                        if(!valores.entidadInvestigado){\r\n\r\n                        }\r\n                        return errores\r\n                    }}\r\n\r\n                    onSubmit={(valores, {resetForm}) => {\r\n                        //console.log (valores);\r\n                        //enviarDatos(valores);\r\n                    }}\r\n                >\r\n\r\n                    <form>\r\n\r\n\r\n                    </form>\r\n\r\n                </Formik>\r\n\r\n        </>                 \r\n    );\r\n  \r\n}\r\nexport default SoporteRadicadoForm;\r\n"]},"metadata":{},"sourceType":"module"}