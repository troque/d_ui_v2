{"ast":null,"code":"\"use strict\";\n\n/* eslint camelcase:off */\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n  /**\n   * Creates a new instance of _Style.\n   * @constructor\n   * @param {StyleSheet} styleSheet - The styleSheet.\n   * @param {number} id - The style ID.\n   * @param {{}} xfNode - The xf node.\n   * @param {{}} fontNode - The font node.\n   * @param {{}} fillNode - The fill node.\n   * @param {{}} borderNode - The border node.\n   */\n  constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n    this._styleSheet = styleSheet;\n    this._id = id;\n    this._xfNode = xfNode;\n    this._fontNode = fontNode;\n    this._fillNode = fillNode;\n    this._borderNode = borderNode;\n  }\n\n  /**\n   * Gets the style ID.\n   * @returns {number} The ID.\n   */\n  id() {\n    return this._id;\n  }\n\n  /**\n   * Gets or sets a style.\n   * @param {string} name - The style name.\n   * @param {*} [value] - The value to set.\n   * @returns {*|Style} The value if getting or the style if setting.\n   */\n  style() {\n    return new ArgHandler(\"_Style.style\").case('string', name => {\n      const getterName = `_get_${name}`;\n      if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n      return this[getterName]();\n    }).case(['string', '*'], (name, value) => {\n      const setterName = `_set_${name}`;\n      if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n      this[setterName](value);\n      return this;\n    }).handle(arguments);\n  }\n  _getColor(node, name) {\n    const child = xmlq.findChild(node, name);\n    if (!child || !child.attributes) return;\n    const color = {};\n    if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n    if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n    if (_.isEmpty(color)) return;\n    return color;\n  }\n  _setColor(node, name, color) {\n    if (typeof color === \"string\") color = {\n      rgb: color\n    };else if (typeof color === \"number\") color = {\n      theme: color\n    };\n    xmlq.setChildAttributes(node, name, {\n      rgb: color && color.rgb && color.rgb.toUpperCase(),\n      indexed: null,\n      theme: color && color.theme,\n      tint: color && color.tint\n    });\n    xmlq.removeChildIfEmpty(node, 'color');\n  }\n  _get_bold() {\n    return xmlq.hasChild(this._fontNode, 'b');\n  }\n  _set_bold(bold) {\n    if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n  }\n  _get_italic() {\n    return xmlq.hasChild(this._fontNode, 'i');\n  }\n  _set_italic(italic) {\n    if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n  }\n  _get_underline() {\n    const uNode = xmlq.findChild(this._fontNode, 'u');\n    return uNode ? uNode.attributes.val || true : false;\n  }\n  _set_underline(underline) {\n    if (underline) {\n      const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n      const val = typeof underline === 'string' ? underline : null;\n      xmlq.setAttributes(uNode, {\n        val\n      });\n    } else {\n      xmlq.removeChild(this._fontNode, 'u');\n    }\n  }\n  _get_strikethrough() {\n    return xmlq.hasChild(this._fontNode, 'strike');\n  }\n  _set_strikethrough(strikethrough) {\n    if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n  }\n  _getFontVerticalAlignment() {\n    return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n  }\n  _setFontVerticalAlignment(alignment) {\n    xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n      val: alignment\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n  }\n  _get_subscript() {\n    return this._getFontVerticalAlignment() === \"subscript\";\n  }\n  _set_subscript(subscript) {\n    this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n  }\n  _get_superscript() {\n    return this._getFontVerticalAlignment() === \"superscript\";\n  }\n  _set_superscript(superscript) {\n    this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n  }\n  _get_fontSize() {\n    return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n  }\n  _set_fontSize(size) {\n    xmlq.setChildAttributes(this._fontNode, 'sz', {\n      val: size\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n  }\n  _get_fontFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n  }\n  _set_fontFamily(family) {\n    xmlq.setChildAttributes(this._fontNode, 'name', {\n      val: family\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'name');\n  }\n  _get_fontGenericFamily() {\n    return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n  }\n  _set_fontGenericFamily(genericFamily) {\n    xmlq.setChildAttributes(this._fontNode, 'family', {\n      val: genericFamily\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'family');\n  }\n  _get_fontColor() {\n    return this._getColor(this._fontNode, \"color\");\n  }\n  _set_fontColor(color) {\n    this._setColor(this._fontNode, \"color\", color);\n  }\n  _get_fontScheme() {\n    // can be 'minor', 'major', 'none'\n    return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n  }\n  _set_fontScheme(scheme) {\n    xmlq.setChildAttributes(this._fontNode, 'scheme', {\n      val: scheme\n    });\n    xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n  }\n  _get_horizontalAlignment() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n  }\n  _set_horizontalAlignment(alignment) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      horizontal: alignment\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_justifyLastLine() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n  }\n  _set_justifyLastLine(justifyLastLine) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      justifyLastLine: justifyLastLine ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_indent() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n  }\n  _set_indent(indent) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      indent\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_verticalAlignment() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n  }\n  _set_verticalAlignment(alignment) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      vertical: alignment\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_wrapText() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n  }\n  _set_wrapText(wrapText) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      wrapText: wrapText ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_shrinkToFit() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n  }\n  _set_shrinkToFit(shrinkToFit) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      shrinkToFit: shrinkToFit ? 1 : null\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_textDirection() {\n    const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n    if (readingOrder === 1) return \"left-to-right\";\n    if (readingOrder === 2) return \"right-to-left\";\n    return readingOrder;\n  }\n  _set_textDirection(textDirection) {\n    let readingOrder;\n    if (textDirection === \"left-to-right\") readingOrder = 1;else if (textDirection === \"right-to-left\") readingOrder = 2;\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      readingOrder\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _getTextRotation() {\n    return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n  }\n  _setTextRotation(textRotation) {\n    xmlq.setChildAttributes(this._xfNode, 'alignment', {\n      textRotation\n    });\n    xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n  }\n  _get_textRotation() {\n    let textRotation = this._getTextRotation();\n\n    // Negative angles in Excel correspond to values > 90 in OOXML.\n    if (textRotation > 90) textRotation = 90 - textRotation;\n    return textRotation;\n  }\n  _set_textRotation(textRotation) {\n    // Negative angles in Excel correspond to values > 90 in OOXML.\n    if (textRotation < 0) textRotation = 90 - textRotation;\n    this._setTextRotation(textRotation);\n  }\n  _get_angleTextCounterclockwise() {\n    return this._getTextRotation() === 45;\n  }\n  _set_angleTextCounterclockwise(value) {\n    this._setTextRotation(value ? 45 : null);\n  }\n  _get_angleTextClockwise() {\n    return this._getTextRotation() === 135;\n  }\n  _set_angleTextClockwise(value) {\n    this._setTextRotation(value ? 135 : null);\n  }\n  _get_rotateTextUp() {\n    return this._getTextRotation() === 90;\n  }\n  _set_rotateTextUp(value) {\n    this._setTextRotation(value ? 90 : null);\n  }\n  _get_rotateTextDown() {\n    return this._getTextRotation() === 180;\n  }\n  _set_rotateTextDown(value) {\n    this._setTextRotation(value ? 180 : null);\n  }\n  _get_verticalText() {\n    return this._getTextRotation() === 255;\n  }\n  _set_verticalText(value) {\n    this._setTextRotation(value ? 255 : null);\n  }\n  _get_fill() {\n    const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill'); // jq.get(this._fillNode, \"patternFill[0]\");\n    const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill'); // jq.get(this._fillNode, \"gradientFill[0]\");\n    const patternType = patternFillNode && patternFillNode.attributes.patternType; // jq.get(patternFillNode, \"$.patternType\");\n\n    if (patternType === \"solid\") {\n      return {\n        type: \"solid\",\n        color: this._getColor(patternFillNode, \"fgColor\")\n      };\n    }\n    if (patternType) {\n      return {\n        type: \"pattern\",\n        pattern: patternType,\n        foreground: this._getColor(patternFillNode, \"fgColor\"),\n        background: this._getColor(patternFillNode, \"bgColor\")\n      };\n    }\n    if (gradientFillNode) {\n      const gradientType = gradientFillNode.attributes.type || \"linear\";\n      const fill = {\n        type: \"gradient\",\n        gradientType,\n        stops: _.map(gradientFillNode.children, stop => ({\n          position: stop.attributes.position,\n          color: this._getColor(stop, \"color\")\n        }))\n      };\n      if (gradientType === \"linear\") {\n        fill.angle = gradientFillNode.attributes.degree;\n      } else {\n        fill.left = gradientFillNode.attributes.left;\n        fill.right = gradientFillNode.attributes.right;\n        fill.top = gradientFillNode.attributes.top;\n        fill.bottom = gradientFillNode.attributes.bottom;\n      }\n      return fill;\n    }\n  }\n  _set_fill(fill) {\n    this._fillNode.children = [];\n\n    // No fill\n    if (_.isNil(fill)) return;\n\n    // Pattern fill\n    if (fill.type === \"pattern\") {\n      const patternFill = {\n        name: 'patternFill',\n        attributes: {\n          patternType: fill.pattern\n        },\n        children: []\n      };\n      this._fillNode.children.push(patternFill);\n      this._setColor(patternFill, \"fgColor\", fill.foreground);\n      this._setColor(patternFill, \"bgColor\", fill.background);\n      return;\n    }\n\n    // Gradient fill\n    if (fill.type === \"gradient\") {\n      const gradientFill = {\n        name: 'gradientFill',\n        attributes: {},\n        children: []\n      };\n      this._fillNode.children.push(gradientFill);\n      xmlq.setAttributes(gradientFill, {\n        type: fill.gradientType === \"path\" ? \"path\" : undefined,\n        left: fill.left,\n        right: fill.right,\n        top: fill.top,\n        bottom: fill.bottom,\n        degree: fill.angle\n      });\n      _.forEach(fill.stops, (fillStop, i) => {\n        const stop = {\n          name: 'stop',\n          attributes: {\n            position: fillStop.position\n          },\n          children: []\n        };\n        gradientFill.children.push(stop);\n        this._setColor(stop, 'color', fillStop.color);\n      });\n      return;\n    }\n\n    // Solid fill (really a pattern fill with a solid pattern type).\n    if (!_.isObject(fill)) fill = {\n      type: \"solid\",\n      color: fill\n    };else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = {\n      color: fill\n    };\n    const patternFill = {\n      name: 'patternFill',\n      attributes: {\n        patternType: 'solid'\n      }\n    };\n    this._fillNode.children.push(patternFill);\n    this._setColor(patternFill, \"fgColor\", fill.color);\n  }\n  _getBorder() {\n    const result = {};\n    [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n      const sideNode = xmlq.findChild(this._borderNode, side);\n      const sideResult = {};\n      const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n      if (style) sideResult.style = style;\n      const color = this._getColor(sideNode, 'color');\n      if (color) sideResult.color = color;\n      if (side === \"diagonal\") {\n        const up = this._borderNode.attributes.diagonalUp;\n        const down = this._borderNode.attributes.diagonalDown;\n        let direction;\n        if (up && down) direction = \"both\";else if (up) direction = \"up\";else if (down) direction = \"down\";\n        if (direction) sideResult.direction = direction;\n      }\n      if (!_.isEmpty(sideResult)) result[side] = sideResult;\n    });\n    return result;\n  }\n  _setBorder(settings) {\n    _.forOwn(settings, (setting, side) => {\n      if (typeof setting === \"boolean\") {\n        setting = {\n          style: setting ? \"thin\" : null\n        };\n      } else if (typeof setting === \"string\") {\n        setting = {\n          style: setting\n        };\n      } else if (setting === null || setting === undefined) {\n        setting = {\n          style: null,\n          color: null,\n          direction: null\n        };\n      }\n      if (setting.hasOwnProperty(\"style\")) {\n        xmlq.setChildAttributes(this._borderNode, side, {\n          style: setting.style\n        });\n      }\n      if (setting.hasOwnProperty(\"color\")) {\n        const sideNode = xmlq.findChild(this._borderNode, side);\n        this._setColor(sideNode, \"color\", setting.color);\n      }\n      if (side === \"diagonal\") {\n        xmlq.setAttributes(this._borderNode, {\n          diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n          diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n        });\n      }\n    });\n  }\n  _get_border() {\n    return this._getBorder();\n  }\n  _set_border(settings) {\n    if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n      settings = _.defaults(settings, {\n        left: null,\n        right: null,\n        top: null,\n        bottom: null,\n        diagonal: null\n      });\n      this._setBorder(settings);\n    } else {\n      this._setBorder({\n        left: settings,\n        right: settings,\n        top: settings,\n        bottom: settings\n      });\n    }\n  }\n  _get_borderColor() {\n    return _.mapValues(this._getBorder(), value => value.color);\n  }\n  _set_borderColor(color) {\n    if (_.isObject(color)) {\n      this._setBorder(_.mapValues(color, color => ({\n        color\n      })));\n    } else {\n      this._setBorder({\n        left: {\n          color\n        },\n        right: {\n          color\n        },\n        top: {\n          color\n        },\n        bottom: {\n          color\n        },\n        diagonal: {\n          color\n        }\n      });\n    }\n  }\n  _get_borderStyle() {\n    return _.mapValues(this._getBorder(), value => value.style);\n  }\n  _set_borderStyle(style) {\n    if (_.isObject(style)) {\n      this._setBorder(_.mapValues(style, style => ({\n        style\n      })));\n    } else {\n      this._setBorder({\n        left: {\n          style\n        },\n        right: {\n          style\n        },\n        top: {\n          style\n        },\n        bottom: {\n          style\n        }\n      });\n    }\n  }\n  _get_diagonalBorderDirection() {\n    const border = this._getBorder().diagonal;\n    return border && border.direction;\n  }\n  _set_diagonalBorderDirection(direction) {\n    this._setBorder({\n      diagonal: {\n        direction\n      }\n    });\n  }\n  _get_numberFormat() {\n    const numFmtId = this._xfNode.attributes.numFmtId || 0;\n    return this._styleSheet.getNumberFormatCode(numFmtId);\n  }\n  _set_numberFormat(formatCode) {\n    this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n  }\n}\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n  Style.prototype[`_get_${side}Border`] = function () {\n    return this._getBorder()[side];\n  };\n  Style.prototype[`_set_${side}Border`] = function (settings) {\n    this._setBorder({\n      [side]: settings\n    });\n  };\n  Style.prototype[`_get_${side}BorderColor`] = function () {\n    const border = this._getBorder()[side];\n    return border && border.color;\n  };\n  Style.prototype[`_set_${side}BorderColor`] = function (color) {\n    this._setBorder({\n      [side]: {\n        color\n      }\n    });\n  };\n  Style.prototype[`_get_${side}BorderStyle`] = function () {\n    const border = this._getBorder()[side];\n    return border && border.style;\n  };\n  Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n    this._setBorder({\n      [side]: {\n        style\n      }\n    });\n  };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\nmodule.exports = Style;","map":{"version":3,"names":["ArgHandler","require","_","xmlq","colorIndexes","Style","constructor","styleSheet","id","xfNode","fontNode","fillNode","borderNode","_styleSheet","_id","_xfNode","_fontNode","_fillNode","_borderNode","style","case","name","getterName","Error","value","setterName","handle","arguments","_getColor","node","child","findChild","attributes","color","hasOwnProperty","rgb","theme","indexed","tint","isEmpty","_setColor","setChildAttributes","toUpperCase","removeChildIfEmpty","_get_bold","hasChild","_set_bold","bold","appendChildIfNotFound","removeChild","_get_italic","_set_italic","italic","_get_underline","uNode","val","_set_underline","underline","setAttributes","_get_strikethrough","_set_strikethrough","strikethrough","_getFontVerticalAlignment","getChildAttribute","_setFontVerticalAlignment","alignment","_get_subscript","_set_subscript","subscript","_get_superscript","_set_superscript","superscript","_get_fontSize","_set_fontSize","size","_get_fontFamily","_set_fontFamily","family","_get_fontGenericFamily","_set_fontGenericFamily","genericFamily","_get_fontColor","_set_fontColor","_get_fontScheme","_set_fontScheme","scheme","_get_horizontalAlignment","_set_horizontalAlignment","horizontal","_get_justifyLastLine","_set_justifyLastLine","justifyLastLine","_get_indent","_set_indent","indent","_get_verticalAlignment","_set_verticalAlignment","vertical","_get_wrapText","_set_wrapText","wrapText","_get_shrinkToFit","_set_shrinkToFit","shrinkToFit","_get_textDirection","readingOrder","_set_textDirection","textDirection","_getTextRotation","_setTextRotation","textRotation","_get_textRotation","_set_textRotation","_get_angleTextCounterclockwise","_set_angleTextCounterclockwise","_get_angleTextClockwise","_set_angleTextClockwise","_get_rotateTextUp","_set_rotateTextUp","_get_rotateTextDown","_set_rotateTextDown","_get_verticalText","_set_verticalText","_get_fill","patternFillNode","gradientFillNode","patternType","type","pattern","foreground","background","gradientType","fill","stops","map","children","stop","position","angle","degree","left","right","top","bottom","_set_fill","isNil","patternFill","push","gradientFill","undefined","forEach","fillStop","i","isObject","_getBorder","result","side","sideNode","sideResult","up","diagonalUp","down","diagonalDown","direction","_setBorder","settings","forOwn","setting","_get_border","_set_border","defaults","diagonal","_get_borderColor","mapValues","_set_borderColor","_get_borderStyle","_set_borderStyle","_get_diagonalBorderDirection","border","_set_diagonalBorderDirection","_get_numberFormat","numFmtId","getNumberFormatCode","_set_numberFormat","formatCode","getNumberFormatId","prototype","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/Style.js"],"sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n    /**\n     * Creates a new instance of _Style.\n     * @constructor\n     * @param {StyleSheet} styleSheet - The styleSheet.\n     * @param {number} id - The style ID.\n     * @param {{}} xfNode - The xf node.\n     * @param {{}} fontNode - The font node.\n     * @param {{}} fillNode - The fill node.\n     * @param {{}} borderNode - The border node.\n     */\n    constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n        this._styleSheet = styleSheet;\n        this._id = id;\n        this._xfNode = xfNode;\n        this._fontNode = fontNode;\n        this._fillNode = fillNode;\n        this._borderNode = borderNode;\n    }\n\n    /**\n     * Gets the style ID.\n     * @returns {number} The ID.\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n    style() {\n        return new ArgHandler(\"_Style.style\")\n            .case('string', name => {\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case(['string', '*'], (name, value) => {\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                this[setterName](value);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'name', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n\n    _get_horizontalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n\n    _set_horizontalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { horizontal: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_justifyLastLine() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n\n    _set_justifyLastLine(justifyLastLine) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { justifyLastLine: justifyLastLine ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_indent() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n\n    _set_indent(indent) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { indent });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_verticalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n\n    _set_verticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { vertical: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_wrapText() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n\n    _set_wrapText(wrapText) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { wrapText: wrapText ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_shrinkToFit() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n\n    _set_shrinkToFit(shrinkToFit) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { shrinkToFit: shrinkToFit ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textDirection() {\n        const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n        if (readingOrder === 1) return \"left-to-right\";\n        if (readingOrder === 2) return \"right-to-left\";\n        return readingOrder;\n    }\n\n    _set_textDirection(textDirection) {\n        let readingOrder;\n        if (textDirection === \"left-to-right\") readingOrder = 1;\n        else if (textDirection === \"right-to-left\") readingOrder = 2;\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { readingOrder });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _getTextRotation() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n\n    _setTextRotation(textRotation) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { textRotation });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textRotation() {\n        let textRotation = this._getTextRotation();\n\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation > 90) textRotation = 90 - textRotation;\n        return textRotation;\n    }\n\n    _set_textRotation(textRotation) {\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation < 0) textRotation = 90 - textRotation;\n        this._setTextRotation(textRotation);\n    }\n\n    _get_angleTextCounterclockwise() {\n        return this._getTextRotation() === 45;\n    }\n\n    _set_angleTextCounterclockwise(value) {\n        this._setTextRotation(value ? 45 : null);\n    }\n\n    _get_angleTextClockwise() {\n        return this._getTextRotation() === 135;\n    }\n\n    _set_angleTextClockwise(value) {\n        this._setTextRotation(value ? 135 : null);\n    }\n\n    _get_rotateTextUp() {\n        return this._getTextRotation() === 90;\n    }\n\n    _set_rotateTextUp(value) {\n        this._setTextRotation(value ? 90 : null);\n    }\n\n    _get_rotateTextDown() {\n        return this._getTextRotation() === 180;\n    }\n\n    _set_rotateTextDown(value) {\n        this._setTextRotation(value ? 180 : null);\n    }\n\n    _get_verticalText() {\n        return this._getTextRotation() === 255;\n    }\n\n    _set_verticalText(value) {\n        this._setTextRotation(value ? 255 : null);\n    }\n\n    _get_fill() {\n        const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill');// jq.get(this._fillNode, \"patternFill[0]\");\n        const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill');// jq.get(this._fillNode, \"gradientFill[0]\");\n        const patternType = patternFillNode && patternFillNode.attributes.patternType;// jq.get(patternFillNode, \"$.patternType\");\n\n        if (patternType === \"solid\") {\n            return {\n                type: \"solid\",\n                color: this._getColor(patternFillNode, \"fgColor\")\n            };\n        }\n\n        if (patternType) {\n            return {\n                type: \"pattern\",\n                pattern: patternType,\n                foreground: this._getColor(patternFillNode, \"fgColor\"),\n                background: this._getColor(patternFillNode, \"bgColor\")\n            };\n        }\n\n        if (gradientFillNode) {\n            const gradientType = gradientFillNode.attributes.type || \"linear\";\n            const fill = {\n                type: \"gradient\",\n                gradientType,\n                stops: _.map(gradientFillNode.children, stop => ({\n                    position: stop.attributes.position,\n                    color: this._getColor(stop, \"color\")\n                }))\n            };\n\n            if (gradientType === \"linear\") {\n                fill.angle = gradientFillNode.attributes.degree;\n            } else {\n                fill.left = gradientFillNode.attributes.left;\n                fill.right = gradientFillNode.attributes.right;\n                fill.top = gradientFillNode.attributes.top;\n                fill.bottom = gradientFillNode.attributes.bottom;\n            }\n\n            return fill;\n        }\n    }\n\n    _set_fill(fill) {\n        this._fillNode.children = [];\n\n        // No fill\n        if (_.isNil(fill)) return;\n\n        // Pattern fill\n        if (fill.type === \"pattern\") {\n            const patternFill = {\n                name: 'patternFill',\n                attributes: { patternType: fill.pattern },\n                children: []\n            };\n            this._fillNode.children.push(patternFill);\n            this._setColor(patternFill, \"fgColor\", fill.foreground);\n            this._setColor(patternFill, \"bgColor\", fill.background);\n            return;\n        }\n\n        // Gradient fill\n        if (fill.type === \"gradient\") {\n            const gradientFill = { name: 'gradientFill', attributes: {}, children: [] };\n            this._fillNode.children.push(gradientFill);\n            xmlq.setAttributes(gradientFill, {\n                type: fill.gradientType === \"path\" ? \"path\" : undefined,\n                left: fill.left,\n                right: fill.right,\n                top: fill.top,\n                bottom: fill.bottom,\n                degree: fill.angle\n            });\n\n            _.forEach(fill.stops, (fillStop, i) => {\n                const stop = {\n                    name: 'stop',\n                    attributes: { position: fillStop.position },\n                    children: []\n                };\n                gradientFill.children.push(stop);\n                this._setColor(stop, 'color', fillStop.color);\n            });\n\n            return;\n        }\n\n        // Solid fill (really a pattern fill with a solid pattern type).\n        if (!_.isObject(fill)) fill = { type: \"solid\", color: fill };\n        else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = { color: fill };\n\n        const patternFill = {\n            name: 'patternFill',\n            attributes: { patternType: 'solid' }\n        };\n        this._fillNode.children.push(patternFill);\n        this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n\n    _getBorder() {\n        const result = {};\n        [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n            const sideNode = xmlq.findChild(this._borderNode, side);\n            const sideResult = {};\n\n            const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n            if (style) sideResult.style = style;\n            const color = this._getColor(sideNode, 'color');\n            if (color) sideResult.color = color;\n\n            if (side === \"diagonal\") {\n                const up = this._borderNode.attributes.diagonalUp;\n                const down = this._borderNode.attributes.diagonalDown;\n                let direction;\n                if (up && down) direction = \"both\";\n                else if (up) direction = \"up\";\n                else if (down) direction = \"down\";\n                if (direction) sideResult.direction = direction;\n            }\n\n            if (!_.isEmpty(sideResult)) result[side] = sideResult;\n        });\n\n        return result;\n    }\n\n    _setBorder(settings) {\n        _.forOwn(settings, (setting, side) => {\n            if (typeof setting === \"boolean\") {\n                setting = { style: setting ? \"thin\" : null };\n            } else if (typeof setting === \"string\") {\n                setting = { style: setting };\n            } else if (setting === null || setting === undefined) {\n                setting = { style: null, color: null, direction: null };\n            }\n\n            if (setting.hasOwnProperty(\"style\")) {\n                xmlq.setChildAttributes(this._borderNode, side, { style: setting.style });\n            }\n\n            if (setting.hasOwnProperty(\"color\")) {\n                const sideNode = xmlq.findChild(this._borderNode, side);\n                this._setColor(sideNode, \"color\", setting.color);\n            }\n\n            if (side === \"diagonal\") {\n                xmlq.setAttributes(this._borderNode, {\n                    diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n                    diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n                });\n            }\n        });\n    }\n\n    _get_border() {\n        return this._getBorder();\n    }\n\n    _set_border(settings) {\n        if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n            settings = _.defaults(settings, {\n                left: null,\n                right: null,\n                top: null,\n                bottom: null,\n                diagonal: null\n            });\n            this._setBorder(settings);\n        } else {\n            this._setBorder({\n                left: settings,\n                right: settings,\n                top: settings,\n                bottom: settings\n            });\n        }\n    }\n\n    _get_borderColor() {\n        return _.mapValues(this._getBorder(), value => value.color);\n    }\n\n    _set_borderColor(color) {\n        if (_.isObject(color)) {\n            this._setBorder(_.mapValues(color, color => ({ color })));\n        } else {\n            this._setBorder({\n                left: { color },\n                right: { color },\n                top: { color },\n                bottom: { color },\n                diagonal: { color }\n            });\n        }\n    }\n\n    _get_borderStyle() {\n        return _.mapValues(this._getBorder(), value => value.style);\n    }\n\n    _set_borderStyle(style) {\n        if (_.isObject(style)) {\n            this._setBorder(_.mapValues(style, style => ({ style })));\n        } else {\n            this._setBorder({\n                left: { style },\n                right: { style },\n                top: { style },\n                bottom: { style }\n            });\n        }\n    }\n\n    _get_diagonalBorderDirection() {\n        const border = this._getBorder().diagonal;\n        return border && border.direction;\n    }\n\n    _set_diagonalBorderDirection(direction) {\n        this._setBorder({ diagonal: { direction } });\n    }\n\n    _get_numberFormat() {\n        const numFmtId = this._xfNode.attributes.numFmtId || 0;\n        return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n\n    _set_numberFormat(formatCode) {\n        this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n    Style.prototype[`_get_${side}Border`] = function () {\n        return this._getBorder()[side];\n    };\n\n    Style.prototype[`_set_${side}Border`] = function (settings) {\n        this._setBorder({ [side]: settings });\n    };\n\n    Style.prototype[`_get_${side}BorderColor`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.color;\n    };\n\n    Style.prototype[`_set_${side}BorderColor`] = function (color) {\n        this._setBorder({ [side]: { color } });\n    };\n\n    Style.prototype[`_get_${side}BorderStyle`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.style;\n    };\n\n    Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n        this._setBorder({ [side]: { style } });\n    };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\n\nmodule.exports = Style;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}