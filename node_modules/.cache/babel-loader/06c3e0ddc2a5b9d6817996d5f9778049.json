{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/w2d/personeria/personeria-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nvar ArgHandler = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of ArgHandler.\n   * @param {string} name - The method name to use in error messages.\n   */\n  function ArgHandler(name) {\n    _classCallCheck(this, ArgHandler);\n    this._name = name;\n    this._cases = [];\n  }\n\n  /**\n   * Add a case.\n   * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n   * @param {Function} handler - The function to call when this case is matched.\n   * @returns {ArgHandler} The handler for chaining.\n   */\n  _createClass(ArgHandler, [{\n    key: \"case\",\n    value: function _case(types, handler) {\n      if (arguments.length === 1) {\n        handler = types;\n        types = [];\n      }\n      if (!Array.isArray(types)) types = [types];\n      this._cases.push({\n        types: types,\n        handler: handler\n      });\n      return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n  }, {\n    key: \"handle\",\n    value: function handle(args) {\n      for (var i = 0; i < this._cases.length; i++) {\n        var c = this._cases[i];\n        if (this._argsMatchTypes(args, c.types)) {\n          return c.handler.apply(null, args);\n        }\n      }\n      throw new Error(\"\".concat(this._name, \": Invalid arguments.\"));\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n  }, {\n    key: \"_argsMatchTypes\",\n    value: function _argsMatchTypes(args, types) {\n      if (args.length !== types.length) return false;\n      return _.every(args, function (arg, i) {\n        var type = types[i];\n        if (type === '*') return true;\n        if (type === 'nil') return _.isNil(arg);\n        if (type === 'string') return typeof arg === \"string\";\n        if (type === 'boolean') return typeof arg === \"boolean\";\n        if (type === 'number') return typeof arg === \"number\";\n        if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n        if (type === 'function') return typeof arg === \"function\";\n        if (type === 'array') return Array.isArray(arg);\n        if (type === 'date') return arg && arg.constructor === Date;\n        if (type === 'object') return arg && arg.constructor === Object;\n        if (arg && arg.constructor && arg.constructor.name === type) return true;\n        throw new Error(\"Unknown type: \".concat(type));\n      });\n    }\n  }]);\n  return ArgHandler;\n}();\nmodule.exports = ArgHandler;","map":{"version":3,"names":["_","require","ArgHandler","name","_name","_cases","types","handler","arguments","length","Array","isArray","push","args","i","c","_argsMatchTypes","apply","Error","every","arg","type","isNil","isInteger","constructor","Date","Object","module","exports"],"sources":["C:/w2d/personeria/personeria-ui/node_modules/xlsx-populate/lib/ArgHandler.js"],"sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n    /**\n     * Creates a new instance of ArgHandler.\n     * @param {string} name - The method name to use in error messages.\n     */\n    constructor(name) {\n        this._name = name;\n        this._cases = [];\n    }\n\n    /**\n     * Add a case.\n     * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n     * @param {Function} handler - The function to call when this case is matched.\n     * @returns {ArgHandler} The handler for chaining.\n     */\n    case(types, handler) {\n        if (arguments.length === 1) {\n            handler = types;\n            types = [];\n        }\n\n        if (!Array.isArray(types)) types = [types];\n        this._cases.push({ types, handler });\n        return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n    handle(args) {\n        for (let i = 0; i < this._cases.length; i++) {\n            const c = this._cases[i];\n            if (this._argsMatchTypes(args, c.types)) {\n                return c.handler.apply(null, args);\n            }\n        }\n\n        throw new Error(`${this._name}: Invalid arguments.`);\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n    _argsMatchTypes(args, types) {\n        if (args.length !== types.length) return false;\n\n        return _.every(args, (arg, i) => {\n            const type = types[i];\n\n            if (type === '*') return true;\n            if (type === 'nil') return _.isNil(arg);\n            if (type === 'string') return typeof arg === \"string\";\n            if (type === 'boolean') return typeof arg === \"boolean\";\n            if (type === 'number') return typeof arg === \"number\";\n            if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n            if (type === 'function') return typeof arg === \"function\";\n            if (type === 'array') return Array.isArray(arg);\n            if (type === 'date') return arg && arg.constructor === Date;\n            if (type === 'object') return arg && arg.constructor === Object;\n            if (arg && arg.constructor && arg.constructor.name === type) return true;\n\n            throw new Error(`Unknown type: ${type}`);\n        });\n    }\n}\n\nmodule.exports = ArgHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}