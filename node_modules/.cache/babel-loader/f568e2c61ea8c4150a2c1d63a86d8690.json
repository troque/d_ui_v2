{"ast":null,"code":"var _jsxFileName = \"C:\\\\w2d\\\\personeria\\\\personeria-ui\\\\src\\\\components\\\\RamasProceso\\\\ClasificacionRadicado\\\\ClasificacionRadicadoLista.js\",\n  _s = $RefreshSig$();\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport ClasificacionRadicadoApi from '../../Api/Services/ClasificacionRadicadoApi';\nimport Spinner from '../../Utils/Spinner';\nimport { Navigate } from \"react-router-dom\";\nimport CierreEtapaApi from '../../Api/Services/CierreEtapaApi';\nimport { useLocation } from 'react-router-dom';\nimport { hasAccess, quitarAcentos } from '../../../components/Utils/Common';\nimport ListaBotones from '../../Utils/ListaBotones';\nimport DataTable from 'react-data-table-component';\nimport '../../Utils/Constants';\nimport GenericApi from '../../Api/Services/GenericApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ClasificacionRadicadoLista() {\n  _s();\n  const [errorApi, setErrorApi] = useState('');\n  const [estadoEtapaCapturaReparto, setEstadoEtapaCapturaReparto] = useState(false);\n  const [getEstadoLista, setEstadoLista] = useState('');\n  const [getSeach, setSeach] = useState('');\n  const paganationPerPages = global.Constants.DATA_TABLE.PAGINATION_PER_PAGE;\n  const [perPage, setPerPage] = useState(global.Constants.DATA_TABLE.PAGINATION_PER_PAGE);\n  const [pageActual, setPageActual] = useState(1);\n  const [clasificacionRadicadoLista, setClasificacionRadicadoLista] = useState({\n    data: [],\n    links: [],\n    meta: []\n  });\n  const [getMostrarBotonAgregar, setMostrarBotonAgregar] = useState(null);\n  const [getNombreProceso, setNombreProceso] = useState('');\n  const [getQuejaInterna, setQuejaInterna] = useState(false);\n  const location = useLocation();\n  const {\n    from,\n    disable\n  } = location.state;\n  let radicado = from.radicado;\n  let procesoDisciplinarioId = from.procesoDisciplinarioId;\n  const idEtapa = parseInt(from.idEtapa);\n  const columns = [{\n    name: 'Registrado por',\n    cell: clasificacion_radicado => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Usuario: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), clasificacion_radicado.attributes.usuario_registra.nombre + ' ' + clasificacion_radicado.attributes.usuario_registra.apellido, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 170\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Etapa: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), clasificacion_radicado.attributes.etapa.nombre, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 89\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Fecha: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), clasificacion_radicado.attributes.created_at, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 87\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Dependencia: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), clasificacion_radicado.attributes.dependencia.nombre, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 101\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 45\n    }, this),\n    selector: clasificacion_radicado => clasificacion_radicado.attributes.etapa.nombre,\n    sortable: true,\n    width: \"25%\"\n  }, {\n    name: 'Tipo de expediente',\n    cell: clasificacion_radicado => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [clasificacion_radicado.attributes.expediente.nombre, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 71\n      }, this), clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) ? clasificacion_radicado.attributes.tipo_derecho_peticion.nombre : null, clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.QUEJA) ? clasificacion_radicado.attributes.tipo_queja.nombre : null, clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.TUTELA) ? clasificacion_radicado.attributes.fecha_termino : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.TUTELA) ? \" (\" + (clasificacion_radicado.attributes.hora_termino != null ? clasificacion_radicado.attributes.hora_termino : \"0\") + \") horas\" : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 45\n    }, this),\n    selector: clasificacion_radicado => clasificacion_radicado.attributes.expediente.nombre,\n    sortable: true,\n    width: \"20%\"\n  }, {\n    name: 'Descripción',\n    cell: clasificacion_radicado => /*#__PURE__*/_jsxDEV(\"div\", {\n      title: clasificacion_radicado.attributes.observaciones,\n      children: clasificacion_radicado.attributes.observaciones ? clasificacion_radicado.attributes.observaciones.length > global.Constants.TEXT_AREA.CANTIDAD_MINIMA_DESCRIPCION ? clasificacion_radicado.attributes.observaciones.substring(0, global.Constants.TEXT_AREA.CANTIDAD_MINIMA_DESCRIPCION) + \"...\" : clasificacion_radicado.attributes.observaciones : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 45\n    }, this),\n    selector: clasificacion_radicado => clasificacion_radicado.attributes.expediente.nombre,\n    sortable: true,\n    width: \"30%\"\n  }, {\n    name: 'Estado',\n    selector: clasificacion_radicado => clasificacion_radicado.attributes.estado == \"1\" ? 'Activo' : 'Inactivo',\n    sortable: true,\n    width: \"10%\"\n  }, {\n    name: 'Término',\n    selector: clasificacion_radicado => 'Ver Normatividad',\n    sortable: true,\n    width: \"15%\"\n  }];\n  const [getRoutes, setRoutes] = useState({\n    id_etapa: from.idEtapa,\n    id_fase: global.Constants.FASES.CLASIFICACION,\n    crear_registro: \"/ClasificacionRadicadoForm\",\n    consultar_registros: \"/ClasificacionRadicadoLista\",\n    adjuntar_documento: \"/SoporteRadicadoForm\",\n    repositorio_documentos: \"/SoporteRadicadoLista\",\n    modulo: \"CR_ClasificacionRadicado\",\n    funcionalidad_crear: \"Crear\",\n    funcionalidad_consultar: \"Consultar\",\n    muestra_atras: true,\n    muestra_inactivos: true\n  });\n  useEffect(() => {\n    async function fetchData() {\n      window.showSpinner(true);\n      setEstadoLista(\"Activos\");\n      cargarClasificaciones(1, paganationPerPages, '1');\n\n      // VALIDA CIERRE DE ETAPA EVALUACION\n      const dataCierreEtapa = {\n        \"data\": {\n          \"type\": \"cerrar_etapa\",\n          \"attributes\": {\n            \"id_proceso_disciplinario\": procesoDisciplinarioId,\n            \"id_etapa\": global.Constants.ETAPAS.CAPTURA_REPARTO,\n            \"id_delegada\": \"id_delegada\",\n            \"id_funcionario\": \"id_funcionario\"\n          }\n        }\n      };\n\n      /*CierreEtapaApi.getCierreEtapaByIdProcesoDisciplinario(dataCierreEtapa).then(\r\n          datos => {\r\n              if (!datos.error) {\r\n                  if (datos[\"data\"].length > 0) {\r\n                      setEstadoEtapaCapturaReparto(true);\r\n                  }\r\n              }\r\n              else {\r\n                  setErrorApi(datos.error.toString())\r\n                  window.showModal(1)\r\n              }\r\n          }\r\n      )*/\n    }\n\n    fetchData();\n  }, []);\n  const cargarClasificaciones = (page, perPage, estado) => {\n    const data = {\n      \"data\": {\n        \"type\": \"clasificacion_radicado\",\n        \"attributes\": {\n          \"id_proceso_disciplinario\": procesoDisciplinarioId,\n          \"id_etapa\": global.Constants.ETAPAS.CAPTURA_REPARTO,\n          \"id_tipo_expediente\": \"1\",\n          \"estado\": estado,\n          'per_page': perPage,\n          'current_page': page\n        }\n      }\n    };\n    // console.log(JSON.stringify(data));\n\n    if (hasAccess('CR_ClasificacionRadicado', 'Consultar')) {\n      ClasificacionRadicadoApi.getAllClasificacionRadicadoByIdProDisciplinario(data, procesoDisciplinarioId).then(datos => {\n        if (!datos.error) {\n          setClasificacionRadicadoLista(datos);\n          //validarMostrarBotonAgregar();\n          validarTipoExpedienteQuejaInterna(datos);\n          if (datos.data.length > 0) {\n            from.subTipoExpediente = datos.data[0][\"attributes\"];\n          }\n        }\n        /* else {\r\n             setErrorApi(datos.error.toString())\r\n             window.showSpinner(false);\r\n             window.showModal()\r\n         }*/\n      });\n    } else {\n      window.showSpinner(false);\n    }\n  };\n\n  // Metodo encargado de validar el tipo de expediente del proceso\n  const validarTipoExpedienteQuejaInterna = dataClasificacion => {\n    // Se captura y valida si hay informacion del clasificado\n    let hayInformacion;\n\n    // Se valida que haya informacion\n    if (dataClasificacion && dataClasificacion.data.length > 0) {\n      // Se redeclara la variable\n      hayInformacion = true;\n    }\n\n    // Se ejecuta la API\n    GenericApi.getGeneric(\"validar-tipo-expediente-queja-interna/\" + procesoDisciplinarioId).then(\n    // Se inicializa la variable de respuesta\n    datos => {\n      // Se valida que no haya error\n      if (!datos.error) {\n        console.log(\"idEtapa                        -> \", idEtapa);\n        console.log(\"from.cierreEtapaCapturaReparto -> \", datos.data.attributes.queja_interna);\n        console.log(\"----------------------------------------------------\");\n        console.log(from);\n        console.log(from.idTipoProceso);\n\n        // Se valida cuando es queja interna\n        if (datos.data.attributes.queja_interna && idEtapa > 1) {\n          console.log(\"La etapa es queja interna y es mayor a 1\");\n\n          // Se setea el boton en true \n          setMostrarBotonAgregar(false);\n        } else if (datos.data.attributes.queja_interna && idEtapa == 1) {\n          console.log(\"La etapa es queja interna y es igual a 1\");\n\n          // Se setea el boton en false \n          setMostrarBotonAgregar(false);\n        } else if (from.idTipoProceso == 2) {\n          console.log(\"La etapa es queja interna y es igual a 1\");\n          setMostrarBotonAgregar(false);\n        } else if (idEtapa > 1) {\n          console.log(\"La etapa es mayor a 1\");\n\n          // Se setea el boton en false \n          setMostrarBotonAgregar(false);\n        } else if (idEtapa == 1) {\n          console.log(\"La etapa es igual a 1\");\n\n          // Se setea el boton en false \n          setMostrarBotonAgregar(true);\n        }\n        console.log(\"----------------------------------------------------\");\n\n        // Se llama el metodo\n        nombreProceso();\n      }\n    });\n  };\n  const nombreProceso = () => {\n    GenericApi.getByIdGeneric(\"nombre-proceso\", procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setNombreProceso(datos.data.attributes.nombre);\n        validarTipoProcesoDisciplinario();\n      }\n    });\n  };\n\n  // Metodo encargado de validar el tipo de expediente del proceso\n  const validarTipoProcesoDisciplinario = () => {\n    GenericApi.getGeneric(\"validar-proceso-disciplinario/\" + procesoDisciplinarioId).then(datos => {\n      if (!datos.error) {\n        setMostrarBotonAgregar(false);\n        console.log(\"HOLA1 \" + getMostrarBotonAgregar);\n        console.log(\"HOLA1\");\n      }\n      window.showSpinner(false);\n    });\n  };\n  const handlePageChange = page => {\n    //window.showSpinner(true);\n    setPageActual(page);\n    //cargarClasificaciones(page, perPage, (getEstadoLista == \"Inactivos\" ? '0' : \"1\"));\n  };\n\n  const handlePerRowsChange = async (newPerPage, page) => {\n    //window.showSpinner(true);\n    setPerPage(newPerPage);\n    setPageActual(page);\n    //cargarClasificaciones(page, newPerPage, (getEstadoLista == \"Inactivos\" ? '0' : \"1\"));\n  };\n\n  const handleCallback = childData => {\n    try {\n      window.showSpinner(true);\n      setEstadoLista(childData == global.Constants.ESTADOS.INACTIVO ? \"Inactivos\" : \"Activos\");\n      cargarClasificaciones(1, paganationPerPages, childData);\n    } catch (error) {}\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w2d_block\",\n          children: /*#__PURE__*/_jsxDEV(\"nav\", {\n            \"aria-label\": \"breadcrumb\",\n            children: /*#__PURE__*/_jsxDEV(\"ol\", {\n              className: \"breadcrumb breadcrumb-alt push\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                class: \"breadcrumb-item\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                  underline: \"hover\",\n                  className: \"text-dark\",\n                  to: `/MisPendientes`,\n                  children: /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: \"Mis Pendientes\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 130\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 62\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                class: \"breadcrumb-item\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n                  underline: \"hover\",\n                  className: \"text-dark\",\n                  to: `/RamasProceso/`,\n                  state: {\n                    from: from,\n                    disable: disable\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"small\", {\n                    children: \"Ramas del proceso\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 171\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 62\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                class: \"breadcrumb-item\",\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Lista de clasificaci\\xF3n del radicado\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 62\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block block-themed\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"block-title\",\n              children: [getNombreProceso, \" :: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Consultar lista de Clasificaci\\xF3n del radicado \", getEstadoLista]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 79\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"block-content\",\n            children: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-md-3\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"form-group \",\n                    children: /*#__PURE__*/_jsxDEV(Field, {\n                      type: \"text\",\n                      id: \"search\",\n                      name: \"search\",\n                      value: getSeach,\n                      onChange: e => setSeach(e.target.value),\n                      onKeyPress: e => {\n                        e.key === 'Enter' && e.preventDefault();\n                      },\n                      className: \"form-control border border-success\",\n                      placeholder: \"Buscar\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 340,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 37\n                }, this), getMostrarBotonAgregar != null ? /*#__PURE__*/_jsxDEV(ListaBotones, {\n                  getRoutes: getRoutes,\n                  from: from,\n                  mostrarBotonAgregar: getMostrarBotonAgregar,\n                  parentCallback: handleCallback,\n                  id: \"botonesNavegacion\",\n                  name: \"botonesNavegacion\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 41\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 33\n              }, this), hasAccess('CR_ClasificacionRadicado', 'Consultar') ? /*#__PURE__*/_jsxDEV(DataTable, {\n                className: \"table table-bordered table-striped table-vcenter js-dataTable-full\",\n                columns: columns,\n                data: clasificacionRadicadoLista.data.filter(suggestion => {\n                  if (getSeach === \"\") {\n                    return suggestion;\n                  } else if ((quitarAcentos(suggestion.attributes.etapa.nombre) + suggestion.attributes.created_at + quitarAcentos(suggestion.attributes.estado) + quitarAcentos(suggestion.attributes.observaciones) + quitarAcentos(suggestion.attributes.nombre_completo) + ((suggestion.attributes.expediente ? quitarAcentos(suggestion.attributes.expediente.nombre) : \"\") + \" \" + (suggestion.attributes.tipo_queja ? quitarAcentos(suggestion.attributes.tipo_queja.nombre) : \"\")) + (suggestion.attributes.tipo_derecho_peticion ? quitarAcentos(suggestion.attributes.tipo_derecho_peticion.nombre) : \"\") + (suggestion.attributes.fecha_termino ? suggestion.attributes.fecha_termino : \"\") + (suggestion.attributes.hora_termino ? suggestion.attributes.hora_termino : \"\")).toLowerCase().includes(quitarAcentos(getSeach.toLowerCase()))) {\n                    return suggestion;\n                  }\n                }),\n                perPage: perPage,\n                page: pageActual,\n                pagination: true,\n                noDataComponent: global.Constants.DATA_TABLE.SIN_DATOS_TABLE,\n                paginationTotalRows: clasificacionRadicadoLista.data.length,\n                onChangePage: handlePageChange,\n                onChangeRowsPerPage: handlePerRowsChange,\n                defaultSortFieldId: \"Nombre\",\n                striped: true,\n                paginationComponentOptions: {\n                  rowsPerPageText: global.Constants.DATA_TABLE.FILTRO_POR_PAGINA\n                },\n                defaultSortAsc: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 41\n              }, this) : null]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ClasificacionRadicadoLista, \"tJdFWw3g6LVFo5VgV1EbFW0fBVU=\", false, function () {\n  return [useLocation];\n});\n_c = ClasificacionRadicadoLista;\nexport default ClasificacionRadicadoLista;\nvar _c;\n$RefreshReg$(_c, \"ClasificacionRadicadoLista\");","map":{"version":3,"names":["ErrorMessage","Field","Form","Formik","React","useEffect","useState","Link","ClasificacionRadicadoApi","Spinner","Navigate","CierreEtapaApi","useLocation","hasAccess","quitarAcentos","ListaBotones","DataTable","GenericApi","ClasificacionRadicadoLista","errorApi","setErrorApi","estadoEtapaCapturaReparto","setEstadoEtapaCapturaReparto","getEstadoLista","setEstadoLista","getSeach","setSeach","paganationPerPages","global","Constants","DATA_TABLE","PAGINATION_PER_PAGE","perPage","setPerPage","pageActual","setPageActual","clasificacionRadicadoLista","setClasificacionRadicadoLista","data","links","meta","getMostrarBotonAgregar","setMostrarBotonAgregar","getNombreProceso","setNombreProceso","getQuejaInterna","setQuejaInterna","location","from","disable","state","radicado","procesoDisciplinarioId","idEtapa","parseInt","columns","name","cell","clasificacion_radicado","attributes","usuario_registra","nombre","apellido","etapa","created_at","dependencia","selector","sortable","width","expediente","id","TIPOS_EXPEDIENTES","DERECHO_PETICION","tipo_derecho_peticion","QUEJA","tipo_queja","TUTELA","fecha_termino","hora_termino","observaciones","length","TEXT_AREA","CANTIDAD_MINIMA_DESCRIPCION","substring","estado","getRoutes","setRoutes","id_etapa","id_fase","FASES","CLASIFICACION","crear_registro","consultar_registros","adjuntar_documento","repositorio_documentos","modulo","funcionalidad_crear","funcionalidad_consultar","muestra_atras","muestra_inactivos","fetchData","window","showSpinner","cargarClasificaciones","dataCierreEtapa","ETAPAS","CAPTURA_REPARTO","page","getAllClasificacionRadicadoByIdProDisciplinario","then","datos","error","validarTipoExpedienteQuejaInterna","subTipoExpediente","dataClasificacion","hayInformacion","getGeneric","console","log","queja_interna","idTipoProceso","nombreProceso","getByIdGeneric","validarTipoProcesoDisciplinario","handlePageChange","handlePerRowsChange","newPerPage","handleCallback","childData","ESTADOS","INACTIVO","e","target","value","key","preventDefault","filter","suggestion","nombre_completo","toLowerCase","includes","SIN_DATOS_TABLE","rowsPerPageText","FILTRO_POR_PAGINA"],"sources":["C:/w2d/personeria/personeria-ui/src/components/RamasProceso/ClasificacionRadicado/ClasificacionRadicadoLista.js"],"sourcesContent":["import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport ClasificacionRadicadoApi from '../../Api/Services/ClasificacionRadicadoApi';\r\nimport Spinner from '../../Utils/Spinner';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport CierreEtapaApi from '../../Api/Services/CierreEtapaApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { hasAccess, quitarAcentos } from '../../../components/Utils/Common';\r\nimport ListaBotones from '../../Utils/ListaBotones';\r\nimport DataTable from 'react-data-table-component';\r\nimport '../../Utils/Constants';\r\nimport GenericApi from '../../Api/Services/GenericApi';\r\n\r\nfunction ClasificacionRadicadoLista() {\r\n\r\n\r\n    const [errorApi, setErrorApi] = useState('');\r\n    const [estadoEtapaCapturaReparto, setEstadoEtapaCapturaReparto] = useState(false);\r\n    const [getEstadoLista, setEstadoLista] = useState('');\r\n    const [getSeach, setSeach] = useState('');\r\n    const paganationPerPages = global.Constants.DATA_TABLE.PAGINATION_PER_PAGE;\r\n    const [perPage, setPerPage] = useState(global.Constants.DATA_TABLE.PAGINATION_PER_PAGE);\r\n    const [pageActual, setPageActual] = useState(1);\r\n    const [clasificacionRadicadoLista, setClasificacionRadicadoLista] = useState({ data: [], links: [], meta: [] });\r\n    const [getMostrarBotonAgregar, setMostrarBotonAgregar] = useState(null);\r\n    const [getNombreProceso, setNombreProceso] = useState('');\r\n    const [getQuejaInterna, setQuejaInterna] = useState(false);\r\n\r\n    const location = useLocation()\r\n    const { from, disable } = location.state\r\n    let radicado = from.radicado;\r\n    let procesoDisciplinarioId = from.procesoDisciplinarioId;\r\n    const idEtapa = parseInt(from.idEtapa);\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Registrado por',\r\n            cell: clasificacion_radicado => <div>\r\n                <strong>Usuario: </strong>{clasificacion_radicado.attributes.usuario_registra.nombre + ' ' + clasificacion_radicado.attributes.usuario_registra.apellido}<br />\r\n                <strong>Etapa: </strong>{clasificacion_radicado.attributes.etapa.nombre}<br />\r\n                <strong>Fecha: </strong>{clasificacion_radicado.attributes.created_at}<br />\r\n                <strong>Dependencia: </strong>{clasificacion_radicado.attributes.dependencia.nombre}<br />\r\n            </div>,\r\n\r\n            selector: clasificacion_radicado => clasificacion_radicado.attributes.etapa.nombre,\r\n            sortable: true,\r\n            width: \"25%\"\r\n        },\r\n\r\n        {\r\n            name: 'Tipo de expediente',\r\n            cell: clasificacion_radicado => <div>\r\n                {clasificacion_radicado.attributes.expediente.nombre} <br />\r\n                {clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.DERECHO_PETICION) ? clasificacion_radicado.attributes.tipo_derecho_peticion.nombre : null}\r\n                {clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.QUEJA) ? clasificacion_radicado.attributes.tipo_queja.nombre : null}\r\n                {clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.TUTELA) ? clasificacion_radicado.attributes.fecha_termino : null}\r\n                <br />{clasificacion_radicado.attributes.expediente.id === parseInt(global.Constants.TIPOS_EXPEDIENTES.TUTELA) ? \" (\" + ((clasificacion_radicado.attributes.hora_termino) != null ? (clasificacion_radicado.attributes.hora_termino)\r\n                    : (\"0\")) + \") horas\" : null}</div>,\r\n\r\n            selector: clasificacion_radicado => clasificacion_radicado.attributes.expediente.nombre,\r\n            sortable: true,\r\n            width: \"20%\"\r\n        },\r\n\r\n        {\r\n            name: 'Descripción',\r\n            cell: clasificacion_radicado => <div title={clasificacion_radicado.attributes.observaciones}>{clasificacion_radicado.attributes.observaciones ?\r\n                (clasificacion_radicado.attributes.observaciones.length > global.Constants.TEXT_AREA.CANTIDAD_MINIMA_DESCRIPCION\r\n                    ? clasificacion_radicado.attributes.observaciones.substring(0, global.Constants.TEXT_AREA.CANTIDAD_MINIMA_DESCRIPCION) + \"...\" : clasificacion_radicado.attributes.observaciones) : \"\"}</div>,\r\n            selector: clasificacion_radicado => clasificacion_radicado.attributes.expediente.nombre,\r\n            sortable: true,\r\n            width: \"30%\"\r\n        },\r\n\r\n        {\r\n            name: 'Estado',\r\n            selector: clasificacion_radicado => (clasificacion_radicado.attributes.estado == \"1\" ? 'Activo' : 'Inactivo'),\r\n            sortable: true,\r\n            width: \"10%\"\r\n        },\r\n        {\r\n            name: 'Término',\r\n            selector: clasificacion_radicado => 'Ver Normatividad',\r\n            sortable: true,\r\n            width: \"15%\"\r\n        },\r\n    ];\r\n\r\n\r\n    const [getRoutes, setRoutes] = useState({\r\n        id_etapa: from.idEtapa,\r\n        id_fase: global.Constants.FASES.CLASIFICACION,\r\n        crear_registro: \"/ClasificacionRadicadoForm\",\r\n        consultar_registros: \"/ClasificacionRadicadoLista\",\r\n        adjuntar_documento: \"/SoporteRadicadoForm\",\r\n        repositorio_documentos: \"/SoporteRadicadoLista\",\r\n        modulo: \"CR_ClasificacionRadicado\",\r\n        funcionalidad_crear: \"Crear\",\r\n        funcionalidad_consultar: \"Consultar\",\r\n        muestra_atras: true,\r\n        muestra_inactivos: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            window.showSpinner(true);\r\n            setEstadoLista(\"Activos\")\r\n            cargarClasificaciones(1, paganationPerPages, '1');\r\n\r\n\r\n            // VALIDA CIERRE DE ETAPA EVALUACION\r\n            const dataCierreEtapa = {\r\n\r\n                \"data\": {\r\n                    \"type\": \"cerrar_etapa\",\r\n                    \"attributes\": {\r\n                        \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                        \"id_etapa\": global.Constants.ETAPAS.CAPTURA_REPARTO,\r\n                        \"id_delegada\": \"id_delegada\",\r\n                        \"id_funcionario\": \"id_funcionario\"\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*CierreEtapaApi.getCierreEtapaByIdProcesoDisciplinario(dataCierreEtapa).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        if (datos[\"data\"].length > 0) {\r\n                            setEstadoEtapaCapturaReparto(true);\r\n                        }\r\n                    }\r\n                    else {\r\n                        setErrorApi(datos.error.toString())\r\n                        window.showModal(1)\r\n                    }\r\n                }\r\n            )*/\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const cargarClasificaciones = (page, perPage, estado) => {\r\n\r\n        const data = {\r\n            \"data\": {\r\n                \"type\": \"clasificacion_radicado\",\r\n                \"attributes\": {\r\n                    \"id_proceso_disciplinario\": procesoDisciplinarioId,\r\n                    \"id_etapa\": global.Constants.ETAPAS.CAPTURA_REPARTO,\r\n                    \"id_tipo_expediente\": \"1\",\r\n                    \"estado\": estado,\r\n                    'per_page': perPage,\r\n                    'current_page': page\r\n                }\r\n            }\r\n        }\r\n        // console.log(JSON.stringify(data));\r\n\r\n        if (hasAccess('CR_ClasificacionRadicado', 'Consultar')) {\r\n            ClasificacionRadicadoApi.getAllClasificacionRadicadoByIdProDisciplinario(data, procesoDisciplinarioId).then(\r\n                datos => {\r\n                    if (!datos.error) {\r\n                        setClasificacionRadicadoLista(datos);\r\n                        //validarMostrarBotonAgregar();\r\n                        validarTipoExpedienteQuejaInterna(datos);\r\n\r\n                        if (datos.data.length > 0) {\r\n                            from.subTipoExpediente = datos.data[0][\"attributes\"];\r\n                        }\r\n                    }\r\n                    /* else {\r\n                         setErrorApi(datos.error.toString())\r\n                         window.showSpinner(false);\r\n                         window.showModal()\r\n                     }*/\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            window.showSpinner(false)\r\n        }\r\n    }\r\n\r\n    // Metodo encargado de validar el tipo de expediente del proceso\r\n    const validarTipoExpedienteQuejaInterna = (dataClasificacion) => {\r\n\r\n        // Se captura y valida si hay informacion del clasificado\r\n        let hayInformacion;\r\n\r\n        // Se valida que haya informacion\r\n        if (dataClasificacion && dataClasificacion.data.length > 0) {\r\n\r\n            // Se redeclara la variable\r\n            hayInformacion = true\r\n        }\r\n\r\n        // Se ejecuta la API\r\n        GenericApi.getGeneric(\"validar-tipo-expediente-queja-interna/\" + procesoDisciplinarioId).then(\r\n\r\n            // Se inicializa la variable de respuesta\r\n            datos => {\r\n\r\n                // Se valida que no haya error\r\n                if (!datos.error) {\r\n\r\n                    console.log(\"idEtapa                        -> \", idEtapa);\r\n                    console.log(\"from.cierreEtapaCapturaReparto -> \", datos.data.attributes.queja_interna);\r\n                    console.log(\"----------------------------------------------------\");\r\n                    console.log(from);\r\n                    console.log(from.idTipoProceso);\r\n\r\n                    // Se valida cuando es queja interna\r\n                    if (datos.data.attributes.queja_interna && idEtapa > 1) {\r\n                        console.log(\"La etapa es queja interna y es mayor a 1\")\r\n\r\n                        // Se setea el boton en true \r\n                        setMostrarBotonAgregar(false);\r\n                    } else if (datos.data.attributes.queja_interna && idEtapa == 1) {\r\n                        console.log(\"La etapa es queja interna y es igual a 1\")\r\n\r\n                        // Se setea el boton en false \r\n                        setMostrarBotonAgregar(false);\r\n                    } else if (from.idTipoProceso == 2) {\r\n                        console.log(\"La etapa es queja interna y es igual a 1\")\r\n\r\n                        setMostrarBotonAgregar(false);\r\n                    } else if (idEtapa > 1) {\r\n\r\n                        console.log(\"La etapa es mayor a 1\")\r\n\r\n                        // Se setea el boton en false \r\n                        setMostrarBotonAgregar(false);\r\n                    } else if (idEtapa == 1) {\r\n\r\n                        console.log(\"La etapa es igual a 1\")\r\n\r\n                        // Se setea el boton en false \r\n                        setMostrarBotonAgregar(true);\r\n                    }\r\n                    console.log(\"----------------------------------------------------\");\r\n\r\n                    // Se llama el metodo\r\n                    nombreProceso();\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    const nombreProceso = () => {\r\n\r\n        GenericApi.getByIdGeneric(\"nombre-proceso\", procesoDisciplinarioId).then(\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setNombreProceso(datos.data.attributes.nombre);\r\n                    validarTipoProcesoDisciplinario();\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    // Metodo encargado de validar el tipo de expediente del proceso\r\n    const validarTipoProcesoDisciplinario = () => {\r\n\r\n        GenericApi.getGeneric(\"validar-proceso-disciplinario/\" + procesoDisciplinarioId).then(\r\n\r\n\r\n            datos => {\r\n                if (!datos.error) {\r\n                    setMostrarBotonAgregar(false);\r\n                    console.log(\"HOLA1 \"+getMostrarBotonAgregar);\r\n\r\n                    console.log(\"HOLA1\");\r\n                }\r\n                window.showSpinner(false);\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    const handlePageChange = page => {\r\n        //window.showSpinner(true);\r\n        setPageActual(page);\r\n        //cargarClasificaciones(page, perPage, (getEstadoLista == \"Inactivos\" ? '0' : \"1\"));\r\n    }\r\n\r\n    const handlePerRowsChange = async (newPerPage, page) => {\r\n        //window.showSpinner(true);\r\n        setPerPage(newPerPage);\r\n        setPageActual(page);\r\n        //cargarClasificaciones(page, newPerPage, (getEstadoLista == \"Inactivos\" ? '0' : \"1\"));\r\n\r\n    }\r\n\r\n    const handleCallback = (childData) => {\r\n        try {\r\n            window.showSpinner(true);\r\n            setEstadoLista(childData == global.Constants.ESTADOS.INACTIVO ? \"Inactivos\" : \"Activos\")\r\n            cargarClasificaciones(1, paganationPerPages, childData);\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Spinner />\r\n            <Formik>\r\n                <Form>\r\n                    <div className=\"w2d_block\">\r\n                        <nav aria-label=\"breadcrumb\">\r\n                            <ol className=\"breadcrumb breadcrumb-alt push\">\r\n                                <li class=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/MisPendientes`}><small>Mis Pendientes</small></Link></li>\r\n                                <li class=\"breadcrumb-item\"> <Link underline=\"hover\" className=\"text-dark\" to={`/RamasProceso/`} state={{ from: from, disable: disable }}><small>Ramas del proceso</small></Link></li>\r\n                                <li class=\"breadcrumb-item\"> <small>Lista de clasificación del radicado</small></li>\r\n                            </ol>\r\n                        </nav>\r\n                    </div>\r\n\r\n                    <div className=\"block block-themed\">\r\n                        <div className=\"block-header\">\r\n                            <h3 className=\"block-title\">{getNombreProceso} :: <strong>Consultar lista de Clasificación del radicado {getEstadoLista}</strong></h3>\r\n                        </div>\r\n\r\n                        <div className=\"block-content\">\r\n                            <>\r\n\r\n\r\n                                <div className='row'>\r\n\r\n                                    <div className='col-md-3'>\r\n                                        <div className=\"form-group \">\r\n                                            <Field type=\"text\" id=\"search\" name=\"search\" value={getSeach} onChange={e => setSeach(e.target.value)} onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }} className=\"form-control border border-success\" placeholder=\"Buscar\" />\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {getMostrarBotonAgregar != null ? (\r\n                                        <ListaBotones\r\n                                            getRoutes={getRoutes}\r\n                                            from={from}\r\n                                            mostrarBotonAgregar={getMostrarBotonAgregar}\r\n                                            parentCallback={handleCallback}\r\n                                            id=\"botonesNavegacion\"\r\n                                            name=\"botonesNavegacion\" />\r\n                                    ) : null}\r\n\r\n                                </div>\r\n\r\n                                {\r\n                                    (hasAccess('CR_ClasificacionRadicado', 'Consultar')) ? (\r\n\r\n                                        <DataTable className=\"table table-bordered table-striped table-vcenter js-dataTable-full\"\r\n                                            columns={columns}\r\n                                            data={clasificacionRadicadoLista.data.filter((suggestion) => {\r\n                                                if (getSeach === \"\") {\r\n                                                    return suggestion;\r\n                                                } else if (\r\n\r\n                                                    ((quitarAcentos(suggestion.attributes.etapa.nombre) +\r\n                                                        suggestion.attributes.created_at + quitarAcentos(suggestion.attributes.estado)\r\n                                                        + quitarAcentos(suggestion.attributes.observaciones)\r\n                                                        + quitarAcentos(suggestion.attributes.nombre_completo)\r\n                                                        + ((suggestion.attributes.expediente ? quitarAcentos(suggestion.attributes.expediente.nombre) : \"\") + \" \" + (suggestion.attributes.tipo_queja ? quitarAcentos(suggestion.attributes.tipo_queja.nombre) : \"\"))\r\n                                                        + (suggestion.attributes.tipo_derecho_peticion ? quitarAcentos(suggestion.attributes.tipo_derecho_peticion.nombre) : \"\")\r\n                                                        + (suggestion.attributes.fecha_termino ? suggestion.attributes.fecha_termino : \"\")\r\n                                                        + (suggestion.attributes.hora_termino ? suggestion.attributes.hora_termino : \"\")).toLowerCase().includes(quitarAcentos(getSeach.toLowerCase())))\r\n\r\n                                                ) {\r\n                                                    return suggestion;\r\n                                                }\r\n                                            })}\r\n                                            perPage={perPage}\r\n                                            page={pageActual}\r\n                                            pagination\r\n                                            noDataComponent={global.Constants.DATA_TABLE.SIN_DATOS_TABLE}\r\n                                            paginationTotalRows={clasificacionRadicadoLista.data.length}\r\n                                            onChangePage={handlePageChange}\r\n                                            onChangeRowsPerPage={handlePerRowsChange}\r\n                                            defaultSortFieldId=\"Nombre\"\r\n                                            striped\r\n                                            paginationComponentOptions={{ rowsPerPageText: global.Constants.DATA_TABLE.FILTRO_POR_PAGINA }}\r\n                                            defaultSortAsc={false}\r\n                                        />\r\n                                    ) : null\r\n                                }\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n        </>\r\n    );\r\n\r\n\r\n}\r\nexport default ClasificacionRadicadoLista;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}